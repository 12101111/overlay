From 7259955ce318a2bb2a86ee121c34dcaab0a86e45 Mon Sep 17 00:00:00 2001
From: Alex Dima <alexdima@microsoft.com>
Date: Tue, 11 May 2021 19:10:55 +0200
Subject: [PATCH] Do not invoke `resolveWithInteraction` over terminal settings
 (#123590)

---
 .../contrib/terminal/common/remoteTerminalChannel.ts       | 4 ++--
 .../configurationResolver/common/configurationResolver.ts  | 7 +++++++
 .../configurationResolver/common/variableResolver.ts       | 2 +-
 3 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/vs/workbench/contrib/terminal/common/remoteTerminalChannel.ts b/src/vs/workbench/contrib/terminal/common/remoteTerminalChannel.ts
index 302ae7aaebdc7..d58581b143549 100644
--- a/src/vs/workbench/contrib/terminal/common/remoteTerminalChannel.ts
+++ b/src/vs/workbench/contrib/terminal/common/remoteTerminalChannel.ts
@@ -142,10 +142,10 @@ export class RemoteTerminalChannelClient {
 		const lastActiveWorkspace = activeWorkspaceRootUri ? withNullAsUndefined(this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;
 		let allResolvedVariables: Map<string, string> | undefined = undefined;
 		try {
-			allResolvedVariables = await this._resolverService.resolveWithInteraction(lastActiveWorkspace, {
+			allResolvedVariables = (await this._resolverService.resolveAnyMap(lastActiveWorkspace, {
 				shellLaunchConfig,
 				configuration
-			});
+			})).resolvedVariables;
 		} catch (err) {
 			this._logService.error(err);
 		}
diff --git a/src/vs/workbench/services/configurationResolver/common/configurationResolver.ts b/src/vs/workbench/services/configurationResolver/common/configurationResolver.ts
index 68a71a2b08c17..be8987984e416 100644
--- a/src/vs/workbench/services/configurationResolver/common/configurationResolver.ts
+++ b/src/vs/workbench/services/configurationResolver/common/configurationResolver.ts
@@ -26,6 +26,13 @@ export interface IConfigurationResolverService {
 	 */
 	resolveAnyAsync(folder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<any>;
 
+	/**
+	 * Recursively resolves all variables in the given config.
+	 * Returns a copy of it with substituted values and a map of variables and their resolution.
+	 * Keys in the map will be of the format input:variableName or command:variableName.
+	 */
+	resolveAnyMap(folder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any, resolvedVariables: Map<string, string> }>;
+
 	/**
 	 * Recursively resolves all variables (including commands and user input) in the given config and returns a copy of it with substituted values.
 	 * If a "variables" dictionary (with names -> command ids) is given, command variables are first mapped through it before being resolved.
diff --git a/src/vs/workbench/services/configurationResolver/common/variableResolver.ts b/src/vs/workbench/services/configurationResolver/common/variableResolver.ts
index cb4efa5ee73c0..bf9db2b21feb4 100644
--- a/src/vs/workbench/services/configurationResolver/common/variableResolver.ts
+++ b/src/vs/workbench/services/configurationResolver/common/variableResolver.ts
@@ -99,7 +99,7 @@ export class AbstractVariableResolverService implements IConfigurationResolverSe
 		return this.resolveAnyBase(workspaceFolder, config, commandValueMapping);
 	}
 
-	protected async resolveAnyMap(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any, resolvedVariables: Map<string, string> }> {
+	public async resolveAnyMap(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any, resolvedVariables: Map<string, string> }> {
 		const resolvedVariables = new Map<string, string>();
 		const newConfig = await this.resolveAnyBase(workspaceFolder, config, commandValueMapping, resolvedVariables);
 		return { newConfig, resolvedVariables };
