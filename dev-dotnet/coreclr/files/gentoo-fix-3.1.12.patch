diff --git a/CMakeLists.txt b/CMakeLists.txt
index 21f2031b95..df8f3f25d4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,6 @@ set(CLR_DIR ${CMAKE_CURRENT_SOURCE_DIR})
 set(VM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/vm)
 set(GENERATED_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/src/inc)
 set(GENERATED_EVENTING_DIR ${CMAKE_CURRENT_BINARY_DIR}/Eventing)
-set(VERSION_FILE_PATH "${CMAKE_BINARY_DIR}/version.c")
 set(PAL_REDEFINES_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/dlls/mscordac/palredefines.S)
 
 set(CORECLR_SET_RPATH ON)
diff --git a/configurecompiler.cmake b/configurecompiler.cmake
index d769e82f57..ef4958c2d5 100644
--- a/configurecompiler.cmake
+++ b/configurecompiler.cmake
@@ -6,6 +6,9 @@ set(CMAKE_C_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
+# All code we build should be compiled as position independent.
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
 set(CLR_DEFINES_DEBUG_INIT              DEBUG _DEBUG _DBG URTBLDENV_FRIENDLY=Checked BUILDENV_CHECKED=1)
 set(CLR_DEFINES_CHECKED_INIT            DEBUG _DEBUG _DBG URTBLDENV_FRIENDLY=Checked BUILDENV_CHECKED=1)
 set(CLR_DEFINES_RELEASE_INIT            NDEBUG URTBLDENV_FRIENDLY=Retail)
@@ -293,6 +296,8 @@ elseif (CLR_CMAKE_PLATFORM_UNIX)
   elseif (UPPERCASE_CMAKE_BUILD_TYPE STREQUAL RELEASE)
     # Then RELEASE
     set_property(DIRECTORY PROPERTY COMPILE_DEFINITIONS ${CLR_DEFINES_RELEASE_INIT})
+  elseif (UPPERCASE_CMAKE_BUILD_TYPE STREQUAL GENTOO)
+    set_property(DIRECTORY PROPERTY COMPILE_DEFINITIONS ${CLR_DEFINES_RELEASE_INIT})
   elseif (UPPERCASE_CMAKE_BUILD_TYPE STREQUAL RELWITHDEBINFO)
     # And then RELWITHDEBINFO
     set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS ${CLR_DEFINES_RELWITHDEBINFO_INIT})
@@ -322,10 +327,9 @@ elseif (CLR_CMAKE_PLATFORM_UNIX)
       endif ()
 
       # -fdata-sections -ffunction-sections: each function has own section instead of one per .o file (needed for --gc-sections)
-      # -fPIC: enable Position Independent Code normally just for shared libraries but required when linking with address sanitizer
       # -O1: optimization level used instead of -O0 to avoid compile error "invalid operand for inline asm constraint"
-      set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CLR_SANITIZE_CXX_FLAGS} -fdata-sections -ffunction-sections -fPIC -O1")
-      set(CMAKE_CXX_FLAGS_CHECKED "${CMAKE_CXX_FLAGS_CHECKED} ${CLR_SANITIZE_CXX_FLAGS} -fdata-sections -ffunction-sections -fPIC -O1")
+      set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CLR_SANITIZE_CXX_FLAGS} -fdata-sections -ffunction-sections -O1")
+      set(CMAKE_CXX_FLAGS_CHECKED "${CMAKE_CXX_FLAGS_CHECKED} ${CLR_SANITIZE_CXX_FLAGS} -fdata-sections -ffunction-sections -O1")
 
       set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${CLR_SANITIZE_LINK_FLAGS}")
       set(CMAKE_EXE_LINKER_FLAGS_CHECKED "${CMAKE_EXE_LINKER_FLAGS_CHECKED} ${CLR_SANITIZE_LINK_FLAGS}")
@@ -335,6 +339,12 @@ elseif (CLR_CMAKE_PLATFORM_UNIX)
       set(CMAKE_SHARED_LINKER_FLAGS_CHECKED "${CMAKE_SHARED_LINKER_FLAGS_CHECKED} ${CLR_SANITIZE_LINK_FLAGS} -Wl,--gc-sections")
     endif ()
   endif(UPPERCASE_CMAKE_BUILD_TYPE STREQUAL DEBUG OR UPPERCASE_CMAKE_BUILD_TYPE STREQUAL CHECKED)
+
+  # This linker option causes executables we build to be marked as containing
+  # position independent code.
+  # It is necessary to make ASLR work for executables.
+  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pie")
+
 endif(WIN32)
 
 # CLR_ADDITIONAL_LINKER_FLAGS - used for passing additional arguments to linker
diff --git a/src/binder/CMakeLists.txt b/src/binder/CMakeLists.txt
index d92bec6c99..07f6c15bff 100644
--- a/src/binder/CMakeLists.txt
+++ b/src/binder/CMakeLists.txt
@@ -91,9 +91,5 @@ endif(WIN32)
 convert_to_absolute_path(BINDER_SOURCES ${BINDER_SOURCES})
 convert_to_absolute_path(BINDER_CROSSGEN_SOURCES ${BINDER_CROSSGEN_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(v3binder)
 add_subdirectory(v3binder_crossgen)
diff --git a/src/classlibnative/bcltype/CMakeLists.txt b/src/classlibnative/bcltype/CMakeLists.txt
index 843d7e8b68..67d1ad2bab 100644
--- a/src/classlibnative/bcltype/CMakeLists.txt
+++ b/src/classlibnative/bcltype/CMakeLists.txt
@@ -11,10 +11,6 @@ set(BCLTYPE_SOURCES
     variant.cpp
 )
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_library_clr(bcltype
     STATIC
     ${BCLTYPE_SOURCES}
diff --git a/src/classlibnative/float/CMakeLists.txt b/src/classlibnative/float/CMakeLists.txt
index bf173fe658..44d40c9259 100644
--- a/src/classlibnative/float/CMakeLists.txt
+++ b/src/classlibnative/float/CMakeLists.txt
@@ -7,10 +7,6 @@ set(FLOAT_SOURCES
     floatsingle.cpp
 )
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_library_clr(comfloat_wks
     STATIC
     ${FLOAT_SOURCES}
diff --git a/src/coreclr/hosts/osxbundlerun/CMakeLists.txt b/src/coreclr/hosts/osxbundlerun/CMakeLists.txt
index 8af173f970..802c5899ad 100644
--- a/src/coreclr/hosts/osxbundlerun/CMakeLists.txt
+++ b/src/coreclr/hosts/osxbundlerun/CMakeLists.txt
@@ -2,8 +2,6 @@ project(osxbundlerun)
 
 include_directories(../unixcoreruncommon)
 
-add_compile_options(-fPIE)
-
 set(CORERUN_SOURCES 
     osxbundlerun.cpp 
 )
diff --git a/src/coreclr/hosts/unixcoreconsole/CMakeLists.txt b/src/coreclr/hosts/unixcoreconsole/CMakeLists.txt
index 2daeaabfa3..6e337b662b 100644
--- a/src/coreclr/hosts/unixcoreconsole/CMakeLists.txt
+++ b/src/coreclr/hosts/unixcoreconsole/CMakeLists.txt
@@ -2,8 +2,6 @@ project(unixcoreconsole)
 
 include_directories(../unixcoreruncommon)
 
-add_compile_options(-fPIE)
-
 set(CORECONSOLE_SOURCES 
     coreconsole.cpp 
 )
diff --git a/src/coreclr/hosts/unixcorerun/CMakeLists.txt b/src/coreclr/hosts/unixcorerun/CMakeLists.txt
index 07beaae1df..5ee10b871c 100644
--- a/src/coreclr/hosts/unixcorerun/CMakeLists.txt
+++ b/src/coreclr/hosts/unixcorerun/CMakeLists.txt
@@ -2,8 +2,6 @@ project(unixcorerun)
 
 include_directories(../unixcoreruncommon)
 
-add_compile_options(-fPIE)
-
 set(CORERUN_SOURCES 
     corerun.cpp 
 )
diff --git a/src/coreclr/hosts/unixcoreruncommon/CMakeLists.txt b/src/coreclr/hosts/unixcoreruncommon/CMakeLists.txt
index 93a5bbf9ff..c859b0a312 100644
--- a/src/coreclr/hosts/unixcoreruncommon/CMakeLists.txt
+++ b/src/coreclr/hosts/unixcoreruncommon/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(unixcoreruncommon)
 
-add_compile_options(-fPIC)
-
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 
 include(configure.cmake)
diff --git a/src/corefx/System.Globalization.Native/CMakeLists.txt b/src/corefx/System.Globalization.Native/CMakeLists.txt
index 454d69f53d..ae3fd99821 100644
--- a/src/corefx/System.Globalization.Native/CMakeLists.txt
+++ b/src/corefx/System.Globalization.Native/CMakeLists.txt
@@ -37,8 +37,6 @@ endif()
 
 include(configure.cmake)
 
-add_compile_options(-fPIC)
-
 set(NATIVEGLOBALIZATION_SOURCES
     pal_calendarData.c
     pal_casing.c
diff --git a/src/corefx/System.Globalization.Native/pal_icushim.h b/src/corefx/System.Globalization.Native/pal_icushim.h
index 4ada6b97f5..0c29d74c61 100644
--- a/src/corefx/System.Globalization.Native/pal_icushim.h
+++ b/src/corefx/System.Globalization.Native/pal_icushim.h
@@ -35,6 +35,9 @@
 #include <unicode/urename.h>
 #include <unicode/ustring.h>
 
+#define TRUE  1
+#define FALSE 0
+
 // List of all functions from the ICU libraries that are used in the System.Globalization.Native.so
 #define FOR_ALL_UNCONDITIONAL_ICU_FUNCTIONS \
     PER_FUNCTION_BLOCK(u_charsToUChars, libicuuc) \
diff --git a/src/debug/createdump/CMakeLists.txt b/src/debug/createdump/CMakeLists.txt
index b44016c4d0..fa6881b142 100644
--- a/src/debug/createdump/CMakeLists.txt
+++ b/src/debug/createdump/CMakeLists.txt
@@ -20,8 +20,6 @@ include_directories(BEFORE ${VM_DIR})
 
 add_definitions(-DPAL_STDCPP_COMPAT)
 
-add_compile_options(-fPIE)
-
 set(CREATEDUMP_SOURCES 
     createdump.cpp 
     crashinfo.cpp
@@ -30,7 +28,7 @@ set(CREATEDUMP_SOURCES
     dumpwriter.cpp
 )
 
-_add_library(createdump_lib
+_add_library(createdump_lib STATIC
     ${CREATEDUMP_SOURCES}
 )
 
diff --git a/src/debug/daccess/CMakeLists.txt b/src/debug/daccess/CMakeLists.txt
index 0e8ccfe67f..65e39a24b3 100644
--- a/src/debug/daccess/CMakeLists.txt
+++ b/src/debug/daccess/CMakeLists.txt
@@ -11,7 +11,6 @@ include_directories(${CLR_DIR}/src/gcdump)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
   include_directories(${GENERATED_INCLUDE_DIR})
-  add_compile_options(-fPIC)
 endif(CLR_CMAKE_PLATFORM_UNIX)
 
 set(DACCESS_SOURCES
@@ -41,7 +40,7 @@ convert_to_absolute_path(DACCESS_SOURCES ${DACCESS_SOURCES})
 
 add_precompiled_header(stdafx.h stdafx.cpp DACCESS_SOURCES)
 
-add_library_clr(daccess ${DACCESS_SOURCES})
+add_library_clr(daccess STATIC ${DACCESS_SOURCES})
 
 add_dependencies(daccess eventing_headers)
 
diff --git a/src/debug/dbgutil/CMakeLists.txt b/src/debug/dbgutil/CMakeLists.txt
index 1c0d49a24e..6c43b5ca75 100644
--- a/src/debug/dbgutil/CMakeLists.txt
+++ b/src/debug/dbgutil/CMakeLists.txt
@@ -9,8 +9,4 @@ set(DBGUTIL_SOURCES
     dbgutil.cpp
 )
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_library_clr(dbgutil STATIC ${DBGUTIL_SOURCES})
diff --git a/src/debug/debug-pal/CMakeLists.txt b/src/debug/debug-pal/CMakeLists.txt
index 59ed63ea4f..c10d7d7d56 100644
--- a/src/debug/debug-pal/CMakeLists.txt
+++ b/src/debug/debug-pal/CMakeLists.txt
@@ -16,8 +16,6 @@ if(WIN32)
 endif(WIN32)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-
     add_definitions(-DFEATURE_PAL)
     add_definitions(-DPAL_IMPLEMENTATION)
     add_definitions(-D_POSIX_C_SOURCE=200809L)
diff --git a/src/debug/di/CMakeLists.txt b/src/debug/di/CMakeLists.txt
index f0a9d41ec9..2cdb084f28 100644
--- a/src/debug/di/CMakeLists.txt
+++ b/src/debug/di/CMakeLists.txt
@@ -89,8 +89,6 @@ if(WIN32)
         set(CORDBDI_SOURCES_ASM_FILE ${CMAKE_CURRENT_BINARY_DIR}/${name}.obj)
     endif()
 elseif(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-
     if(CLR_CMAKE_TARGET_ARCH_AMD64 OR CLR_CMAKE_TARGET_ARCH_ARM64 OR CLR_CMAKE_TARGET_ARCH_ARM)
       set(CORDBDI_SOURCES_ASM_FILE
         ${ARCH_SOURCES_DIR}/floatconversion.S
diff --git a/src/debug/ee/CMakeLists.txt b/src/debug/ee/CMakeLists.txt
index 11a670285b..383ab24cfb 100644
--- a/src/debug/ee/CMakeLists.txt
+++ b/src/debug/ee/CMakeLists.txt
@@ -6,10 +6,6 @@ include_directories(BEFORE ${VM_DIR})
 include_directories(BEFORE ${VM_DIR}/${ARCH_SOURCES_DIR})
 include_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-  add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 set(CORDBEE_SOURCES_DAC_AND_WKS
   controller.cpp
   debugger.cpp
diff --git a/src/debug/ee/dac/CMakeLists.txt b/src/debug/ee/dac/CMakeLists.txt
index ceae5c9faa..f90bdf986b 100644
--- a/src/debug/ee/dac/CMakeLists.txt
+++ b/src/debug/ee/dac/CMakeLists.txt
@@ -7,5 +7,5 @@ if (WIN32)
   list(APPEND CORDBEE_SOURCES_DAC ${CORDBEE_HEADERS_DAC})
 endif (WIN32)
 
-add_library_clr(cordbee_dac ${CORDBEE_SOURCES_DAC})
+add_library_clr(cordbee_dac STATIC ${CORDBEE_SOURCES_DAC})
 add_dependencies(cordbee_dac eventing_headers)
diff --git a/src/debug/ee/wks/CMakeLists.txt b/src/debug/ee/wks/CMakeLists.txt
index c6a4bccb08..58dbb02821 100644
--- a/src/debug/ee/wks/CMakeLists.txt
+++ b/src/debug/ee/wks/CMakeLists.txt
@@ -54,10 +54,8 @@ if (WIN32)
 
 else ()
 
-  add_compile_options(-fPIC)
-
   if(CLR_CMAKE_PLATFORM_ARCH_AMD64 OR CLR_CMAKE_PLATFORM_ARCH_ARM OR CLR_CMAKE_PLATFORM_ARCH_ARM64 OR CLR_CMAKE_PLATFORM_ARCH_I386)
-    add_library_clr(cordbee_wks ${CORDBEE_SOURCES_WKS} ../${ARCH_SOURCES_DIR}/dbghelpers.S)
+    add_library_clr(cordbee_wks STATIC ${CORDBEE_SOURCES_WKS} ../${ARCH_SOURCES_DIR}/dbghelpers.S)
   else()
     message(FATAL_ERROR "Unknown platform")
   endif()
diff --git a/src/debug/ildbsymlib/CMakeLists.txt b/src/debug/ildbsymlib/CMakeLists.txt
index 1bd1096ed6..3f65507f6d 100644
--- a/src/debug/ildbsymlib/CMakeLists.txt
+++ b/src/debug/ildbsymlib/CMakeLists.txt
@@ -10,9 +10,5 @@ set( ILDBSYMLIB_SOURCES
   symwrite.cpp
 )
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
-add_library_clr(ildbsymlib ${ILDBSYMLIB_SOURCES})
+add_library_clr(ildbsymlib STATIC ${ILDBSYMLIB_SOURCES})
 
diff --git a/src/debug/shim/CMakeLists.txt b/src/debug/shim/CMakeLists.txt
index 8720eb7df2..28b7f624c5 100644
--- a/src/debug/shim/CMakeLists.txt
+++ b/src/debug/shim/CMakeLists.txt
@@ -4,10 +4,6 @@ if(WIN32)
   add_definitions(-DHOST_IS_WINDOWS_OS)
 endif(WIN32)
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-  add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 set(DEBUGSHIM_SOURCES
   debugshim.cpp
 )
diff --git a/src/dlls/dbgshim/CMakeLists.txt b/src/dlls/dbgshim/CMakeLists.txt
index 7e6ae61de1..ca4556bd03 100644
--- a/src/dlls/dbgshim/CMakeLists.txt
+++ b/src/dlls/dbgshim/CMakeLists.txt
@@ -41,8 +41,6 @@ endif(CLR_CMAKE_PLATFORM_DARWIN)
 add_library_clr(dbgshim SHARED ${DBGSHIM_SOURCES})
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-
     add_custom_target(dbgshim_exports DEPENDS ${EXPORTS_FILE})
     add_dependencies(dbgshim dbgshim_exports)
 
diff --git a/src/dlls/mscordac/CMakeLists.txt b/src/dlls/mscordac/CMakeLists.txt
index e065eba023..df8d615e0a 100644
--- a/src/dlls/mscordac/CMakeLists.txt
+++ b/src/dlls/mscordac/CMakeLists.txt
@@ -1,10 +1,6 @@
 include(${CLR_DIR}/dac.cmake)
 add_definitions(-DFEATURE_NO_HOST)
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 set(CLR_DAC_SOURCES
 )
 
diff --git a/src/dlls/mscorrc/CMakeLists.txt b/src/dlls/mscorrc/CMakeLists.txt
index 8f67988a23..366ace4631 100644
--- a/src/dlls/mscorrc/CMakeLists.txt
+++ b/src/dlls/mscorrc/CMakeLists.txt
@@ -9,10 +9,6 @@ if(WIN32)
     string(REPLACE "/guard:cf" "" CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS})
 endif(WIN32)
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(full)
 
 # Only add the small version of the resources if the platform is Windows.
diff --git a/src/gc/CMakeLists.txt b/src/gc/CMakeLists.txt
index ab9f3a0bad..17a774ceb5 100644
--- a/src/gc/CMakeLists.txt
+++ b/src/gc/CMakeLists.txt
@@ -97,7 +97,6 @@ target_link_libraries(clrgc ${GC_LINK_LIBRARIES})
 install_clr(clrgc)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-  add_compile_options(-fPIC)
   # dprintf causes many warnings (https://github.com/dotnet/coreclr/issues/13367)
   add_compile_options(-Wno-format)
 endif(CLR_CMAKE_PLATFORM_UNIX)
diff --git a/src/gc/unix/CMakeLists.txt b/src/gc/unix/CMakeLists.txt
index fbb94fd513..7c6e627c73 100644
--- a/src/gc/unix/CMakeLists.txt
+++ b/src/gc/unix/CMakeLists.txt
@@ -1,5 +1,4 @@
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
-add_compile_options(-fPIC)
 include_directories("../env")
 
 include(configure.cmake)
diff --git a/src/gcinfo/CMakeLists.txt b/src/gcinfo/CMakeLists.txt
index 79c4f486da..c9c60db89e 100644
--- a/src/gcinfo/CMakeLists.txt
+++ b/src/gcinfo/CMakeLists.txt
@@ -16,10 +16,6 @@ endif(CLR_CMAKE_TARGET_ARCH_I386)
 
 convert_to_absolute_path(GCINFO_SOURCES ${GCINFO_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(lib)
 add_subdirectory(crossgen)
 
diff --git a/src/ilasm/CMakeLists.txt b/src/ilasm/CMakeLists.txt
index 6117030dcc..46850fabf2 100644
--- a/src/ilasm/CMakeLists.txt
+++ b/src/ilasm/CMakeLists.txt
@@ -10,10 +10,6 @@ add_definitions(-DFEATURE_CORECLR)
 include_directories(.)
 include_directories(../ildasm/unixcoreclrloader)
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-  add_compile_options(-fPIE)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 set(ILASM_SOURCES
   assem.cpp
   writer.cpp
diff --git a/src/ildasm/exe/CMakeLists.txt b/src/ildasm/exe/CMakeLists.txt
index 196f2395b7..a8ca1df3b0 100644
--- a/src/ildasm/exe/CMakeLists.txt
+++ b/src/ildasm/exe/CMakeLists.txt
@@ -10,7 +10,6 @@ add_definitions(-DFEATURE_CORECLR)
 include_directories(..)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIE)
     include_directories(../unixcoreclrloader)
     build_resources(${CMAKE_CURRENT_SOURCE_DIR}/../dasm.rc dasm_rc TARGET_CPP_FILE)
 
diff --git a/src/inc/CMakeLists.txt b/src/inc/CMakeLists.txt
index c38d59587a..bb3b859b93 100644
--- a/src/inc/CMakeLists.txt
+++ b/src/inc/CMakeLists.txt
@@ -62,7 +62,6 @@ foreach(IDL_SOURCE IN LISTS CORGUIDS_IDL_SOURCES)
    list(APPEND CORGUIDS_SOURCES ${C_SOURCE})
 endforeach(IDL_SOURCE)
 
-add_compile_options(-fPIC)
 endif(WIN32)
 
 if(FEATURE_JIT_PITCHING)
@@ -70,7 +69,7 @@ if(FEATURE_JIT_PITCHING)
 endif(FEATURE_JIT_PITCHING)
 
 # Compile *_i.cpp to lib
-_add_library(corguids ${CORGUIDS_SOURCES})
+_add_library(corguids STATIC ${CORGUIDS_SOURCES})
 
 # Binplace the inc files for packaging later.
 
diff --git a/src/jit/dll/CMakeLists.txt b/src/jit/dll/CMakeLists.txt
index 9e930de69d..624e357989 100644
--- a/src/jit/dll/CMakeLists.txt
+++ b/src/jit/dll/CMakeLists.txt
@@ -3,8 +3,6 @@ project(ClrJit)
 set_source_files_properties(${JIT_EXPORTS_FILE} PROPERTIES GENERATED TRUE)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-
     add_library_clr(clrjit_static
       STATIC
       ${SHARED_LIB_SOURCES}
diff --git a/src/md/ceefilegen/CMakeLists.txt b/src/md/ceefilegen/CMakeLists.txt
index 7170facc6f..57d4cb6338 100644
--- a/src/md/ceefilegen/CMakeLists.txt
+++ b/src/md/ceefilegen/CMakeLists.txt
@@ -21,10 +21,6 @@ set(CEEFILEGEN_HEADERS
     ../../inc/utilcode.h
 )
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_precompiled_header(stdafx.h stdafx.cpp CEEFILEGEN_SOURCES)
 
 if (WIN32)
diff --git a/src/md/compiler/CMakeLists.txt b/src/md/compiler/CMakeLists.txt
index 5000f1b6fc..260731d4a3 100644
--- a/src/md/compiler/CMakeLists.txt
+++ b/src/md/compiler/CMakeLists.txt
@@ -51,10 +51,6 @@ set(MDCOMPILER_HEADERS
 convert_to_absolute_path(MDCOMPILER_SOURCES ${MDCOMPILER_SOURCES})
 convert_to_absolute_path(MDCOMPILER_HEADERS ${MDCOMPILER_HEADERS})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(wks)
 add_subdirectory(dbi)
diff --git a/src/md/compiler/crossgen/CMakeLists.txt b/src/md/compiler/crossgen/CMakeLists.txt
index e732ef637c..6349c9a508 100644
--- a/src/md/compiler/crossgen/CMakeLists.txt
+++ b/src/md/compiler/crossgen/CMakeLists.txt
@@ -7,4 +7,4 @@ if (WIN32)
     list(APPEND MDCOMPILER_SOURCES ${MDCOMPILER_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdcompiler_crossgen ${MDCOMPILER_SOURCES})
+add_library_clr(mdcompiler_crossgen STATIC ${MDCOMPILER_SOURCES})
diff --git a/src/md/compiler/dac/CMakeLists.txt b/src/md/compiler/dac/CMakeLists.txt
index 80041f3fdb..38016ac4dd 100644
--- a/src/md/compiler/dac/CMakeLists.txt
+++ b/src/md/compiler/dac/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDCOMPILER_SOURCES ${MDCOMPILER_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdcompiler_dac ${MDCOMPILER_SOURCES})
+add_library_clr(mdcompiler_dac STATIC ${MDCOMPILER_SOURCES})
diff --git a/src/md/compiler/dbi/CMakeLists.txt b/src/md/compiler/dbi/CMakeLists.txt
index ee7a2cbbd7..619cab6317 100644
--- a/src/md/compiler/dbi/CMakeLists.txt
+++ b/src/md/compiler/dbi/CMakeLists.txt
@@ -6,4 +6,4 @@ if (WIN32)
     list(APPEND MDCOMPILER_SOURCES ${MDCOMPILER_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdcompiler-dbi ${MDCOMPILER_SOURCES})
+add_library_clr(mdcompiler-dbi STATIC ${MDCOMPILER_SOURCES})
diff --git a/src/md/compiler/wks/CMakeLists.txt b/src/md/compiler/wks/CMakeLists.txt
index c4cf62e33b..fe10fe7d85 100644
--- a/src/md/compiler/wks/CMakeLists.txt
+++ b/src/md/compiler/wks/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDCOMPILER_SOURCES ${MDCOMPILER_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdcompiler_wks ${MDCOMPILER_SOURCES})
+add_library_clr(mdcompiler_wks STATIC ${MDCOMPILER_SOURCES})
diff --git a/src/md/datasource/CMakeLists.txt b/src/md/datasource/CMakeLists.txt
index 489ef343aa..3aaa00afa2 100644
--- a/src/md/datasource/CMakeLists.txt
+++ b/src/md/datasource/CMakeLists.txt
@@ -1,7 +1,3 @@
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 set(MDDATASOURCE_SOURCES
   api.cpp
   datatargetreader.cpp
diff --git a/src/md/enc/CMakeLists.txt b/src/md/enc/CMakeLists.txt
index 32d640a09a..2f1398d6f1 100644
--- a/src/md/enc/CMakeLists.txt
+++ b/src/md/enc/CMakeLists.txt
@@ -44,10 +44,6 @@ endif(WIN32)
 convert_to_absolute_path(MDRUNTIMERW_HEADERS ${MDRUNTIMERW_HEADERS})
 convert_to_absolute_path(MDRUNTIMERW_SOURCES ${MDRUNTIMERW_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(wks)
 add_subdirectory(dbi)
diff --git a/src/md/enc/crossgen/CMakeLists.txt b/src/md/enc/crossgen/CMakeLists.txt
index 86aa432945..a64baf03b8 100644
--- a/src/md/enc/crossgen/CMakeLists.txt
+++ b/src/md/enc/crossgen/CMakeLists.txt
@@ -7,4 +7,4 @@ if (WIN32)
     list(APPEND MDRUNTIMERW_SOURCES ${MDRUNTIMERW_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntimerw_crossgen ${MDRUNTIMERW_SOURCES})
+add_library_clr(mdruntimerw_crossgen STATIC ${MDRUNTIMERW_SOURCES})
diff --git a/src/md/enc/dac/CMakeLists.txt b/src/md/enc/dac/CMakeLists.txt
index c4ba31df97..aa060cfb0c 100644
--- a/src/md/enc/dac/CMakeLists.txt
+++ b/src/md/enc/dac/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDRUNTIMERW_SOURCES ${MDRUNTIMERW_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntimerw_dac ${MDRUNTIMERW_SOURCES})
+add_library_clr(mdruntimerw_dac STATIC ${MDRUNTIMERW_SOURCES})
diff --git a/src/md/enc/dbi/CMakeLists.txt b/src/md/enc/dbi/CMakeLists.txt
index d591937148..b777af8806 100644
--- a/src/md/enc/dbi/CMakeLists.txt
+++ b/src/md/enc/dbi/CMakeLists.txt
@@ -6,4 +6,4 @@ if (WIN32)
     list(APPEND MDRUNTIMERW_SOURCES ${MDRUNTIMERW_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntimerw-dbi ${MDRUNTIMERW_SOURCES})
+add_library_clr(mdruntimerw-dbi STATIC ${MDRUNTIMERW_SOURCES})
diff --git a/src/md/enc/wks/CMakeLists.txt b/src/md/enc/wks/CMakeLists.txt
index ff4ec935d0..ffca938009 100644
--- a/src/md/enc/wks/CMakeLists.txt
+++ b/src/md/enc/wks/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDRUNTIMERW_SOURCES ${MDRUNTIMERW_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntimerw_wks ${MDRUNTIMERW_SOURCES})
+add_library_clr(mdruntimerw_wks STATIC ${MDRUNTIMERW_SOURCES})
diff --git a/src/md/hotdata/CMakeLists.txt b/src/md/hotdata/CMakeLists.txt
index 600da6a2be..92a16cc9f2 100644
--- a/src/md/hotdata/CMakeLists.txt
+++ b/src/md/hotdata/CMakeLists.txt
@@ -25,10 +25,6 @@ set(MDHOTDATA_HEADERS
 convert_to_absolute_path(MDHOTDATA_HEADERS ${MDHOTDATA_HEADERS})
 convert_to_absolute_path(MDHOTDATA_SOURCES ${MDHOTDATA_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(full)
 add_subdirectory(crossgen)
diff --git a/src/md/hotdata/crossgen/CMakeLists.txt b/src/md/hotdata/crossgen/CMakeLists.txt
index 4403c2fd68..b3655e8356 100644
--- a/src/md/hotdata/crossgen/CMakeLists.txt
+++ b/src/md/hotdata/crossgen/CMakeLists.txt
@@ -7,4 +7,4 @@ if (WIN32)
     list(APPEND MDHOTDATA_SOURCES ${MDHOTDATA_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdhotdata_crossgen ${MDHOTDATA_SOURCES})
+add_library_clr(mdhotdata_crossgen STATIC ${MDHOTDATA_SOURCES})
diff --git a/src/md/hotdata/dac/CMakeLists.txt b/src/md/hotdata/dac/CMakeLists.txt
index 67b8408cf2..878db50d98 100644
--- a/src/md/hotdata/dac/CMakeLists.txt
+++ b/src/md/hotdata/dac/CMakeLists.txt
@@ -7,4 +7,4 @@ if (WIN32)
     list(APPEND MDHOTDATA_SOURCES ${MDHOTDATA_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdhotdata_dac ${MDHOTDATA_SOURCES})
+add_library_clr(mdhotdata_dac STATIC ${MDHOTDATA_SOURCES})
diff --git a/src/md/hotdata/full/CMakeLists.txt b/src/md/hotdata/full/CMakeLists.txt
index 1b97ff3db3..67cc799f81 100644
--- a/src/md/hotdata/full/CMakeLists.txt
+++ b/src/md/hotdata/full/CMakeLists.txt
@@ -4,4 +4,4 @@ if (WIN32)
     list(APPEND MDHOTDATA_SOURCES ${MDHOTDATA_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdhotdata_full ${MDHOTDATA_SOURCES})
+add_library_clr(mdhotdata_full STATIC ${MDHOTDATA_SOURCES})
diff --git a/src/md/runtime/CMakeLists.txt b/src/md/runtime/CMakeLists.txt
index 1111bdb0fe..fc817b1f0d 100644
--- a/src/md/runtime/CMakeLists.txt
+++ b/src/md/runtime/CMakeLists.txt
@@ -41,10 +41,6 @@ set(MDRUNTIME_HEADERS
 convert_to_absolute_path(MDRUNTIME_HEADERS ${MDRUNTIME_HEADERS})
 convert_to_absolute_path(MDRUNTIME_SOURCES ${MDRUNTIME_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(wks)
 add_subdirectory(dbi)
diff --git a/src/md/runtime/crossgen/CMakeLists.txt b/src/md/runtime/crossgen/CMakeLists.txt
index e778a8601e..4a17000f07 100644
--- a/src/md/runtime/crossgen/CMakeLists.txt
+++ b/src/md/runtime/crossgen/CMakeLists.txt
@@ -7,4 +7,4 @@ if (WIN32)
     list(APPEND MDRUNTIME_SOURCES ${MDRUNTIME_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntime_crossgen ${MDRUNTIME_SOURCES})
+add_library_clr(mdruntime_crossgen STATIC ${MDRUNTIME_SOURCES})
diff --git a/src/md/runtime/dac/CMakeLists.txt b/src/md/runtime/dac/CMakeLists.txt
index ba6d4f0de8..98bb65406d 100644
--- a/src/md/runtime/dac/CMakeLists.txt
+++ b/src/md/runtime/dac/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDRUNTIME_SOURCES ${MDRUNTIME_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntime_dac ${MDRUNTIME_SOURCES})
\ No newline at end of file
+add_library_clr(mdruntime_dac STATIC ${MDRUNTIME_SOURCES})
diff --git a/src/md/runtime/dbi/CMakeLists.txt b/src/md/runtime/dbi/CMakeLists.txt
index 4d2ebe4871..f44b3d5c6c 100644
--- a/src/md/runtime/dbi/CMakeLists.txt
+++ b/src/md/runtime/dbi/CMakeLists.txt
@@ -6,4 +6,4 @@ if (WIN32)
     list(APPEND MDRUNTIME_SOURCES ${MDRUNTIME_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntime-dbi ${MDRUNTIME_SOURCES})
+add_library_clr(mdruntime-dbi STATIC ${MDRUNTIME_SOURCES})
diff --git a/src/md/runtime/wks/CMakeLists.txt b/src/md/runtime/wks/CMakeLists.txt
index c8c52f59f2..8f243e4132 100644
--- a/src/md/runtime/wks/CMakeLists.txt
+++ b/src/md/runtime/wks/CMakeLists.txt
@@ -8,4 +8,4 @@ if (WIN32)
     list(APPEND MDRUNTIME_SOURCES ${MDRUNTIME_HEADERS})
 endif (WIN32)
 
-add_library_clr(mdruntime_wks ${MDRUNTIME_SOURCES})
+add_library_clr(mdruntime_wks STATIC ${MDRUNTIME_SOURCES})
diff --git a/src/md/winmd/CMakeLists.txt b/src/md/winmd/CMakeLists.txt
index 31dbbbfc4f..567a9758f1 100644
--- a/src/md/winmd/CMakeLists.txt
+++ b/src/md/winmd/CMakeLists.txt
@@ -20,10 +20,6 @@ set(MDWINMD_HEADERS
 convert_to_absolute_path(MDWINMD_HEADERS ${MDWINMD_HEADERS})
 convert_to_absolute_path(MDWINMD_SOURCES ${MDWINMD_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(wks)
 if(WIN32)
diff --git a/src/nativeresources/CMakeLists.txt b/src/nativeresources/CMakeLists.txt
index e73a0d2129..947a914389 100644
--- a/src/nativeresources/CMakeLists.txt
+++ b/src/nativeresources/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(nativeresourcestring)
 
-add_compile_options(-fPIC)
-
 add_library_clr(nativeresourcestring
   STATIC
   resourcestring.cpp
diff --git a/src/pal/inc/pal.h b/src/pal/inc/pal.h
index 43eb648a14..85d84553e2 100644
--- a/src/pal/inc/pal.h
+++ b/src/pal/inc/pal.h
@@ -4221,7 +4221,7 @@ PALIMPORT int    __cdecl memcmp(const void *, const void *, size_t);
 PALIMPORT void * __cdecl memset(void *, int, size_t);
 PALIMPORT void * __cdecl memmove(void *, const void *, size_t);
 PALIMPORT void * __cdecl memchr(const void *, int, size_t);
-PALIMPORT long long int __cdecl atoll(const char *) THROW_DECL;
+PALIMPORT long long int __cdecl atoll(const char *);
 PALIMPORT size_t __cdecl strlen(const char *);
 PALIMPORT int __cdecl strcmp(const char*, const char *);
 PALIMPORT int __cdecl strncmp(const char*, const char *, size_t);
diff --git a/src/pal/src/CMakeLists.txt b/src/pal/src/CMakeLists.txt
index 3e2cee898c..84a371ddf9 100644
--- a/src/pal/src/CMakeLists.txt
+++ b/src/pal/src/CMakeLists.txt
@@ -9,8 +9,6 @@ if(NOT DEFINED ENV{ROOTFS_DIR})
   include_directories(SYSTEM /usr/local/include)
 endif()
 
-add_compile_options(-fPIC)
-
 if(NOT CLR_CMAKE_USE_SYSTEM_LIBUNWIND)
   include_directories(libunwind/include)
   include_directories(libunwind/include/tdep)
diff --git a/src/pal/src/eventprovider/lttngprovider/CMakeLists.txt b/src/pal/src/eventprovider/lttngprovider/CMakeLists.txt
index b5bf8e8551..1f49aef64e 100644
--- a/src/pal/src/eventprovider/lttngprovider/CMakeLists.txt
+++ b/src/pal/src/eventprovider/lttngprovider/CMakeLists.txt
@@ -46,8 +46,6 @@ add_library(eventprovider
     eventproviderhelpers.cpp
 )
 
-add_compile_options(-fPIC)
-
 add_library(coreclrtraceptprovider
     SHARED
     ${TRACEPOINT_PROVIDER_SOURCES}
diff --git a/src/pal/src/include/pal/context.h b/src/pal/src/include/pal/context.h
index 1f7c7517b6..a8bdb961e8 100644
--- a/src/pal/src/include/pal/context.h
+++ b/src/pal/src/include/pal/context.h
@@ -204,7 +204,7 @@ inline bool FPREG_HasYmmRegisters(const ucontext_t *uc)
         return false;
     }
 
-    return (FPREG_FpxSwBytes(uc)->xstate_bv & XSTATE_YMM) != 0;
+    return (FPREG_FpxSwBytes(uc)->xfeatures & XSTATE_YMM) != 0;
 }
 
 inline void *FPREG_Xstate_Ymmh(const ucontext_t *uc)
diff --git a/src/pal/src/libunwind/src/CMakeLists.txt b/src/pal/src/libunwind/src/CMakeLists.txt
index 93b4daf3a6..5a63e5c524 100644
--- a/src/pal/src/libunwind/src/CMakeLists.txt
+++ b/src/pal/src/libunwind/src/CMakeLists.txt
@@ -21,6 +21,7 @@ add_definitions("-Ddwarf_search_unwind_table_int=UNW_OBJ(dwarf_search_unwind_tab
 
 # Disable warning due to incorrect format specifier in debugging printf via the Debug macro
 add_compile_options(-Wno-format)
+add_compile_options(-fcommon)
 
 if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wno-header-guard)
diff --git a/src/pal/tests/palsuite/exception_handling/pal_sxs/test1/CMakeLists.txt b/src/pal/tests/palsuite/exception_handling/pal_sxs/test1/CMakeLists.txt
index 4a3abc2d64..685ac2ed4f 100644
--- a/src/pal/tests/palsuite/exception_handling/pal_sxs/test1/CMakeLists.txt
+++ b/src/pal/tests/palsuite/exception_handling/pal_sxs/test1/CMakeLists.txt
@@ -3,7 +3,6 @@ cmake_minimum_required(VERSION 2.8.12.2)
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
     add_definitions(-DFEATURE_ENABLE_HARDWARE_EXCEPTIONS)
 endif(CLR_CMAKE_PLATFORM_UNIX)
 
diff --git a/src/palrt/CMakeLists.txt b/src/palrt/CMakeLists.txt
index d9f7b94d70..77fdc67a52 100644
--- a/src/palrt/CMakeLists.txt
+++ b/src/palrt/CMakeLists.txt
@@ -12,8 +12,6 @@ set(PALRT_SOURCES
     variant.cpp
 )
 
-add_compile_options(-fPIC)
-
 add_library_clr(palrt
     STATIC
     ${PALRT_SOURCES}
diff --git a/src/strongname/api/CMakeLists.txt b/src/strongname/api/CMakeLists.txt
index 4efcdb953c..6e596d8ea9 100644
--- a/src/strongname/api/CMakeLists.txt
+++ b/src/strongname/api/CMakeLists.txt
@@ -17,10 +17,6 @@ set(STRONGNAME_SOURCES
 
 convert_to_absolute_path(STRONGNAME_SOURCES ${STRONGNAME_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(wks)
 add_subdirectory(crossgen)
diff --git a/src/strongname/api/crossgen/CMakeLists.txt b/src/strongname/api/crossgen/CMakeLists.txt
index 5632c0321b..4dae4ee8f0 100644
--- a/src/strongname/api/crossgen/CMakeLists.txt
+++ b/src/strongname/api/crossgen/CMakeLists.txt
@@ -1,4 +1,4 @@
 include(${CLR_DIR}/crossgen.cmake)
 
-add_library_clr(strongname_crossgen ${STRONGNAME_SOURCES})
+add_library_clr(strongname_crossgen STATIC ${STRONGNAME_SOURCES})
 add_dependencies(strongname_crossgen eventing_headers)
diff --git a/src/strongname/api/dac/CMakeLists.txt b/src/strongname/api/dac/CMakeLists.txt
index ee4fc2fb51..f4d82e166b 100644
--- a/src/strongname/api/dac/CMakeLists.txt
+++ b/src/strongname/api/dac/CMakeLists.txt
@@ -1,5 +1,5 @@
 
 include(${CLR_DIR}/dac.cmake)
 
-add_library_clr(strongname_dac ${STRONGNAME_SOURCES})
+add_library_clr(strongname_dac STATIC ${STRONGNAME_SOURCES})
 add_dependencies(strongname_dac eventing_headers)
diff --git a/src/strongname/api/wks/CMakeLists.txt b/src/strongname/api/wks/CMakeLists.txt
index fcd6f8af07..5adac9ac74 100644
--- a/src/strongname/api/wks/CMakeLists.txt
+++ b/src/strongname/api/wks/CMakeLists.txt
@@ -1,2 +1,2 @@
-add_library_clr(strongname_wks ${STRONGNAME_SOURCES})
+add_library_clr(strongname_wks STATIC ${STRONGNAME_SOURCES})
 add_dependencies(strongname_wks eventing_headers)
diff --git a/src/tools/crossgen/CMakeLists.txt b/src/tools/crossgen/CMakeLists.txt
index 410f82d929..ab5b4eda53 100644
--- a/src/tools/crossgen/CMakeLists.txt
+++ b/src/tools/crossgen/CMakeLists.txt
@@ -14,7 +14,6 @@ if(WIN32)
 endif()
 
 if(CLR_CMAKE_PLATFORM_UNIX)
-  add_compile_options(-fPIE)
   add_definitions(-DNO_NGENPDB)
 endif(CLR_CMAKE_PLATFORM_UNIX)
 
diff --git a/src/tools/metainfo/mdinfo.cpp b/src/tools/metainfo/mdinfo.cpp
index 5458a76d28..a716189b8d 100644
--- a/src/tools/metainfo/mdinfo.cpp
+++ b/src/tools/metainfo/mdinfo.cpp
@@ -1948,11 +1948,11 @@ void MDInfo::DisplayCustomAttributeInfo(mdCustomAttribute inValue, const char *p
         VWrite(" :: %S", qSigName.Ptr());
 
     // Keep track of coff overhead.
-        if (!wcscmp(W("__DecoratedName"), rcName))
-        {
-            bCoffSymbol = true;
-            g_cbCoffNames += cbValue + 6;
-        }
+    if (!wcscmp(W("__DecoratedName"), rcName))
+    {
+        bCoffSymbol = true;
+        g_cbCoffNames += cbValue + 6;
+    }
     WriteLine("");
 
     VWriteLine("%s\tLength: %ld", preFix, cbValue);
diff --git a/src/unwinder/CMakeLists.txt b/src/unwinder/CMakeLists.txt
index 5cd7bae337..9a5d7829c8 100644
--- a/src/unwinder/CMakeLists.txt
+++ b/src/unwinder/CMakeLists.txt
@@ -19,10 +19,6 @@ list(APPEND UNWINDER_SOURCES
 
 convert_to_absolute_path(UNWINDER_SOURCES ${UNWINDER_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 if(CLR_CMAKE_PLATFORM_UNIX)    
     add_subdirectory(wks)
 endif(CLR_CMAKE_PLATFORM_UNIX)
diff --git a/src/unwinder/dac/CMakeLists.txt b/src/unwinder/dac/CMakeLists.txt
index 7a670e815f..e3030348ac 100644
--- a/src/unwinder/dac/CMakeLists.txt
+++ b/src/unwinder/dac/CMakeLists.txt
@@ -2,5 +2,5 @@ include(${CLR_DIR}/dac.cmake)
 
 add_definitions(-DFEATURE_NO_HOST)
 
-add_library_clr(unwinder_dac ${UNWINDER_SOURCES})
+add_library_clr(unwinder_dac STATIC ${UNWINDER_SOURCES})
 add_dependencies(unwinder_dac eventing_headers)
diff --git a/src/unwinder/wks/CMakeLists.txt b/src/unwinder/wks/CMakeLists.txt
index b23cb79648..4f612dbda8 100644
--- a/src/unwinder/wks/CMakeLists.txt
+++ b/src/unwinder/wks/CMakeLists.txt
@@ -1,2 +1,2 @@
-add_library_clr(unwinder_wks ${UNWINDER_SOURCES})
+add_library_clr(unwinder_wks STATIC ${UNWINDER_SOURCES})
 add_dependencies(unwinder_wks eventing_headers)
diff --git a/src/utilcode/CMakeLists.txt b/src/utilcode/CMakeLists.txt
index 4e5f73faf1..785d1d7e92 100644
--- a/src/utilcode/CMakeLists.txt
+++ b/src/utilcode/CMakeLists.txt
@@ -108,10 +108,6 @@ convert_to_absolute_path(UTILCODE_DAC_SOURCES ${UTILCODE_DAC_SOURCES})
 convert_to_absolute_path(UTILCODE_CROSSGEN_SOURCES ${UTILCODE_CROSSGEN_SOURCES})
 convert_to_absolute_path(UTILCODE_STATICNOHOST_SOURCES ${UTILCODE_STATICNOHOST_SOURCES})
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 add_subdirectory(dac)
 add_subdirectory(dyncrt)
 add_subdirectory(staticnohost)
diff --git a/src/vm/CMakeLists.txt b/src/vm/CMakeLists.txt
index 3a556aff2f..bdf1f237de 100644
--- a/src/vm/CMakeLists.txt
+++ b/src/vm/CMakeLists.txt
@@ -21,10 +21,6 @@ else()
   endif(UPPERCASE_CMAKE_BUILD_TYPE STREQUAL DEBUG OR UPPERCASE_CMAKE_BUILD_TYPE STREQUAL CHECKED)
 endif(CMAKE_CONFIGURATION_TYPES)
 
-if(CLR_CMAKE_PLATFORM_UNIX)
-    add_compile_options(-fPIC)
-endif(CLR_CMAKE_PLATFORM_UNIX)
-
 if(FEATURE_GDBJIT)
     set(VM_SOURCES_GDBJIT
         gdbjit.cpp
diff --git a/src/vm/crossgen/CMakeLists.txt b/src/vm/crossgen/CMakeLists.txt
index ab22869a26..0bfd8a2ae6 100644
--- a/src/vm/crossgen/CMakeLists.txt
+++ b/src/vm/crossgen/CMakeLists.txt
@@ -266,5 +266,5 @@ if (CLR_CMAKE_PLATFORM_LINUX)
   )
 endif (CLR_CMAKE_PLATFORM_LINUX)
 
-add_library_clr(cee_crossgen ${VM_CROSSGEN_SOURCES})
+add_library_clr(cee_crossgen STATIC ${VM_CROSSGEN_SOURCES})
 add_dependencies(cee_crossgen eventing_headers)
diff --git a/src/vm/crossgen_mscorlib/CMakeLists.txt b/src/vm/crossgen_mscorlib/CMakeLists.txt
index b79a08ff9a..1ea1bd4ad8 100644
--- a/src/vm/crossgen_mscorlib/CMakeLists.txt
+++ b/src/vm/crossgen_mscorlib/CMakeLists.txt
@@ -10,5 +10,5 @@ add_definitions(
 
 add_definitions(-DCROSSGEN_MSCORLIB)
 
-add_library_clr(mscorlib_crossgen ../mscorlib.cpp)
+add_library_clr(mscorlib_crossgen STATIC ../mscorlib.cpp)
 add_dependencies(cee_crossgen eventing_headers)
diff --git a/src/vm/dac/CMakeLists.txt b/src/vm/dac/CMakeLists.txt
index f001f2ec51..e267bf5740 100644
--- a/src/vm/dac/CMakeLists.txt
+++ b/src/vm/dac/CMakeLists.txt
@@ -2,5 +2,5 @@
 include(${CLR_DIR}/dac.cmake)
 
 add_precompiled_header(common.h ../common.cpp VM_SOURCES_DAC)
-add_library_clr(cee_dac ${VM_SOURCES_DAC})
+add_library_clr(cee_dac STATIC ${VM_SOURCES_DAC})
 add_dependencies(cee_dac eventing_headers)
diff --git a/src/vm/object.inl b/src/vm/object.inl
index 64cf9ed4dd..ff60a7808a 100644
--- a/src/vm/object.inl
+++ b/src/vm/object.inl
@@ -293,7 +293,7 @@ __forceinline BOOL Nullable::IsNullableForType(TypeHandle type, MethodTable* par
         return FALSE;
     if (!type.AsMethodTable()->HasInstantiation())            // shortcut, if it is not generic it can't be Nullable<T>
         return FALSE;
-	return Nullable::IsNullableForTypeHelper(type.AsMethodTable(), paramMT);
+    return Nullable::IsNullableForTypeHelper(type.AsMethodTable(), paramMT);
 }
 
 //===============================================================================
@@ -305,7 +305,7 @@ __forceinline BOOL Nullable::IsNullableForTypeNoGC(TypeHandle type, MethodTable*
         return FALSE;
     if (!type.AsMethodTable()->HasInstantiation())            // shortcut, if it is not generic it can't be Nullable<T>
         return FALSE;
-	return Nullable::IsNullableForTypeHelperNoGC(type.AsMethodTable(), paramMT);
+    return Nullable::IsNullableForTypeHelperNoGC(type.AsMethodTable(), paramMT);
 }
 
 //===============================================================================
diff --git a/src/vm/wks/CMakeLists.txt b/src/vm/wks/CMakeLists.txt
index db33f4b490..d7be184b22 100644
--- a/src/vm/wks/CMakeLists.txt
+++ b/src/vm/wks/CMakeLists.txt
@@ -45,7 +45,7 @@ if (WIN32)
 
 endif (WIN32)
 
-add_library_clr(cee_wks ${VM_SOURCES_WKS} ${VM_SOURCES_WKS_ARCH_ASM})
+add_library_clr(cee_wks STATIC ${VM_SOURCES_WKS} ${VM_SOURCES_WKS_ARCH_ASM})
 add_dependencies(cee_wks eventing_headers)
 
 if (WIN32)
