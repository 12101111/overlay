diff --git a/src/basic/user-util.c b/src/basic/user-util.c
index 63bef51..4bc96a1 100644
--- a/src/basic/user-util.c
+++ b/src/basic/user-util.c
@@ -1013,7 +1013,7 @@ int fgetpwent_sane(FILE *stream, struct passwd **pw) {
 
         errno = 0;
         p = fgetpwent(stream);
-        if (!p && errno != ENOENT)
+        if (!p && errno > 0 && errno != ENOENT)
                 return errno_or_else(EIO);
 
         *pw = p;
@@ -1028,7 +1028,7 @@ int fgetspent_sane(FILE *stream, struct spwd **sp) {
 
         errno = 0;
         s = fgetspent(stream);
-        if (!s && errno != ENOENT)
+        if (!s && errno > 0 && errno != ENOENT)
                 return errno_or_else(EIO);
 
         *sp = s;
@@ -1043,7 +1043,7 @@ int fgetgrent_sane(FILE *stream, struct group **gr) {
 
         errno = 0;
         g = fgetgrent(stream);
-        if (!g && errno != ENOENT)
+        if (!g && errno > 0 && errno != ENOENT)
                 return errno_or_else(EIO);
 
         *gr = g;
diff --git a/src/resolve/test-resolved-stream.c b/src/resolve/test-resolved-stream.c
index f12c729..c0d964c 100644
--- a/src/resolve/test-resolved-stream.c
+++ b/src/resolve/test-resolved-stream.c
@@ -109,7 +109,7 @@ static void *tcp_dns_server(void *p) {
 
         assert_se((bindfd = socket(AF_INET, SOCK_STREAM | SOCK_CLOEXEC, 0)) >= 0);
         assert_se(setsockopt(bindfd, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int)) >= 0);
-        assert_se(bind(bindfd, &SERVER_ADDRESS, sizeof(SERVER_ADDRESS)) >= 0);
+        assert_se(bind(bindfd, (struct sockaddr*) &SERVER_ADDRESS, sizeof(SERVER_ADDRESS)) >= 0);
         assert_se(listen(bindfd, 1) >= 0);
         assert_se((acceptfd = accept(bindfd, NULL, NULL)) >= 0);
         server_handle(acceptfd);
@@ -248,7 +248,7 @@ static void test_dns_stream(bool tls) {
         assert_se((clientfd = socket(AF_INET, SOCK_STREAM | SOCK_CLOEXEC, 0)) >= 0);
 
         for (int i = 0; i < 100; i++) {
-                r = connect(clientfd, &SERVER_ADDRESS, sizeof(SERVER_ADDRESS));
+                r = connect(clientfd, (struct sockaddr *) &SERVER_ADDRESS, sizeof(SERVER_ADDRESS));
                 if (r >= 0)
                         break;
                 usleep(EVENT_TIMEOUT_USEC / 100);
