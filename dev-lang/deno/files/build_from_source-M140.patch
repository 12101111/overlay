diff --git a/build.rs b/build.rs
index 7fefe10..3d5d8a4 100644
--- a/build.rs
+++ b/build.rs
@@ -118,6 +118,7 @@ fn main() {
     return;
   }
 
+  panic!("Won't download library");
   print_prebuilt_src_binding_path();
 
   download_static_lib_binaries();
@@ -184,10 +185,11 @@ fn build_v8(is_asan: bool) {
   }
 
   if need_gn_ninja_download() {
+    panic!("gn and ninja must be installed");
     download_ninja_gn_binaries();
   }
 
-  download_rust_toolchain();
+  // download_rust_toolchain();
 
   // `#[cfg(...)]` attributes don't work as expected from build.rs -- they refer to the configuration
   // of the host system which the build.rs script will be running on. In short, `cfg!(target_<os/arch>)`
@@ -223,7 +225,8 @@ fn build_v8(is_asan: bool) {
     gn_args.push("host_cpu=\"arm64\"".to_string());
   }
 
-  if env::var_os("DISABLE_CLANG").is_some() {
+  if true {
+  } else if env::var_os("DISABLE_CLANG").is_some() {
     gn_args.push("is_clang=false".into());
     // -gline-tables-only is Clang-only
     gn_args.push("line_tables_only=false".into());
@@ -232,7 +235,7 @@ fn build_v8(is_asan: bool) {
     gn_args.push(format!("clang_base_path={clang_base_path:?}"));
     gn_args.push("treat_warnings_as_errors=false".to_string());
   } else {
-    println!("using Chromium's clang");
+    panic!("Can't use Chromium's clang");
     let clang_base_path = clang_download();
     gn_args.push(format!("clang_base_path={clang_base_path:?}"));
 
@@ -241,7 +244,8 @@ fn build_v8(is_asan: bool) {
     }
   }
 
-  if let Some(p) = env::var_os("SCCACHE") {
+  if true {
+  } else if let Some(p) = env::var_os("SCCACHE") {
     cc_wrapper(&mut gn_args, Path::new(&p));
   } else if let Ok(p) = which("sccache") {
     cc_wrapper(&mut gn_args, &p);
@@ -261,21 +265,24 @@ fn build_v8(is_asan: bool) {
   // cross-compilation setup
   if target_arch == "aarch64" {
     gn_args.push(r#"target_cpu="arm64""#.to_string());
-    gn_args.push("use_sysroot=true".to_string());
-    maybe_install_sysroot("arm64");
-    maybe_install_sysroot("amd64");
+    //gn_args.push("use_sysroot=true".to_string());
+    //maybe_install_sysroot("arm64");
+    //maybe_install_sysroot("amd64");
   }
-  if target_arch == "arm" {
+  if false && target_arch == "arm" {
     gn_args.push(r#"target_cpu="arm""#.to_string());
     gn_args.push(r#"v8_target_cpu="arm""#.to_string());
-    gn_args.push("use_sysroot=true".to_string());
-    maybe_install_sysroot("i386");
-    maybe_install_sysroot("arm");
+    //gn_args.push("use_sysroot=true".to_string());
+    //maybe_install_sysroot("i386");
+    //maybe_install_sysroot("arm");
   }
 
   let target_triple = env::var("TARGET").unwrap();
   // check if the target triple describes a non-native environment
-  if target_triple != env::var("HOST").unwrap() && target_os == "android" {
+  if false
+    && target_triple != env::var("HOST").unwrap()
+    && target_os == "android"
+  {
     let arch = if target_arch == "x86_64" {
       "x64"
     } else if target_arch == "aarch64" {
@@ -935,6 +942,7 @@ type NinjaEnv = Vec<(String, String)>;
 fn ninja(gn_out_dir: &Path, maybe_env: Option<NinjaEnv>) -> Command {
   let cmd_string = env::var("NINJA").unwrap_or_else(|_| "ninja".to_owned());
   let mut cmd = Command::new(&cmd_string);
+  cmd.arg("-v");
   cmd.arg("-C");
   cmd.arg(gn_out_dir);
   if !cmd_string.ends_with("autoninja") {
@@ -974,6 +982,7 @@ fn run_gn_gen(gn_args: &[String]) -> PathBuf {
       .arg(format!("--script-executable={}", python()))
       .arg("gen")
       .arg(&gn_out_dir)
+      .arg("-vv")
       .arg("--ide=json")
       .arg("--args=".to_owned() + &args)
       .stdout(Stdio::inherit())
