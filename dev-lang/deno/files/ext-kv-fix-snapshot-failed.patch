diff --git a/ext/kv/01_db.ts b/ext/kv/01_db.ts
index 16099c225..020856973 100644
--- a/ext/kv/01_db.ts
+++ b/ext/kv/01_db.ts
@@ -278,27 +278,6 @@ class AtomicOperation {
   }
 }
 
-const MIN_U64 = 0n;
-const MAX_U64 = 0xffffffffffffffffn;
-
-class KvU64 {
-  readonly value: bigint;
-
-  constructor(value: bigint) {
-    if (typeof value !== "bigint") {
-      throw new TypeError("value must be a bigint");
-    }
-    if (value < MIN_U64) {
-      throw new RangeError("value must be a positive bigint");
-    }
-    if (value > MAX_U64) {
-      throw new RangeError("value must be a 64-bit unsigned integer");
-    }
-    this.value = value;
-    Object.freeze(this);
-  }
-}
-
 function deserializeValue(entry: RawKvEntry): Deno.KvEntry<unknown> {
   const { kind, value } = entry.value;
   switch (kind) {
@@ -312,11 +291,6 @@ function deserializeValue(entry: RawKvEntry): Deno.KvEntry<unknown> {
         ...entry,
         value,
       };
-    case "u64":
-      return {
-        ...entry,
-        value: new KvU64(value),
-      };
     default:
       throw new TypeError("Invalid value type");
   }
@@ -328,11 +302,6 @@ function serializeValue(value: unknown): RawValue {
       kind: "bytes",
       value,
     };
-  } else if (value instanceof KvU64) {
-    return {
-      kind: "u64",
-      value: value.value,
-    };
   } else {
     return {
       kind: "v8",
@@ -493,4 +462,4 @@ class KvListIterator extends AsyncIterator
   }
 }
 
-export { Kv, KvListIterator, KvU64, openKv };
+export { Kv, KvListIterator, openKv };
diff --git a/runtime/js/90_deno_ns.js b/runtime/js/90_deno_ns.js
index bb6ba3b08..c3bd841c8 100644
--- a/runtime/js/90_deno_ns.js
+++ b/runtime/js/90_deno_ns.js
@@ -174,7 +174,6 @@ const denoNsUnstable = {
   serve: http.serve,
   openKv: kv.openKv,
   Kv: kv.Kv,
-  KvU64: kv.KvU64,
   KvListIterator: kv.KvListIterator,
 };
 
