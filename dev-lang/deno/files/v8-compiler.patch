diff --git a/config/clang/BUILD.gn b/config/clang/BUILD.gn
index a1e635c..b9ad202 100644
--- a/config/clang/BUILD.gn
+++ b/config/clang/BUILD.gn
@@ -176,7 +176,7 @@ template("clang_lib") {
       _suffix = ""
       _ext = "a"
 
-      _clang_lib_dir = "$clang_base_path/lib/clang/$clang_version/lib"
+      _clang_lib_dir = "$clang_resource_path/lib/"
       if (is_win) {
         _dir = "windows"
         _prefix = ""
@@ -207,16 +207,17 @@ template("clang_lib") {
           assert(false)  # Unhandled cpu type
         }
       } else if (is_linux || is_chromeos) {
+        _dir = "linux"
         if (current_cpu == "x64") {
-          _dir = "x86_64-unknown-linux-gnu"
+          _suffix = "-x86_64"
         } else if (current_cpu == "x86") {
           _dir = "i386-unknown-linux-gnu"
         } else if (current_cpu == "arm") {
           _dir = "armv7-unknown-linux-gnueabihf"
         } else if (current_cpu == "arm64") {
-          _dir = "aarch64-unknown-linux-gnu"
+          _suffix = "-aarch64"
         } else if (current_cpu == "loong64") {
-          _dir = "loongarch64-unknown-linux-gnu"
+          _suffix = "-loongarch64"
         } else if (current_cpu == "riscv64") {
           _dir = "riscv64-unknown-linux-gnu"
         } else if (current_cpu == "ppc64") {
diff --git a/config/clang/clang.gni b/config/clang/clang.gni
index 95812df..83a4117 100644
--- a/config/clang/clang.gni
+++ b/config/clang/clang.gni
@@ -33,6 +33,7 @@ declare_args() {
        is_mac || is_ios || is_chromeos)
 
   clang_base_path = default_clang_base_path
+  clang_resource_path = default_clang_base_path
 
   # Specifies whether or not bitcode should be embedded during compilation.
   # This is used for creating a MLGO corpus from Chromium in the non-ThinLTO case.
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 1847f1a..2fb3e18 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -354,9 +354,6 @@ config("compiler") {
 
   configs += [
     # See the definitions below.
-    ":clang_revision",
-    ":rustc_revision",
-    ":compiler_cpu_abi",
     ":compiler_codegen",
     ":compiler_deterministic",
     ":clang_warning_suppression",
@@ -652,14 +649,6 @@ config("compiler") {
   }
 
   if (is_clang) {
-    cflags += [ "-fcrash-diagnostics-dir=" + clang_diagnostic_dir ]
-    if (save_reproducers_on_lld_crash && use_lld) {
-      ldflags += [
-        "-fcrash-diagnostics=all",
-        "-fcrash-diagnostics-dir=" + clang_diagnostic_dir,
-      ]
-    }
-
     # TODO(hans): Remove this once Clang generates better optimized debug info
     # by default. https://crbug.com/765793
     cflags += [
@@ -825,7 +814,7 @@ config("compiler") {
 
     cflags += [
       "-flto=thin",
-      "-fsplit-lto-unit",
+      "-fno-split-lto-unit",
     ]
 
     if (thin_lto_enable_cache) {
@@ -924,14 +913,12 @@ config("compiler") {
     # TODO(crbug.com/40182783): investigate why this isn't effective on
     # arm32.
     if (!is_android || current_cpu == "arm64") {
-      cflags += [ "-fwhole-program-vtables" ]
 
       if (toolchain_supports_rust_thin_lto) {
         # whole-program-vtables implies -fsplit-lto-unit, and Rust needs to match
         # behaviour. Rust needs to know the linker will be doing LTO in this case
         # or it rejects the Zsplit-lto-unit flag.
         rustflags += [
-          "-Zsplit-lto-unit",
           "-Clinker-plugin-lto=yes",
         ]
       } else {
@@ -939,9 +926,6 @@ config("compiler") {
         rustflags += [ "-Cembed-bitcode=no" ]
       }
 
-      if (!is_win) {
-        ldflags += [ "-fwhole-program-vtables" ]
-      }
     }
 
     # This flag causes LTO to create an .ARM.attributes section with the correct
@@ -1123,20 +1107,6 @@ config("compiler") {
     # `-nodefaultlibs` from the linker invocation from Rust, which would be used
     # to compile dylibs on Android, such as for constructing unit test APKs.
     "-Cdefault-linker-libraries",
-
-    # To make Rust .d files compatible with ninja
-    "-Zdep-info-omit-d-target",
-
-    # If a macro panics during compilation, show which macro and where it is
-    # defined.
-    "-Zmacro-backtrace",
-
-    # For deterministic builds, keep the local machine's current working
-    # directory from appearing in build outputs.
-    "-Zremap-cwd-prefix=.",
-
-    # We use clang-rt sanitizer runtimes.
-    "-Zexternal-clangrt",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1661,43 +1631,6 @@ config("compiler_deterministic") {
     }
   }
 
-  # Makes builds independent of absolute file path.
-  if (is_clang && strip_absolute_paths_from_debug_symbols) {
-    # If debug option is given, clang includes $cwd in debug info by default.
-    # For such build, this flag generates reproducible obj files even we use
-    # different build directory like "out/feature_a" and "out/feature_b" if
-    # we build same files with same compile flag.
-    # Other paths are already given in relative, no need to normalize them.
-
-    # -ffile-compilation-dir is an alias for both -fdebug-compilation-dir=
-    # and -fcoverage-compilation-dir=.
-    cflags += [ "-ffile-compilation-dir=." ]
-
-    # Convert absolute paths to relative paths. Expands to, for example:
-    #   -file-prefix-map /path/to/chromium/src=../..
-    swiftflags += [
-      "-file-prefix-map",
-      rebase_path("//.", "") + "=" + rebase_path("//.", root_build_dir),
-    ]
-    if (!is_win) {
-      # We don't use clang -cc1as on Windows (yet? https://crbug.com/762167)
-      asmflags = [ "-Wa,-fdebug-compilation-dir,." ]
-    }
-
-    if (is_win && use_lld) {
-      if (symbol_level == 2 || (is_clang && using_sanitizer)) {
-        # Absolutize source file paths for PDB. Pass the real build directory
-        # if the pdb contains source-level debug information and if linker
-        # reproducibility is not critical.
-        ldflags += [ "/PDBSourcePath:" + rebase_path(root_build_dir) ]
-      } else {
-        # Use a fake fixed base directory for paths in the pdb to make the pdb
-        # output fully deterministic and independent of the build directory.
-        ldflags += [ "/PDBSourcePath:o:\fake\prefix" ]
-      }
-    }
-  }
-
   # Tells the compiler not to use absolute paths when passing the default
   # paths to the tools it invokes. We don't want this because we don't
   # really need it and it can mess up the RBE cache entries.
@@ -1724,87 +1657,6 @@ config("compiler_deterministic") {
   }
 }
 
-config("clang_revision") {
-  if (is_clang && clang_base_path == default_clang_base_path &&
-      current_os != "zos") {
-    _perform_consistency_checks = current_toolchain == default_toolchain
-    if (llvm_force_head_revision) {
-      _head_revision_stamp_path = "//third_party/llvm-build/force_head_revision"
-      _head_revision = ""
-      if (path_exists(_head_revision_stamp_path)) {
-        _head_revision = read_file(_head_revision_stamp_path, "trim string")
-      }
-      assert(
-          _head_revision != "",
-          "llvm_force_head_revision=true, but no locally built version was detected.")
-      _clang_revision = _head_revision
-    } else {
-      _clang_revision = read_file(
-              "//third_party/llvm-build/Release+Asserts/cr_build_revision",
-              "trim string")
-
-      # Ensure that the synced clang version matches what's in git.
-      if (_perform_consistency_checks) {
-        # Parse the clang version from the Python script.
-        _clang_version_lines = filter_include(
-                read_file("//tools/clang/scripts/update.py", "list lines"),
-                [ "CLANG_*REVISION = *" ])
-        _py_revision =
-            string_replace(_clang_version_lines[0], "CLANG_REVISION = '", "")
-        _py_revision = string_replace(_py_revision, "'", "")
-        _py_subrevision =
-            string_replace(_clang_version_lines[1], "CLANG_SUB_REVISION = ", "")
-        _expected_clang_revision = "$_py_revision-$_py_subrevision"
-
-        # TODO(agrieve): Change filter_include to _clang_revision ==
-        # _expected_clang_revision once angle & webrtc use a GCS DEPS entry
-        # rather than a update.py runhook.
-        assert(
-            filter_include([ _clang_revision ],
-                           [
-                             _expected_clang_revision,
-                             "$_expected_clang_revision,*",
-                           ]) != [],
-            "clang_revision=\"$_clang_revision\" but update.py expected \"$_expected_clang_revision\". Did you forget to gclient sync?")
-      }
-    }
-
-    if (_perform_consistency_checks) {
-      # Ensure that the revision matches the version major expected by GN.
-      _versions_match = filter_include([ _clang_revision ],
-                                       [ "llvmorg-$clang_version-*" ]) != []
-      assert(
-          _versions_match,
-          "clang_revision=\"$_clang_revision\" but clang_version=\"$clang_version\". clang_version in build/toolchain/toolchain.gni is likely outdated.")
-    }
-
-    if (toolchain_has_rust && _perform_consistency_checks) {
-      # Ensure that the synced rust version matches what's in git.
-      _rust_revision_lines =
-          filter_include(read_file("//tools/rust/update_rust.py", "list lines"),
-                         [ "RUST_*REVISION = *" ])
-      _py_revision =
-          string_replace(_rust_revision_lines[0], "RUST_REVISION = '", "")
-      _py_revision = string_replace(_py_revision, "'", "")
-      _py_subrevision =
-          string_replace(_rust_revision_lines[1], "RUST_SUB_REVISION = ", "")
-      _expected_rust_revision = "$_py_revision-$_py_subrevision"
-
-      # Ensure the rust version matches the clang version.
-      assert(
-          filter_include([ rustc_revision ],
-                         [ "*-$_expected_rust_revision-*" ]) != [],
-          "rustc_revision=\"$rustc_revision\" but update_rust.py expected \"$_expected_rust_revision\". Run \"gclient sync\"?")
-    }
-
-    # This is here so that all files get recompiled after a clang roll and
-    # when turning clang on or off. (defines are passed via the command line,
-    # and build system rebuild things when their commandline changes). Nothing
-    # should ever read this define.
-    defines = [ "CR_CLANG_REVISION=\"$_clang_revision\"" ]
-  }
-}
-
 # Controls the usage of a warning suppression mapping (WSM) file to suppress
 # warnings based on the path of the file they come from. It's controlled by the
 # `clang_warning_suppression_file` gn argument , which points to a text file
@@ -1848,18 +1700,6 @@ config("sanitize_c_array_bounds") {
   }
 }
 
-config("rustc_revision") {
-  if (rustc_revision != "") {
-    # Similar to the above config, this is here so that all files get recompiled
-    # after a rustc roll. Nothing should ever read this cfg. This will not be
-    # set if a custom toolchain is used.
-    rustflags = [
-      "--cfg",
-      "cr_rustc_revision=\"$rustc_revision\"",
-    ]
-  }
-}
-
 config("compiler_arm_fpu") {
   if (current_cpu == "arm" && !is_ios) {
     cflags = [ "-mfpu=$arm_fpu" ]
@@ -2302,11 +2142,7 @@ config("chromium_code") {
       defines = [ "_HAS_NODISCARD" ]
     }
   } else {
-    cflags = [ "-Wall" ]
-    if (is_clang) {
-      # Enable extra warnings for chromium_code when we control the compiler.
-      cflags += [ "-Wextra" ]
-    }
+    cflags = []
 
     # In Chromium code, we define __STDC_foo_MACROS in order to get the
     # C99 macros on Mac and Linux.
@@ -2315,24 +2151,6 @@ config("chromium_code") {
       "__STDC_FORMAT_MACROS",
     ]
 
-    if (!is_debug && !using_sanitizer && current_cpu != "s390x" &&
-        current_cpu != "s390" && current_cpu != "ppc64" &&
-        current_cpu != "mips" && current_cpu != "mips64" &&
-        current_cpu != "riscv64" && current_cpu != "loong64") {
-      # Non-chromium code is not guaranteed to compile cleanly with
-      # _FORTIFY_SOURCE. Also, fortified build may fail when optimizations are
-      # disabled, so only do that for Release build.
-      fortify_level = "2"
-
-      # ChromeOS's toolchain supports a high-quality _FORTIFY_SOURCE=3
-      # implementation with a few custom glibc patches. Use that if it's
-      # available.
-      if (is_chromeos_device && !lacros_use_chromium_toolchain) {
-        fortify_level = "3"
-      }
-      defines += [ "_FORTIFY_SOURCE=" + fortify_level ]
-    }
-
     if (is_apple) {
       cflags_objc = [ "-Wimplicit-retain-self" ]
       cflags_objcc = [ "-Wimplicit-retain-self" ]
@@ -2748,7 +2566,8 @@ config("default_stack_frames") {
 # [0]: https://pinpoint-dot-chromeperf.appspot.com/job/147634a8be0000
 # [1]: https://pinpoint-dot-chromeperf.appspot.com/job/132bc772be0000
 # [2]: https://crrev.com/c/5447532
-config("optimize") {
+config("optimize") { }
+config("xoptimize") {
   if (is_win) {
     # clang-cl's /O2 corresponds to clang's -O3, and really want -O2 for
     # consistency with the other platforms.
@@ -2797,7 +2616,8 @@ config("optimize") {
 }
 
 # Turn off optimizations.
-config("no_optimize") {
+config("no_optimize") { }
+config("xno_optimize") {
   if (is_win) {
     cflags = [
       "/Od",  # Disable optimization.
@@ -2829,10 +2649,11 @@ config("no_optimize") {
   }
 }
 
+config("optimize_max") { }
 # Turns up the optimization level. Used to explicitly enable -O2 instead of
 # -Os for select targets on platforms that use optimize_for_size. No-op
 # elsewhere.
-config("optimize_max") {
+config("xoptimize_max") {
   ldflags = common_optimize_on_ldflags
   if (is_win) {
     # Favor speed over size, /O2 must be before the common flags.
@@ -2846,6 +2667,7 @@ config("optimize_max") {
   rustflags = [ "-Copt-level=3" ]
 }
 
+config("optimize_speed") { }
 # This config can be used to override the default settings for per-component
 # and whole-program optimization, optimizing the particular target for speed
 # instead of code size. This config is exactly the same as "optimize_max"
@@ -2853,7 +2675,7 @@ config("optimize_max") {
 #
 # TODO(crbug.com/41259697) - rework how all of these configs are related
 # so that we don't need this disclaimer.
-config("optimize_speed") {
+config("xoptimize_speed") {
   ldflags = common_optimize_on_ldflags
   if (is_win) {
     # Favor speed over size, /O2 must be before the common flags.
@@ -2870,7 +2692,8 @@ config("optimize_speed") {
   rustflags = [ "-Copt-level=3" ]
 }
 
-config("optimize_fuzzing") {
+config("optimize_fuzzing") { }
+config("xoptimize_fuzzing") {
   cflags = [ "-O1" ] + common_optimize_on_cflags
   rustflags = [ "-Copt-level=1" ]
   ldflags = common_optimize_on_ldflags
@@ -2997,7 +2820,8 @@ config("win_pdbaltpath") {
 }
 
 # Full symbols.
-config("symbols") {
+config("symbols") { }
+config("xsymbols") {
   rustflags = []
   configs = []
   if (is_win) {
@@ -3153,7 +2977,8 @@ config("symbols") {
 # Minimal symbols.
 # This config guarantees to hold symbol for stack trace which are shown to user
 # when crash happens in unittests running on buildbot.
-config("minimal_symbols") {
+config("minimal_symbols") { }
+config("xminimal_symbols") {
   rustflags = []
   cflags = []
   ldflags = []
@@ -3234,7 +3059,8 @@ config("minimal_symbols") {
 # This configuration contains function names only. That is, the compiler is
 # told to not generate debug information and the linker then just puts function
 # names in the final debug information.
-config("no_symbols") {
+config("no_symbols") { }
+config("xno_symbols") {
   if (is_win) {
     ldflags = [ "/DEBUG" ]
 
diff --git a/rust/rs_bindings_from_cc.gni b/rust/rs_bindings_from_cc.gni
index 54775ea..2f65063 100644
--- a/rust/rs_bindings_from_cc.gni
+++ b/rust/rs_bindings_from_cc.gni
@@ -287,7 +287,7 @@ template("rs_bindings_from_cc") {
       #
       # Add it last so includes from deps and configs take precedence.
       "-isystem" + rebase_path(
-              clang_base_path + "/lib/clang/" + clang_version + "/include",
+              clang_resource_path + "/include",
               root_build_dir),
 
       # Passes C comments through as rustdoc attributes.
diff --git a/rust/rust_bindgen_generator.gni b/rust/rust_bindgen_generator.gni
index 652c19b..20f275c 100644
--- a/rust/rust_bindgen_generator.gni
+++ b/rust/rust_bindgen_generator.gni
@@ -226,7 +226,7 @@ template("rust_bindgen_generator") {
     # make it behave consistently with our other command line flags and allows
     # system headers to be found.
     clang_resource_dir =
-        rebase_path(clang_base_path + "/lib/clang/" + clang_version,
+        rebase_path(clang_base_path,
                     root_build_dir)
     args += [
       "-resource-dir",
