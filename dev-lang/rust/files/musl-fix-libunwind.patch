commit 069ebf4dedf89e14413c6f96064e090512d1dd93
Author: 12101111 <w12101111@gmail.com>
Date:   Sun Apr 11 22:21:54 2021 +0800

    libunwind fix and cleanup

diff --git a/library/unwind/build.rs b/library/unwind/build.rs
index d8bf152e4d6..4eb07a1ff99 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -4,7 +4,8 @@ fn main() {
     println!("cargo:rerun-if-changed=build.rs");
     let target = env::var("TARGET").expect("TARGET was not set");
 
-    if cfg!(feature = "system-llvm-libunwind") {
+    if cfg!(target_os = "linux") && cfg!(feature = "system-llvm-libunwind") {
+        // linking for Linux is handled in lib.rs
         return;
     }
 
@@ -57,101 +58,119 @@ mod llvm_libunwind {
     pub fn compile() {
         let target = env::var("TARGET").expect("TARGET was not set");
         let target_env = env::var("CARGO_CFG_TARGET_ENV").unwrap();
-        let target_vendor = env::var("CARGO_CFG_TARGET_VENDOR").unwrap();
-        let target_endian_little = env::var("CARGO_CFG_TARGET_ENDIAN").unwrap() != "big";
-        let cfg = &mut cc::Build::new();
-
-        cfg.cpp(true);
-        cfg.cpp_set_stdlib(None);
-        cfg.warnings(false);
+        let mut cc_cfg = cc::Build::new();
+        let mut cpp_cfg = cc::Build::new();
 
-        // libunwind expects a __LITTLE_ENDIAN__ macro to be set for LE archs, cf. #65765
-        if target_endian_little {
-            cfg.define("__LITTLE_ENDIAN__", Some("1"));
-        }
+        cpp_cfg.cpp(true);
+        cpp_cfg.cpp_set_stdlib(None);
+        cc_cfg.warnings(false);
+        cpp_cfg.warnings(false);
 
-        if target_env == "msvc" {
-            // Don't pull in extra libraries on MSVC
-            cfg.flag("/Zl");
-            cfg.flag("/EHsc");
-            cfg.define("_CRT_SECURE_NO_WARNINGS", None);
-            cfg.define("_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS", None);
-        } else if target.contains("x86_64-fortanix-unknown-sgx") {
-            cfg.cpp(false);
-
-            cfg.static_flag(true);
-            cfg.opt_level(3);
-
-            cfg.flag("-nostdinc++");
-            cfg.flag("-fno-exceptions");
-            cfg.flag("-fno-rtti");
-            cfg.flag("-fstrict-aliasing");
-            cfg.flag("-funwind-tables");
-            cfg.flag("-fvisibility=hidden");
-            cfg.flag("-fno-stack-protector");
-            cfg.flag("-ffreestanding");
-            cfg.flag("-fexceptions");
-
-            // easiest way to undefine since no API available in cc::Build to undefine
-            cfg.flag("-U_FORTIFY_SOURCE");
-            cfg.define("_FORTIFY_SOURCE", "0");
-
-            cfg.flag_if_supported("-fvisibility-global-new-delete-hidden");
-
-            cfg.define("_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS", None);
-            cfg.define("RUST_SGX", "1");
-            cfg.define("__NO_STRING_INLINES", None);
-            cfg.define("__NO_MATH_INLINES", None);
-            cfg.define("_LIBUNWIND_IS_BAREMETAL", None);
-            cfg.define("__LIBUNWIND_IS_NATIVE_ONLY", None);
-            cfg.define("NDEBUG", None);
+        if target.contains("x86_64-fortanix-unknown-sgx") {
+            cpp_cfg.cpp(false);
+
+            cpp_cfg.static_flag(true);
+            cpp_cfg.opt_level(3);
+            cc_cfg.static_flag(true);
+            cc_cfg.opt_level(3);
+
+            cpp_cfg.flag("-nostdinc++");
+            cpp_cfg.flag("-fno-exceptions");
+            cpp_cfg.flag("-fno-rtti");
+            cpp_cfg.flag_if_supported("-fvisibility-global-new-delete-hidden");
+
+            for cfg in [&mut cc_cfg, &mut cpp_cfg].iter_mut() {
+                cfg.flag("-fstrict-aliasing");
+                cfg.flag("-funwind-tables");
+                cfg.flag("-fvisibility=hidden");
+                cfg.flag("-fno-stack-protector");
+                cfg.flag("-ffreestanding");
+                cfg.flag("-fexceptions");
+
+                // easiest way to undefine since no API available in cc::Build to undefine
+                cfg.flag("-U_FORTIFY_SOURCE");
+                cfg.define("_FORTIFY_SOURCE", "0");
+                cfg.define("_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS", None);
+                cfg.define("RUST_SGX", "1");
+                cfg.define("__NO_STRING_INLINES", None);
+                cfg.define("__NO_MATH_INLINES", None);
+                cfg.define("_LIBUNWIND_IS_BAREMETAL", None);
+                cfg.define("__LIBUNWIND_IS_NATIVE_ONLY", None);
+                cfg.define("NDEBUG", None);
+            }
         } else {
-            cfg.flag("-std=c99");
-            cfg.flag("-std=c++11");
-            cfg.flag("-nostdinc++");
-            cfg.flag("-fno-exceptions");
-            cfg.flag("-fno-rtti");
-            cfg.flag("-fstrict-aliasing");
-            cfg.flag("-funwind-tables");
-            cfg.flag("-fvisibility=hidden");
-            cfg.flag_if_supported("-fvisibility-global-new-delete-hidden");
-            cfg.define("_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS", None);
+            if target_env == "musl" {
+                // use the same GCC C compiler command to compile C++ code so we do not need to setup the
+                // C++ compiler env variables on the builders.
+                // Don't set this for clang++, as clang++ is able to compile this without libc++.
+                if cpp_cfg.get_compiler().is_like_gnu() {
+                    cpp_cfg.cpp(false);
+                }
+            }
+            cpp_cfg.flag("-nostdinc++");
+            cpp_cfg.flag("-fno-exceptions");
+            cpp_cfg.flag("-fno-rtti");
+            cpp_cfg.flag_if_supported("-fvisibility-global-new-delete-hidden");
+
+            for cfg in [&mut cc_cfg, &mut cpp_cfg].iter_mut() {
+                cfg.flag("-fstrict-aliasing");
+                cfg.flag("-funwind-tables");
+                cfg.flag("-fvisibility=hidden");
+                cfg.define("_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS", None);
+            }
         }
 
-        let mut unwind_sources = vec![
-            "Unwind-EHABI.cpp",
-            "Unwind-seh.cpp",
+        let mut c_sources = vec![
             "Unwind-sjlj.c",
             "UnwindLevel1-gcc-ext.c",
             "UnwindLevel1.c",
             "UnwindRegistersRestore.S",
             "UnwindRegistersSave.S",
-            "libunwind.cpp",
         ];
 
-        if target_vendor == "apple" {
-            unwind_sources.push("Unwind_AppleExtras.cpp");
-        }
+        let cpp_sources = vec!["Unwind-EHABI.cpp", "Unwind-seh.cpp", "libunwind.cpp"];
+        let cpp_len = cpp_sources.len();
 
         if target.contains("x86_64-fortanix-unknown-sgx") {
-            unwind_sources.push("UnwindRustSgx.c");
+            c_sources.push("UnwindRustSgx.c");
         }
 
         let root = Path::new("../../src/llvm-project/libunwind");
-        cfg.include(root.join("include"));
-        for src in unwind_sources {
-            cfg.file(root.join("src").join(src));
+        cc_cfg.include(root.join("include"));
+        cpp_cfg.include(root.join("include"));
+        for src in c_sources {
+            cc_cfg.file(root.join("src").join(src));
         }
 
-        if target_env == "musl" {
-            // use the same C compiler command to compile C++ code so we do not need to setup the
-            // C++ compiler env variables on the builders
-            cfg.cpp(false);
-            // linking for musl is handled in lib.rs
-            cfg.cargo_metadata(false);
-            println!("cargo:rustc-link-search=native={}", env::var("OUT_DIR").unwrap());
+        for src in cpp_sources {
+            cpp_cfg.file(root.join("src").join(src));
         }
 
-        cfg.compile("unwind");
+        cpp_cfg.cargo_metadata(false);
+        cc_cfg.cargo_metadata(false);
+        let out_dir = env::var("OUT_DIR").unwrap();
+        println!("cargo:rustc-link-search=native={}", &out_dir);
+
+        cpp_cfg.compile("unwind-cpp");
+
+        let ar = env::var("AR")
+            .or(env::var(format!("AR_{}", target)))
+            .unwrap_or_else(|_| "ar".to_owned());
+        let obj_dir = Path::new(&out_dir).join("obj");
+        std::fs::create_dir_all(&obj_dir).unwrap();
+        let mut cmd = std::process::Command::new(ar)
+            .args(&["x", &format!("{}/libunwind-cpp.a", &out_dir)])
+            .current_dir(&obj_dir)
+            .spawn()
+            .expect("ar command failed to run");
+        cmd.wait().expect("ar command failed to run");
+        let mut count = 0;
+        for entry in std::fs::read_dir(&obj_dir).unwrap() {
+            let obj = entry.unwrap().path().canonicalize().unwrap();
+            cc_cfg.object(&obj);
+            count += 1;
+        }
+        assert_eq!(cpp_len, count, "Can't get object files from {:?}", &obj_dir);
+        cc_cfg.compile("unwind");
     }
 }
diff --git a/library/unwind/src/lib.rs b/library/unwind/src/lib.rs
index be5e56c71e3..84e40758425 100644
--- a/library/unwind/src/lib.rs
+++ b/library/unwind/src/lib.rs
@@ -36,11 +36,34 @@
     }
 }
 
-#[cfg(target_env = "musl")]
+#[cfg(all(target_env = "musl", not(feature = "system-llvm-libunwind")))]
 #[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
+extern "C" {}
+
+#[cfg(all(target_env = "musl", feature = "system-llvm-libunwind"))]
+#[link(name = "unwind", kind = "static-nobundle", cfg(target_feature = "crt-static"))]
+extern "C" {}
+
+#[cfg(all(target_env = "musl", feature = "llvm-libunwind"))]
+#[link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static")))]
+extern "C" {}
+
+#[cfg(all(
+    target_env = "musl",
+    not(feature = "llvm-libunwind"),
+    not(feature = "system-llvm-libunwind")
+))]
 #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
 extern "C" {}
 
+#[cfg(all(
+    target_env = "musl",
+    not(feature = "llvm-libunwind"),
+    feature = "system-llvm-libunwind"
+))]
+#[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
+extern "C" {}
+
 // When building with crt-static, we get `gcc_eh` from the `libc` crate, since
 // glibc needs it, and needs it listed later on the linker command line. We
 // don't want to duplicate it here.
@@ -68,5 +91,5 @@
 extern "C" {}
 
 #[cfg(all(target_vendor = "fortanix", target_env = "sgx"))]
-#[link(name = "unwind", kind = "static-nobundle")]
+#[link(name = "unwind", kind = "static")]
 extern "C" {}
diff --git a/library/unwind/src/libunwind.rs b/library/unwind/src/libunwind.rs
index faf554d285a..e44727c751f 100644
--- a/library/unwind/src/libunwind.rs
+++ b/library/unwind/src/libunwind.rs
@@ -79,7 +79,7 @@ pub enum _Unwind_Context {}
     extern "C" fn(unwind_code: _Unwind_Reason_Code, exception: *mut _Unwind_Exception);
 #[cfg_attr(
     all(feature = "llvm-libunwind", any(target_os = "fuchsia", target_os = "linux")),
-    link(name = "unwind", kind = "static")
+    link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static")))
 )]
 extern "C" {
     #[unwind(allowed)]
@@ -107,7 +107,7 @@ pub enum _Unwind_Action {
 
     #[cfg_attr(all(feature = "llvm-libunwind",
                    any(target_os = "fuchsia", target_os = "linux")),
-               link(name = "unwind", kind = "static"))]
+               link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static"))))]
     extern "C" {
         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;
         pub fn _Unwind_SetGR(ctx: *mut _Unwind_Context, reg_index: c_int, value: _Unwind_Word);
@@ -164,7 +164,7 @@ enum _Unwind_VRS_DataRepresentation {
 
     #[cfg_attr(all(feature = "llvm-libunwind",
                    any(target_os = "fuchsia", target_os = "linux")),
-               link(name = "unwind", kind = "static"))]
+               link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static"))))]
     extern "C" {
         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,
                            regclass: _Unwind_VRS_RegClass,
@@ -229,7 +229,7 @@ pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut c_void) -> *mut c_void {
     // Not 32-bit iOS
     #[cfg_attr(all(feature = "llvm-libunwind",
                    any(target_os = "fuchsia", target_os = "linux")),
-               link(name = "unwind", kind = "static"))]
+               link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static"))))]
     extern "C" {
         #[unwind(allowed)]
         pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;
@@ -241,7 +241,7 @@ pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,
     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()
     #[cfg_attr(all(feature = "llvm-libunwind",
                    any(target_os = "fuchsia", target_os = "linux")),
-               link(name = "unwind", kind = "static"))]
+               link(name = "unwind", kind = "static", cfg(not(target_feature = "crt-static"))))]
     extern "C" {
         #[unwind(allowed)]
         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;
