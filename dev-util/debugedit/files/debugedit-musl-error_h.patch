From d4ddaaf407386aed269e59ef17e0320dfbe95784 Mon Sep 17 00:00:00 2001
From: 12101111 <w12101111@gmail.com>
Date: Fri, 18 Feb 2022 15:27:27 +0800
Subject: [PATCH] Add error.h for musl

---
 tools/debugedit.c      |  2 +-
 tools/error.h          | 60 ++++++++++++++++++++++++++++++++++++++++++
 tools/sepdebugcrcfix.c |  2 +-
 3 files changed, 62 insertions(+), 2 deletions(-)
 create mode 100644 tools/error.h

diff --git a/tools/debugedit.c b/tools/debugedit.c
index c422d03..202adff 100644
--- a/tools/debugedit.c
+++ b/tools/debugedit.c
@@ -25,7 +25,7 @@
 #include <byteswap.h>
 #include <endian.h>
 #include <errno.h>
-#include <error.h>
+#include "error.h"
 #include <limits.h>
 #include <string.h>
 #include <stdlib.h>
diff --git a/tools/error.h b/tools/error.h
new file mode 100644
index 0000000..9a4e1f8
--- /dev/null
+++ b/tools/error.h
@@ -0,0 +1,60 @@
+#ifndef _ERROR_H_
+#define _ERROR_H_
+
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+
+#warning usage of non-standard #include <error.h> is deprecated
+
+static unsigned int error_message_count = 0;
+
+static inline void error(int status, int errnum, const char* format, ...)
+{
+	/* should be fflush(stdout), but that's unspecified if stdout has been closed;
+	 * stick with fflush(NULL) for simplicity (glibc checks if the fd is still valid) */
+	fflush(NULL);
+
+	va_list ap;
+	fprintf(stderr, "%s: ", program_invocation_name);
+	va_start(ap, format);
+	vfprintf(stderr, format, ap);
+	va_end(ap);
+	if (errnum)
+		fprintf(stderr, ": %s", strerror(errnum));
+	fprintf(stderr, "\n");
+	error_message_count++;
+	if (status)
+		exit(status);
+}
+
+static int error_one_per_line = 0;
+
+static inline void error_at_line(int status, int errnum, const char *filename,
+		unsigned int linenum, const char *format, ...)
+{
+	va_list ap;
+	if (error_one_per_line) {
+		static const char *old_filename;
+		static int old_linenum;
+		if (linenum == old_linenum && filename == old_filename)
+			return;
+		old_filename = filename;
+		old_linenum = linenum;
+	}
+	fprintf(stderr, "%s: %s:%u: ", program_invocation_name, filename, linenum);
+	va_start(ap, format);
+	vfprintf(stderr, format, ap);
+	va_end(ap);
+	if (errnum)
+		fprintf(stderr, ": %s", strerror(errnum));
+	fprintf(stderr, "\n");
+	error_message_count++;
+	if (status)
+		exit(status);
+}
+
+
+#endif	/* _ERROR_H_ */
diff --git a/tools/sepdebugcrcfix.c b/tools/sepdebugcrcfix.c
index da50e6c..98cd55a 100644
--- a/tools/sepdebugcrcfix.c
+++ b/tools/sepdebugcrcfix.c
@@ -29,7 +29,7 @@
 #include <endian.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <error.h>
+#include "error.h"
 #include <libelf.h>
 #include <gelf.h>
 
-- 
2.35.1

