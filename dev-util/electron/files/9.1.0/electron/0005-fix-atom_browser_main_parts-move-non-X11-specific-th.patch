From a4b7eff49898f5d9dc38f68db420cd3dda3fdef1 Mon Sep 17 00:00:00 2001
From: 12101111 <w12101111@gmail.com>
Date: Tue, 30 Jun 2020 12:06:22 +0800
Subject: [PATCH 5/6] fix(atom_browser_main_parts): move non X11 specific
 things out of ifdefs

---
 shell/browser/electron_browser_main_parts.cc | 39 +++++++++++---------
 1 file changed, 21 insertions(+), 18 deletions(-)

diff --git a/shell/browser/electron_browser_main_parts.cc b/shell/browser/electron_browser_main_parts.cc
index 6cdf7beb7..87d7e40ca 100644
--- a/shell/browser/electron_browser_main_parts.cc
+++ b/shell/browser/electron_browser_main_parts.cc
@@ -10,6 +10,13 @@
 
 #if defined(OS_LINUX)
 #include <glib.h>  // for g_setenv()
+#include "base/environment.h"
+#include "base/nix/xdg_util.h"
+#include "base/threading/thread_task_runner_handle.h"
+#include "ui/gtk/gtk_ui.h"
+#include "ui/gtk/gtk_ui_delegate.h"
+#include "ui/gtk/gtk_util.h"
+#include "ui/views/linux_ui/linux_ui.h"
 #endif
 
 #include "base/base_switches.h"
@@ -61,19 +68,12 @@
 #endif
 
 #if defined(USE_X11)
-#include "base/environment.h"
-#include "base/nix/xdg_util.h"
-#include "base/threading/thread_task_runner_handle.h"
 #include "ui/base/x/x11_util.h"
 #include "ui/base/x/x11_util_internal.h"
 #include "ui/events/devices/x11/touch_factory_x11.h"
 #include "ui/gfx/color_utils.h"
 #include "ui/gfx/x/x11_types.h"
-#include "ui/gtk/gtk_ui.h"
-#include "ui/gtk/gtk_ui_delegate.h"
 #include "ui/gtk/gtk_ui_delegate_x11.h"
-#include "ui/gtk/gtk_util.h"
-#include "ui/views/linux_ui/linux_ui.h"
 #endif
 
 #if defined(OS_WIN)
@@ -147,14 +147,7 @@ base::string16 MediaStringProvider(media::MessageId id) {
   }
 }
 
-#if defined(USE_X11)
-// Indicates that we're currently responding to an IO error (by shutting down).
-bool g_in_x11_io_error_handler = false;
-
-// Number of seconds to wait for UI thread to get an IO error if we get it on
-// the background thread.
-const int kWaitForUIThreadSeconds = 10;
-
+#if defined(OS_LINUX)
 void OverrideLinuxAppDataPath() {
   base::FilePath path;
   if (base::PathService::Get(DIR_APP_DATA, &path))
@@ -164,6 +157,15 @@ void OverrideLinuxAppDataPath() {
                                     base::nix::kDotConfigDir);
   base::PathService::Override(DIR_APP_DATA, path);
 }
+#endif
+
+#if defined(USE_X11)
+// Indicates that we're currently responding to an IO error (by shutting down).
+bool g_in_x11_io_error_handler = false;
+
+// Number of seconds to wait for UI thread to get an IO error if we get it on
+// the background thread.
+const int kWaitForUIThreadSeconds = 10;
 
 int BrowserX11ErrorHandler(Display* d, XErrorEvent* error) {
   if (!g_in_x11_io_error_handler && base::ThreadTaskRunnerHandle::IsSet()) {
@@ -296,14 +298,15 @@ void ElectronBrowserMainParts::RegisterDestructionCallback(
 
 int ElectronBrowserMainParts::PreEarlyInitialization() {
   field_trial_list_ = std::make_unique<base::FieldTrialList>(nullptr);
-#if defined(USE_X11)
+#if defined(OS_LINUX)
   OverrideLinuxAppDataPath();
-
+#if defined(USE_X11)
   // Installs the X11 error handlers for the browser process used during
   // startup. They simply print error messages and exit because
   // we can't shutdown properly while creating and initializing services.
   ui::SetX11ErrorHandlers(nullptr, nullptr);
 #endif
+#endif
 
 #if defined(OS_POSIX)
   HandleSIGCHLD();
@@ -355,7 +358,7 @@ int ElectronBrowserMainParts::PreCreateThreads() {
 #if defined(USE_AURA)
   display::Screen* screen = views::CreateDesktopScreen();
   display::Screen::SetScreenInstance(screen);
-#if defined(USE_X11)
+#if defined(OS_LINUX)
   views::LinuxUI::instance()->UpdateDeviceScaleFactor();
 #endif
 #endif
-- 
2.27.0

