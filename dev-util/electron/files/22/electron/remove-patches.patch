diff --git a/patches/node/fix_preserve_proper_method_names_as-is_in_error_stack.patch b/patches/node/fix_preserve_proper_method_names_as-is_in_error_stack.patch
index bcd1c3ae56..8cbb8c980a 100644
--- a/patches/node/fix_preserve_proper_method_names_as-is_in_error_stack.patch
+++ b/patches/node/fix_preserve_proper_method_names_as-is_in_error_stack.patch
@@ -95,15 +95,6 @@ index 2ef95b535dafe7b0a918b8d6a844e4c4a617818d..dc5e6e7d28cef3a23ca7ba2cfb1435ca
      at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:*:*)
      at node:internal/main/run_main_module:*:* {
    generatedMessage: true,
-diff --git a/test/message/error_with_nul.out b/test/message/error_with_nul.out
-index 7fbb33f08e8dc342b9efc899e66f5e3350e9489b..a359999420fa76bd09b401a732acb7dcdfaa2198 100644
-GIT binary patch
-delta 13
-VcmdnUvXEuMi;3^+Czmts0st)*2A2Q;
-
-delta 31
-ncmZ3;vXN!N3wHmctkmQZy@@aCIo(S0l1no4^YkXCGwuQa$o~w9
-
 diff --git a/test/message/events_unhandled_error_common_trace.out b/test/message/events_unhandled_error_common_trace.out
 index 19e89869ba74fae3f447e299904939da5a683280..2bdbe3df1b4c7e13ba33f099ae89f88365e6b690 100644
 --- a/test/message/events_unhandled_error_common_trace.out
diff --git a/patches/chromium/axselectedtextmarkerrange_should_not_be_backwards.patch b/patches/chromium/axselectedtextmarkerrange_should_not_be_backwards.patch
index 2fd993bdd0..4b8bb86998 100644
--- a/patches/chromium/axselectedtextmarkerrange_should_not_be_backwards.patch
+++ b/patches/chromium/axselectedtextmarkerrange_should_not_be_backwards.patch
@@ -45,13 +45,3 @@ index 55cce7ff53b355cea2787abca6140f122f6a0369..202923773d7adb2fad5c15be4558bfd5
  }
  
  - (NSString*)sortDirection {
-diff --git a/content/test/data/accessibility/mac/selection/selectall-textarea-expected.txt b/content/test/data/accessibility/mac/selection/selectall-textarea-expected.txt
-index f2638c5d03b16266e781bb74cfc08c65f7c0a60d..34036471ad01d0fcfc7bd9b7213f1b4edcded719 100644
---- a/content/test/data/accessibility/mac/selection/selectall-textarea-expected.txt
-+++ b/content/test/data/accessibility/mac/selection/selectall-textarea-expected.txt
-@@ -1,4 +1,4 @@
- textarea_range={anchor: {:3, 0, down}, focus: {:3, 19, down}}
- textarea.AXSelectedTextMarkerRange={anchor: {:3, 0, down}, focus: {:3, 19, down}}
- AXSelectedTextChanged on AXTextArea AXValue='The quick brown fox' AXTextSelectionDirection=AXTextSelectionDirectionUnknown AXTextSelectionGranularity=AXTextSelectionGranularityUnknown AXTextStateChangeType=AXTextStateChangeTypeSelectionMove
--textarea.AXSelectedTextMarkerRange={anchor: {:3, 19, down}, focus: {:3, 0, down}}
-+textarea.AXSelectedTextMarkerRange={anchor: {:3, 0, down}, focus: {:3, 19, down}}
diff --git a/patches/chromium/cherry-pick-26bfa5807606.patch b/patches/chromium/cherry-pick-26bfa5807606.patch
index 54805c0053..7942cb0edc 100644
--- a/patches/chromium/cherry-pick-26bfa5807606.patch
+++ b/patches/chromium/cherry-pick-26bfa5807606.patch
@@ -44,18 +44,3 @@ index 2c1bcba6022519c3a865ae8e3c2ffcd5bc385cf3..0cde402b49510514599201d2b3104e56
      current_value = To<CSSValueList>(css_value)->Copy();
    } else {
      current_value = CssValueListForPropertyID(property_id);
-diff --git a/third_party/blink/web_tests/external/wpt/css/css-typed-om/the-stylepropertymap/inline/append.tentative.html b/third_party/blink/web_tests/external/wpt/css/css-typed-om/the-stylepropertymap/inline/append.tentative.html
-index ee9a9e4ddbcf78a7517d8d038d66844880719e63..f80875622366939f48a7471513fb6319f75be718 100644
---- a/third_party/blink/web_tests/external/wpt/css/css-typed-om/the-stylepropertymap/inline/append.tentative.html
-+++ b/third_party/blink/web_tests/external/wpt/css/css-typed-om/the-stylepropertymap/inline/append.tentative.html
-@@ -56,4 +56,10 @@ test(t => {
-   assert_style_value_array_equals(result, [CSS.s(5), CSS.s(10), CSS.s(1), CSS.s(2)]);
- }, 'StylePropertyMap.append is case-insensitive');
- 
-+// https://crbug.com/1417176
-+test(t => {
-+  let styleMap = createInlineStyleMap(t, 'transition-duration: inherit');
-+  assert_throws_js(TypeError, () => styleMap.append('transition-duration', '1s'));
-+}, 'StylePropertyMap.append rejects appending to CSS-wide keywords');
-+
- </script>
diff --git a/patches/chromium/.patches b/patches/chromium/.patches
index 5aa1ecec37..c37fcc20d9 100644
--- a/patches/chromium/.patches
+++ b/patches/chromium/.patches
@@ -136,7 +136,6 @@ cherry-pick-aeec1ba5893d.patch
 cherry-pick-0407102d19b9.patch
 fix_crash_in_annotationagentimpl.patch
 cherry-pick-bfd926be8178.patch
-cherry-pick-9aa4c45f21b1.patch
 m108-lts_do_not_register_browser_watcher_activity_report_with.patch
 prevent_potential_integer_overflow_in_persistentmemoryallocator_1_2.patch
 m108-lts_prevent_potential_integer_overflow_in.patch
@@ -155,7 +154,6 @@ merge_m112_check_spdyproxyclientsocket_is_alive_after_write.patch
 check_callback_availability_in.patch
 cherry-pick-63686953dc22.patch
 cherry-pick-f098ff0d1230.patch
-cherry-pick-f58218891f8c.patch
 wayland_ensure_dnd_buffer_size_is_a_multiple_of_scale.patch
 m112_cherry_pick_libxml_cve_fix.patch
 m112_fix_scopedobservation_uaf_in.patch
diff --git a/patches/chromium/cherry-pick-ea1cd76358e0.patch b/patches/chromium/cherry-pick-ea1cd76358e0.patch
index 74c04ad26d..552fbdd5f9 100644
--- a/patches/chromium/cherry-pick-ea1cd76358e0.patch
+++ b/patches/chromium/cherry-pick-ea1cd76358e0.patch
@@ -45,39 +45,6 @@ index 4e6212397a183fdf494f271a255eaf2d536587e6..7159cf6af5cfd0ad5b9e5ba526043a44
  IN_PROC_BROWSER_TEST_P(WebViewTest, Shim_TestLoadDataAPI) {
    TestHelper("testLoadDataAPI", "web_view/shim", NEEDS_TEST_SERVER);
  
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-index 5ed4f0223346b01d83cc04c8cda6c0e92e1a72e3..4a1543d1751cc817a511594d0123deacc0e61ebb 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-@@ -2859,6 +2859,20 @@ function testFindInMultipleWebViews() {
-       });
- }
- 
-+function testFindAfterTerminate() {
-+  let webview = new WebView();
-+  webview.src = 'data:text/html,<body><iframe></iframe></body>';
-+  webview.addEventListener('loadstop', () => {
-+    webview.find('A');
-+    webview.terminate();
-+    webview.find('B', {'backward': true});
-+    webview.find('B', {'backward': true}, (results) => {
-+      embedder.test.succeed();
-+    });
-+  });
-+  document.body.appendChild(webview);
-+}
-+
- function testLoadDataAPI() {
-   var webview = new WebView();
-   webview.src = 'about:blank';
-@@ -3600,6 +3614,7 @@ embedder.test.testList = {
-   'testFindAPI': testFindAPI,
-   'testFindAPI_findupdate': testFindAPI_findupdate,
-   'testFindInMultipleWebViews': testFindInMultipleWebViews,
-+  'testFindAfterTerminate': testFindAfterTerminate,
-   'testLoadDataAPI': testLoadDataAPI,
-   'testLoadDataAPIAccessibleResources': testLoadDataAPIAccessibleResources,
-   'testResizeEvents': testResizeEvents,
 diff --git a/extensions/browser/guest_view/web_view/web_view_find_helper.cc b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
 index 07b8a6975907190741267e3f92c2e9bde5d9c5d6..f7e5c7c6ece05fa59374735cb1757d1918d1597c 100644
 --- a/extensions/browser/guest_view/web_view/web_view_find_helper.cc
diff --git a/patches/chromium/cherry-pick-85beff6fd302.patch b/patches/chromium/cherry-pick-85beff6fd302.patch
index 3b4d5802ef..fdb958a9be 100644
--- a/patches/chromium/cherry-pick-85beff6fd302.patch
+++ b/patches/chromium/cherry-pick-85beff6fd302.patch
@@ -60,75 +60,6 @@ index 7159cf6af5cfd0ad5b9e5ba526043a4407a5399d..e43966f43f7ae551b3ea335a3f422288
  IN_PROC_BROWSER_TEST_P(WebViewTest, ContextMenuInspectElement) {
    LoadAppWithGuest("web_view/context_menus/basic");
    content::RenderFrameHost* guest_rfh = GetGuestRenderFrameHost();
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-index 900911f4963d23d74225868dce01326ba533f63a..4dd25d8849b0b13957ab7fa2912c0a158d3cd244 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-@@ -34,6 +34,9 @@ embedder.setUp_ = function(config) {
-   embedder.guestWithLinkURL = embedder.baseGuestURL +
-       '/extensions/platform_apps/web_view/newwindow' +
-       '/guest_with_link.html';
-+  embedder.guestOpenOnLoadURL = embedder.baseGuestURL +
-+      '/extensions/platform_apps/web_view/newwindow' +
-+      '/guest_opener_open_on_load.html';
- };
- 
- /** @private */
-@@ -652,6 +655,24 @@ function testNewWindowDeferredAttachmentIndefinitely() {
-   embedder.setUpNewWindowRequest_(webview, 'guest.html', '', testName);
- }
- 
-+// This is not a test in and of itself, but a means of creating a webview that
-+// is left in an unattached state while its opener webview is also in an
-+// unattached state, so that the C++ side can test it in that state.
-+function testDestroyOpenerBeforeAttachment() {
-+  embedder.test.succeed();
-+
-+  let webview = new WebView();
-+  webview.src = embedder.guestOpenOnLoadURL;
-+  document.body.appendChild(webview);
-+
-+  // By spinning forever here, we prevent `webview` from completing the
-+  // attachment process. But since the guest is still created and it calls
-+  // window.open, we have a situation where two unattached webviews have an
-+  // opener relationship. The C++ side will test that we can shutdown safely in
-+  // this case.
-+  while (true) {}
-+}
-+
- embedder.test.testList = {
-   'testNewWindowAttachAfterOpenerDestroyed':
-       testNewWindowAttachAfterOpenerDestroyed,
-@@ -675,7 +696,9 @@ embedder.test.testList = {
-       testNewWindowWebViewNameTakesPrecedence,
-   'testNewWindowAndUpdateOpener': testNewWindowAndUpdateOpener,
-   'testNewWindowDeferredAttachmentIndefinitely':
--      testNewWindowDeferredAttachmentIndefinitely
-+      testNewWindowDeferredAttachmentIndefinitely,
-+  'testDestroyOpenerBeforeAttachment':
-+      testDestroyOpenerBeforeAttachment
- };
- 
- onload = function() {
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-new file mode 100644
-index 0000000000000000000000000000000000000000..e961feb3c6487066801adf414bf4a2746c50a3f6
---- /dev/null
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-@@ -0,0 +1,13 @@
-+<!--
-+Copyright 2023 The Chromium Authors
-+Use of this source code is governed by a BSD-style license that can be
-+found in the LICENSE file.
-+-->
-+<html>
-+<body>
-+<script>
-+  // A guest that opens a new window on load.
-+  window.open('guest.html');
-+</script>
-+</body>
-+</html>
 diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
 index 38f0f12e65009c660a6dba262617d48c10ff72ea..129443365f474b840e2ddc61868e89af2851a892 100644
 --- a/components/guest_view/browser/guest_view_manager.cc
diff --git a/patches/v8/cherry-pick-9c6dfc733fce.patch b/patches/v8/cherry-pick-9c6dfc733fce.patch
index 0b04709b28..25778bf280 100644
--- a/patches/v8/cherry-pick-9c6dfc733fce.patch
+++ b/patches/v8/cherry-pick-9c6dfc733fce.patch
@@ -131,20 +131,3 @@ index c15ac8656adeaf92773a0c4049f7e903ecd2e07f..a7e1833f730e6e5869cd4925cca6dc90
            if (!CheckContextualStoreToJSGlobalObject(&own_lookup,
                                                      should_throw)) {
              return Nothing<bool>();
-diff --git a/test/unittests/api/interceptor-unittest.cc b/test/unittests/api/interceptor-unittest.cc
-index 635bf6a0b72f8d49591be333b1314846c9c47269..416f9bd1eb4c59160eb03031e6011ae02dcf021e 100644
---- a/test/unittests/api/interceptor-unittest.cc
-+++ b/test/unittests/api/interceptor-unittest.cc
-@@ -174,8 +174,10 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
-   EXPECT_EQ(Run("obj.foo"), "named getter");
-   EXPECT_EQ(Run("obj[42]"), "indexed getter");
- 
--  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
--  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
-+  EXPECT_EQ(Run("obj.foo = null"),
-+            "named setter, named descriptor, named query");
-+  EXPECT_EQ(Run("obj[42] = null"),
-+            "indexed setter, indexed descriptor, indexed query");
- 
-   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
-             "named descriptor");
diff --git a/patches/v8/m108-lts_api_fix_v8_object_setaccessorproperty.patch b/patches/v8/m108-lts_api_fix_v8_object_setaccessorproperty.patch
index 70fa9149fe..bd52adff93 100644
--- a/patches/v8/m108-lts_api_fix_v8_object_setaccessorproperty.patch
+++ b/patches/v8/m108-lts_api_fix_v8_object_setaccessorproperty.patch
@@ -349,18 +349,3 @@ index fead4aa222ceb81d76f6dfec7e7797e337e7ba94..aab72a18015bf7ac1d0949e9497e85d9
  }
  
  void InstallFunction(Isolate* isolate, Handle<JSObject> holder,
-diff --git a/test/cctest/test-code-stub-assembler.cc b/test/cctest/test-code-stub-assembler.cc
-index 53ad0a95e2e63f32610a77ee7195d15f7037898d..4152456d1a7962da4a0d88e15bc68107da585613 100644
---- a/test/cctest/test-code-stub-assembler.cc
-+++ b/test/cctest/test-code-stub-assembler.cc
-@@ -1179,7 +1179,9 @@ void AddProperties(Handle<JSObject> object, Handle<Name> names[],
-       Handle<AccessorPair> pair = Handle<AccessorPair>::cast(value);
-       Handle<Object> getter(pair->getter(), isolate);
-       Handle<Object> setter(pair->setter(), isolate);
--      JSObject::DefineAccessor(object, names[i], getter, setter, NONE).Check();
-+      JSObject::DefineOwnAccessorIgnoreAttributes(object, names[i], getter,
-+                                                  setter, NONE)
-+          .Check();
-     } else {
-       JSObject::AddProperty(isolate, object, names[i], value, NONE);
-     }
