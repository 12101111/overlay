diff --git a/patches/chromium/cherry-pick-ea1cd76358e0.patch b/patches/chromium/cherry-pick-ea1cd76358e0.patch
index 95fec9929d..f4670ad472 100644
--- a/patches/chromium/cherry-pick-ea1cd76358e0.patch
+++ b/patches/chromium/cherry-pick-ea1cd76358e0.patch
@@ -45,39 +45,6 @@ index cebe56b9e79cbe0e5a58f73e68faf1b93b17ce5c..3748f8119bf1d4f37635bdb4fb87d825
  IN_PROC_BROWSER_TEST_P(WebViewTest, Shim_TestLoadDataAPI) {
    TestHelper("testLoadDataAPI", "web_view/shim", NEEDS_TEST_SERVER);
  
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-index 5ed4f0223346b01d83cc04c8cda6c0e92e1a72e3..4a1543d1751cc817a511594d0123deacc0e61ebb 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-@@ -2859,6 +2859,20 @@ function testFindInMultipleWebViews() {
-       });
- }
- 
-+function testFindAfterTerminate() {
-+  let webview = new WebView();
-+  webview.src = 'data:text/html,<body><iframe></iframe></body>';
-+  webview.addEventListener('loadstop', () => {
-+    webview.find('A');
-+    webview.terminate();
-+    webview.find('B', {'backward': true});
-+    webview.find('B', {'backward': true}, (results) => {
-+      embedder.test.succeed();
-+    });
-+  });
-+  document.body.appendChild(webview);
-+}
-+
- function testLoadDataAPI() {
-   var webview = new WebView();
-   webview.src = 'about:blank';
-@@ -3600,6 +3614,7 @@ embedder.test.testList = {
-   'testFindAPI': testFindAPI,
-   'testFindAPI_findupdate': testFindAPI_findupdate,
-   'testFindInMultipleWebViews': testFindInMultipleWebViews,
-+  'testFindAfterTerminate': testFindAfterTerminate,
-   'testLoadDataAPI': testLoadDataAPI,
-   'testLoadDataAPIAccessibleResources': testLoadDataAPIAccessibleResources,
-   'testResizeEvents': testResizeEvents,
 diff --git a/extensions/browser/guest_view/web_view/web_view_find_helper.cc b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
 index 1e9148687f6871dff8a394cce53771e443775679..37630dc2f0a6365bbf33e765f4d126e2962fbb2a 100644
 --- a/extensions/browser/guest_view/web_view/web_view_find_helper.cc
diff --git a/patches/v8/cherry-pick-bb90b9cfcbca.patch b/patches/v8/cherry-pick-bb90b9cfcbca.patch
index fba873f36f..c1c03a13d3 100644
--- a/patches/v8/cherry-pick-bb90b9cfcbca.patch
+++ b/patches/v8/cherry-pick-bb90b9cfcbca.patch
@@ -345,18 +345,3 @@ index fead4aa222ceb81d76f6dfec7e7797e337e7ba94..aab72a18015bf7ac1d0949e9497e85d9
  }
  
  void InstallFunction(Isolate* isolate, Handle<JSObject> holder,
-diff --git a/test/cctest/test-code-stub-assembler.cc b/test/cctest/test-code-stub-assembler.cc
-index c012e62016aca3a83975cd91216860ea9dc3d311..4c3402c7deec768931d07488cbbb79a0a7a7dd23 100644
---- a/test/cctest/test-code-stub-assembler.cc
-+++ b/test/cctest/test-code-stub-assembler.cc
-@@ -1178,7 +1178,9 @@ void AddProperties(Handle<JSObject> object, Handle<Name> names[],
-       Handle<AccessorPair> pair = Handle<AccessorPair>::cast(value);
-       Handle<Object> getter(pair->getter(), isolate);
-       Handle<Object> setter(pair->setter(), isolate);
--      JSObject::DefineAccessor(object, names[i], getter, setter, NONE).Check();
-+      JSObject::DefineOwnAccessorIgnoreAttributes(object, names[i], getter,
-+                                                  setter, NONE)
-+          .Check();
-     } else {
-       JSObject::AddProperty(isolate, object, names[i], value, NONE);
-     }
diff --git a/patches/chromium/cherry-pick-85beff6fd302.patch b/patches/chromium/cherry-pick-85beff6fd302.patch
index bf19d8aae3..698b5b0312 100644
--- a/patches/chromium/cherry-pick-85beff6fd302.patch
+++ b/patches/chromium/cherry-pick-85beff6fd302.patch
@@ -60,75 +60,6 @@ index 3748f8119bf1d4f37635bdb4fb87d825881de7f0..00f0bcb19ae291e5389284f98ee92256
  IN_PROC_BROWSER_TEST_P(WebViewTest, ContextMenuInspectElement) {
    LoadAppWithGuest("web_view/context_menus/basic");
    content::RenderFrameHost* guest_rfh = GetGuestRenderFrameHost();
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-index 900911f4963d23d74225868dce01326ba533f63a..4dd25d8849b0b13957ab7fa2912c0a158d3cd244 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-@@ -34,6 +34,9 @@ embedder.setUp_ = function(config) {
-   embedder.guestWithLinkURL = embedder.baseGuestURL +
-       '/extensions/platform_apps/web_view/newwindow' +
-       '/guest_with_link.html';
-+  embedder.guestOpenOnLoadURL = embedder.baseGuestURL +
-+      '/extensions/platform_apps/web_view/newwindow' +
-+      '/guest_opener_open_on_load.html';
- };
- 
- /** @private */
-@@ -652,6 +655,24 @@ function testNewWindowDeferredAttachmentIndefinitely() {
-   embedder.setUpNewWindowRequest_(webview, 'guest.html', '', testName);
- }
- 
-+// This is not a test in and of itself, but a means of creating a webview that
-+// is left in an unattached state while its opener webview is also in an
-+// unattached state, so that the C++ side can test it in that state.
-+function testDestroyOpenerBeforeAttachment() {
-+  embedder.test.succeed();
-+
-+  let webview = new WebView();
-+  webview.src = embedder.guestOpenOnLoadURL;
-+  document.body.appendChild(webview);
-+
-+  // By spinning forever here, we prevent `webview` from completing the
-+  // attachment process. But since the guest is still created and it calls
-+  // window.open, we have a situation where two unattached webviews have an
-+  // opener relationship. The C++ side will test that we can shutdown safely in
-+  // this case.
-+  while (true) {}
-+}
-+
- embedder.test.testList = {
-   'testNewWindowAttachAfterOpenerDestroyed':
-       testNewWindowAttachAfterOpenerDestroyed,
-@@ -675,7 +696,9 @@ embedder.test.testList = {
-       testNewWindowWebViewNameTakesPrecedence,
-   'testNewWindowAndUpdateOpener': testNewWindowAndUpdateOpener,
-   'testNewWindowDeferredAttachmentIndefinitely':
--      testNewWindowDeferredAttachmentIndefinitely
-+      testNewWindowDeferredAttachmentIndefinitely,
-+  'testDestroyOpenerBeforeAttachment':
-+      testDestroyOpenerBeforeAttachment
- };
- 
- onload = function() {
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-new file mode 100644
-index 0000000000000000000000000000000000000000..e961feb3c6487066801adf414bf4a2746c50a3f6
---- /dev/null
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-@@ -0,0 +1,13 @@
-+<!--
-+Copyright 2023 The Chromium Authors
-+Use of this source code is governed by a BSD-style license that can be
-+found in the LICENSE file.
-+-->
-+<html>
-+<body>
-+<script>
-+  // A guest that opens a new window on load.
-+  window.open('guest.html');
-+</script>
-+</body>
-+</html>
 diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
 index 94867bbd2ea58908b52474c3923354852c070aed..24199000741b29bcbe25a695090b2de3be894af2 100644
 --- a/components/guest_view/browser/guest_view_manager.cc
diff --git a/patches/v8/.patches b/patches/v8/.patches
index 2bac64e2ef..1b55deaacc 100644
--- a/patches/v8/.patches
+++ b/patches/v8/.patches
@@ -14,7 +14,6 @@ cherry-pick-2c8a019f39d2.patch
 cherry-pick-bb90b9cfcbca.patch
 merged_ic_fix_store_handler_selection_for_arguments_objects.patch
 cherry-pick-73af1a19a901.patch
-cherry-pick-3b0607d14060.patch
 cherry-pick-9c6dfc733fce.patch
 cherry-pick-2e76270cf65e.patch
 utf-8_q_shared-struct_20fix_20using_20shared_20objects_20as.patch
diff --git a/patches/v8/cherry-pick-9c6dfc733fce.patch b/patches/v8/cherry-pick-9c6dfc733fce.patch
index c67c8a18b5..a1e144ac66 100644
--- a/patches/v8/cherry-pick-9c6dfc733fce.patch
+++ b/patches/v8/cherry-pick-9c6dfc733fce.patch
@@ -131,20 +131,3 @@ index 01d826c43bf9ec8bb28aba0e59fd3fa8f5700bac..b57c68073e401bb34796689013213791
            if (!CheckContextualStoreToJSGlobalObject(&own_lookup,
                                                      should_throw)) {
              return Nothing<bool>();
-diff --git a/test/unittests/api/interceptor-unittest.cc b/test/unittests/api/interceptor-unittest.cc
-index 635bf6a0b72f8d49591be333b1314846c9c47269..416f9bd1eb4c59160eb03031e6011ae02dcf021e 100644
---- a/test/unittests/api/interceptor-unittest.cc
-+++ b/test/unittests/api/interceptor-unittest.cc
-@@ -174,8 +174,10 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
-   EXPECT_EQ(Run("obj.foo"), "named getter");
-   EXPECT_EQ(Run("obj[42]"), "indexed getter");
- 
--  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
--  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
-+  EXPECT_EQ(Run("obj.foo = null"),
-+            "named setter, named descriptor, named query");
-+  EXPECT_EQ(Run("obj[42] = null"),
-+            "indexed setter, indexed descriptor, indexed query");
- 
-   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
-             "named descriptor");
diff --git a/patches/pdfium/.patches b/patches/pdfium/.patches
index c8a647cdcb..9197edae4f 100644
--- a/patches/pdfium/.patches
+++ b/patches/pdfium/.patches
@@ -1,3 +1,2 @@
 m114_observe_cpwl_combobox_across_all_on_methods.patch
-m114_observe_widget_across_setoptionselection_calls.patch
 m114_always_check_return_code_from_cpwl_combobox_setpopup.patch
