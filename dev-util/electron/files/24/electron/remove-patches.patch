diff --git a/patches/chromium/cherry-pick-ea1cd76358e0.patch b/patches/chromium/cherry-pick-ea1cd76358e0.patch
index acf7507196..e6a96f2b17 100644
--- a/patches/chromium/cherry-pick-ea1cd76358e0.patch
+++ b/patches/chromium/cherry-pick-ea1cd76358e0.patch
@@ -45,39 +45,6 @@ index 7762464ba5eb84702021f8328e455e0d05e87b46..c5167c135a7e41705ac018d3aec568c6
  IN_PROC_BROWSER_TEST_P(WebViewTest, Shim_TestLoadDataAPI) {
    TestHelper("testLoadDataAPI", "web_view/shim", NEEDS_TEST_SERVER);
  
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-index 12c29cc718765d0f04b81430011569786587f677..c252e13563dff2660af1187ce3a16d5997f0679d 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/shim/main.js
-@@ -2868,6 +2868,20 @@ function testFindInMultipleWebViews() {
-       });
- }
- 
-+function testFindAfterTerminate() {
-+  let webview = new WebView();
-+  webview.src = 'data:text/html,<body><iframe></iframe></body>';
-+  webview.addEventListener('loadstop', () => {
-+    webview.find('A');
-+    webview.terminate();
-+    webview.find('B', {'backward': true});
-+    webview.find('B', {'backward': true}, (results) => {
-+      embedder.test.succeed();
-+    });
-+  });
-+  document.body.appendChild(webview);
-+}
-+
- function testLoadDataAPI() {
-   var webview = new WebView();
-   webview.src = 'about:blank';
-@@ -3644,6 +3658,7 @@ embedder.test.testList = {
-   'testFindAPI': testFindAPI,
-   'testFindAPI_findupdate': testFindAPI_findupdate,
-   'testFindInMultipleWebViews': testFindInMultipleWebViews,
-+  'testFindAfterTerminate': testFindAfterTerminate,
-   'testLoadDataAPI': testLoadDataAPI,
-   'testLoadDataAPIAccessibleResources': testLoadDataAPIAccessibleResources,
-   'testResizeEvents': testResizeEvents,
 diff --git a/extensions/browser/guest_view/web_view/web_view_find_helper.cc b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
 index 0913a8f3da48420c6b0fd328d37268ca5b0e6e63..3e70549084be8537198996c07d2f61c6308ad893 100644
 --- a/extensions/browser/guest_view/web_view/web_view_find_helper.cc
diff --git a/patches/v8/cherry-pick-9c6dfc733fce.patch b/patches/v8/cherry-pick-9c6dfc733fce.patch
index 7011943f57..6b65f781bc 100644
--- a/patches/v8/cherry-pick-9c6dfc733fce.patch
+++ b/patches/v8/cherry-pick-9c6dfc733fce.patch
@@ -131,20 +131,3 @@ index 26a8d59b34e99ca110479b3f3211e298d1ecbcc4..0907a4b3444d10ce22c16de1a5ecbdb5
            if (!CheckContextualStoreToJSGlobalObject(&own_lookup,
                                                      should_throw)) {
              return Nothing<bool>();
-diff --git a/test/unittests/api/interceptor-unittest.cc b/test/unittests/api/interceptor-unittest.cc
-index 635bf6a0b72f8d49591be333b1314846c9c47269..416f9bd1eb4c59160eb03031e6011ae02dcf021e 100644
---- a/test/unittests/api/interceptor-unittest.cc
-+++ b/test/unittests/api/interceptor-unittest.cc
-@@ -174,8 +174,10 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
-   EXPECT_EQ(Run("obj.foo"), "named getter");
-   EXPECT_EQ(Run("obj[42]"), "indexed getter");
- 
--  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
--  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
-+  EXPECT_EQ(Run("obj.foo = null"),
-+            "named setter, named descriptor, named query");
-+  EXPECT_EQ(Run("obj[42] = null"),
-+            "indexed setter, indexed descriptor, indexed query");
- 
-   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
-             "named descriptor");
diff --git a/patches/chromium/cherry-pick-85beff6fd302.patch b/patches/chromium/cherry-pick-85beff6fd302.patch
index 5c02963a69..b902927ce4 100644
--- a/patches/chromium/cherry-pick-85beff6fd302.patch
+++ b/patches/chromium/cherry-pick-85beff6fd302.patch
@@ -60,75 +60,6 @@ index c5167c135a7e41705ac018d3aec568c65fdcb0dc..bdfbf5c75a4275d4a395ff182cbfeda3
  IN_PROC_BROWSER_TEST_P(WebViewTest, ContextMenuInspectElement) {
    LoadAppWithGuest("web_view/context_menus/basic");
    content::RenderFrameHost* guest_rfh = GetGuestRenderFrameHost();
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-index 900911f4963d23d74225868dce01326ba533f63a..4dd25d8849b0b13957ab7fa2912c0a158d3cd244 100644
---- a/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/embedder.js
-@@ -34,6 +34,9 @@ embedder.setUp_ = function(config) {
-   embedder.guestWithLinkURL = embedder.baseGuestURL +
-       '/extensions/platform_apps/web_view/newwindow' +
-       '/guest_with_link.html';
-+  embedder.guestOpenOnLoadURL = embedder.baseGuestURL +
-+      '/extensions/platform_apps/web_view/newwindow' +
-+      '/guest_opener_open_on_load.html';
- };
- 
- /** @private */
-@@ -652,6 +655,24 @@ function testNewWindowDeferredAttachmentIndefinitely() {
-   embedder.setUpNewWindowRequest_(webview, 'guest.html', '', testName);
- }
- 
-+// This is not a test in and of itself, but a means of creating a webview that
-+// is left in an unattached state while its opener webview is also in an
-+// unattached state, so that the C++ side can test it in that state.
-+function testDestroyOpenerBeforeAttachment() {
-+  embedder.test.succeed();
-+
-+  let webview = new WebView();
-+  webview.src = embedder.guestOpenOnLoadURL;
-+  document.body.appendChild(webview);
-+
-+  // By spinning forever here, we prevent `webview` from completing the
-+  // attachment process. But since the guest is still created and it calls
-+  // window.open, we have a situation where two unattached webviews have an
-+  // opener relationship. The C++ side will test that we can shutdown safely in
-+  // this case.
-+  while (true) {}
-+}
-+
- embedder.test.testList = {
-   'testNewWindowAttachAfterOpenerDestroyed':
-       testNewWindowAttachAfterOpenerDestroyed,
-@@ -675,7 +696,9 @@ embedder.test.testList = {
-       testNewWindowWebViewNameTakesPrecedence,
-   'testNewWindowAndUpdateOpener': testNewWindowAndUpdateOpener,
-   'testNewWindowDeferredAttachmentIndefinitely':
--      testNewWindowDeferredAttachmentIndefinitely
-+      testNewWindowDeferredAttachmentIndefinitely,
-+  'testDestroyOpenerBeforeAttachment':
-+      testDestroyOpenerBeforeAttachment
- };
- 
- onload = function() {
-diff --git a/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-new file mode 100644
-index 0000000000000000000000000000000000000000..e961feb3c6487066801adf414bf4a2746c50a3f6
---- /dev/null
-+++ b/chrome/test/data/extensions/platform_apps/web_view/newwindow/guest_opener_open_on_load.html
-@@ -0,0 +1,13 @@
-+<!--
-+Copyright 2023 The Chromium Authors
-+Use of this source code is governed by a BSD-style license that can be
-+found in the LICENSE file.
-+-->
-+<html>
-+<body>
-+<script>
-+  // A guest that opens a new window on load.
-+  window.open('guest.html');
-+</script>
-+</body>
-+</html>
 diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
 index 6b18dc43962386c11c9b656a0f74ae6867b50cd4..eecc03787430cfdbbf1804ebb5245fd6abf731db 100644
 --- a/components/guest_view/browser/guest_view_manager.cc
