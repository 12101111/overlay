diff --git a/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch b/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
index ef21a6277..a36fd1e2d 100644
--- a/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
+++ b/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
@@ -217,53 +217,3 @@ index 0622d1d59317754fb0696ab4918740a434e6eaa6..10f759dca7775c189bf692f1743b196a
    extensions.push_back(extension.Substring(1));
    return true;
  }
-diff --git a/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js b/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-index e8f0d3f540485120cd15d642b1b0d33110797098..d1dabf37da8305094bf7e0bd0fea4e0200d8dd2e 100644
---- a/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-+++ b/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-@@ -80,9 +80,39 @@ function define_file_picker_error_tests(showPickerMethod) {
-       showPickerMethod +
-           ': MIME type can\'t have invalid characters in subtype.');
- 
--  promise_test(async t => {
--    await promise_rejects_js(t, TypeError, self[showPickerMethod]({
--                               types: [{accept: {'text/plain': ['.txt', 'txt']}}]
--                             }));
--  }, showPickerMethod + ': extension has to start with ".".');
-+  const invalid_extensions = {
-+    '.extensiontoolong': 'extension length more than 16.',
-+    '.txt.': 'extenstion ends with "."',
-+    'txt': 'extenstion does not start with "."',
-+    '.$txt' : 'illegal character "$"',
-+    '.t<xt': 'illegal character "<"',
-+    '.t/xt': 'illegal character "\"',
-+    '.\txt': 'illegal character "/"',
-+    '.txt\\': 'illegal characters "\\"',
-+    '.txt?': 'illegal character "?"',
-+    '.txt*': 'illegal character "*"',
-+    '.{txt': 'illegal character "{"',
-+    '.}txt': 'illegal character "}"',
-+    ' .txt': 'illegal whitespace at front of extension',
-+    '. txt': 'illegal whitespace in extension',
-+    '.txt ': 'illegal whitespace at end of extension',
-+    '.\u202etxt\u202e' : 'illegal RTL character',
-+    '.t\u00E6xt': 'non-ASCII character "æ"',
-+    '.קום': 'non-ASCII character "קום"',
-+    '.txt🙂': 'non-ASCII character "🙂"',
-+    '.{txt}': 'illegal characters "{" and "}"',
-+  }
-+
-+  for (const [extension, description] of Object.entries(invalid_extensions)) {
-+    define_file_picker_extension_error_test(showPickerMethod, extension, description)
-+  }
- }
-+
-+function define_file_picker_extension_error_test(showPickerMethod, extension, description) {
-+  promise_test(async t => {
-+    await promise_rejects_js(
-+      t, TypeError,
-+      self[showPickerMethod](
-+        { types: [{ accept: { 'text/plain': ['.txt', extension] } }] }));
-+  }, showPickerMethod + ': invalid extension "' + extension + '". ' + description + ".");
-+}
-\ No newline at end of file
diff --git a/patches/v8/cherry-pick-36abafa0a316.patch b/patches/v8/cherry-pick-36abafa0a316.patch
index cf9b3e982..28507d066 100644
--- a/patches/v8/cherry-pick-36abafa0a316.patch
+++ b/patches/v8/cherry-pick-36abafa0a316.patch
@@ -51,21 +51,3 @@ index b34076025f07ff5b4fadb8800c44acefa5480d19..d9abe45124f176d9ea7ab931a8247fbb
  
    uint32_t* transfer_entry = array_buffer_transfer_map_.Find(array_buffer);
    if (transfer_entry) {
-diff --git a/test/mjsunit/wasm/worker-memory.js b/test/mjsunit/wasm/worker-memory.js
-index c5b99ede7e28364bbbe31165dfd8b8449a718137..bf5430f7139815c229e641eb6d40725b066035c5 100644
---- a/test/mjsunit/wasm/worker-memory.js
-+++ b/test/mjsunit/wasm/worker-memory.js
-@@ -11,6 +11,13 @@
-   assertThrows(() => worker.postMessage(memory), Error);
- })();
- 
-+(function TestPostMessageUnsharedMemoryBuffer() {
-+  let worker = new Worker('', {type: 'string'});
-+  let memory = new WebAssembly.Memory({initial: 1, maximum: 2});
-+
-+  assertThrows(() => worker.postMessage(memory.buffer), Error);
-+})();
-+
- // Can't use assert in a worker.
- let workerHelpers =
-   `function assertTrue(value, msg) {
diff --git a/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch b/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
index 49ce81c6b..db5a37dfe 100644
--- a/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
+++ b/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
@@ -31,39 +31,3 @@ index c2b4d402eedc417f49137a1a670e08042f643d4e..a225bac2b73f3fe61e611aaca19c1293
            // Replace the current pc on the stack with the trampoline.
            // TODO(v8:10026): avoid replacing a signed pointer.
            Address* pc_addr = it.frame()->pc_address();
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index b95bc697604b983a4d48a0899776290bbe3720bf..277b48fc66c4024d9bea8c8dc1e6c2e36669f55c 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -81,6 +81,10 @@
-   # https://crbug.com/1129854
-   'tools/log': ['arch == arm or arch == arm64', SKIP],
- 
-+  # crbug.com/1161357
-+  # TODO(solanes): Remove this entry once the underlying issue is fixed.
-+  'regress/regress-1161357': [PASS, FAIL],
-+
-   ##############################################################################
-   # Tests where variants make no sense.
-   'd8/enable-tracing': [PASS, NO_VARIANTS],
-diff --git a/test/mjsunit/regress/regress-1161357.js b/test/mjsunit/regress/regress-1161357.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..b6f03b92ac970f1f24c8e6aa03b27e849d2ae7bc
---- /dev/null
-+++ b/test/mjsunit/regress/regress-1161357.js
-@@ -0,0 +1,15 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+for (let i = 0; i < 3; i++) {
-+  for (let j = 0; j < 32767; j++) {
-+    Number;
-+  }
-+  for (let j = 0; j < 2335; j++) {
-+    Number;
-+  }
-+  var arr = [, ...(new Int16Array(0xffff)), 4294967296];
-+  arr.concat(Number, arr)
-+}
-+eval(``);
diff --git a/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch b/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
index f1004a7a0..732e33cb6 100644
--- a/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
+++ b/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
@@ -34,43 +34,3 @@ index 6b29add333e31e51eb8c63e41baf9f88300b9548..406a3966fe776731c6499ab55ee5883d
        break;
      }
      case Call::SUPER_CALL:
-diff --git a/test/mjsunit/regress/regress-crbug-1038178.js b/test/mjsunit/regress/regress-crbug-1038178.js
-index 0362f69bcda3ad1807d70de04b31deb8eea13af6..3a84066b837d514bffa5e96c6aca060f85232e02 100644
---- a/test/mjsunit/regress/regress-crbug-1038178.js
-+++ b/test/mjsunit/regress/regress-crbug-1038178.js
-@@ -15,7 +15,7 @@ function opt(){
-     (((function(){})())?.v)()
- }
- %PrepareFunctionForOptimization(opt)
--assertThrows(opt());
--assertThrows(opt());
-+assertThrows(() => opt());
-+assertThrows(() => opt());
- %OptimizeFunctionOnNextCall(opt)
--assertThrows(opt());
-+assertThrows(() => opt());
-diff --git a/test/mjsunit/regress/regress-crbug-1171954.js b/test/mjsunit/regress/regress-crbug-1171954.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..94fbb329bc47b4885d87d3e570a05e02909321c7
---- /dev/null
-+++ b/test/mjsunit/regress/regress-crbug-1171954.js
-@@ -0,0 +1,19 @@
-+// Copyright 2021 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --always-opt
-+
-+// This causes the register used by the call in the later try-catch block to be
-+// used by the ToName conversion for null which causes a DCHECK fail when
-+// compiling. If register allocation changes, this test may no longer reproduce
-+// the crash but it is not easy write a proper test because it is linked to
-+// register allocation. This test should always work, so shouldn't cause any
-+// flakes.
-+try {
-+  var { [null]: __v_12, } = {};
-+} catch (e) {}
-+
-+try {
-+  assertEquals((__v_40?.o?.m)().p);
-+} catch (e) {}
diff --git a/patches/v8/regexp_throw_when_length_of_text_nodes_in_alternatives_is_too.patch b/patches/v8/regexp_throw_when_length_of_text_nodes_in_alternatives_is_too.patch
index 7f8909927..87326844f 100644
--- a/patches/v8/regexp_throw_when_length_of_text_nodes_in_alternatives_is_too.patch
+++ b/patches/v8/regexp_throw_when_length_of_text_nodes_in_alternatives_is_too.patch
@@ -54,13 +54,3 @@ index ce1197a55bc4c9f360423c246e906a92ca60afcc..acf24b9f60a9fbd78bb8397e3b9eee86
  }
  
  void LoopChoiceNode::AddLoopAlternative(GuardedAlternative alt) {
-diff --git a/test/mjsunit/regress/regress-1166138.js b/test/mjsunit/regress/regress-1166138.js
-index b1a5d6b7bb8651cce349fd1685ff76d6379e10e3..f3e4bde83e2769666512d6eda34aca46fbbf17d8 100644
---- a/test/mjsunit/regress/regress-1166138.js
-+++ b/test/mjsunit/regress/regress-1166138.js
-@@ -4,4 +4,4 @@
- 
- let badregexp =  "(?:" +  " ".repeat(32768*2)+  ")*";
- reg = RegExp(badregexp);
--reg.test()
-+assertThrows(() => reg.test(), SyntaxError);
diff --git a/patches/v8/reland_regexp_hard-crash_on_invalid_offsets_in.patch b/patches/v8/reland_regexp_hard-crash_on_invalid_offsets_in.patch
index 083cd5632..d1f6b2036 100644
--- a/patches/v8/reland_regexp_hard-crash_on_invalid_offsets_in.patch
+++ b/patches/v8/reland_regexp_hard-crash_on_invalid_offsets_in.patch
@@ -97,30 +97,3 @@ index 9c4b6057c23d318e78278cd1dd550bd51f20ca09..6307a802d9408309fe6e04e94a240919
    // Bytecode buffer.
    int length();
    void Copy(byte* a);
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index 277b48fc66c4024d9bea8c8dc1e6c2e36669f55c..75628071ba68b696eafb5398215439519870b354 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -78,6 +78,9 @@
-   'wasm/shared-memory-worker-explicit-gc-stress': [PASS, SLOW],
-   'wasm/shared-memory-worker-gc-stress': [PASS, SLOW],
- 
-+  # https://crbug.com/1166138
-+  'regress/regress-1166138': SKIP,
-+
-   # https://crbug.com/1129854
-   'tools/log': ['arch == arm or arch == arm64', SKIP],
- 
-diff --git a/test/mjsunit/regress/regress-1166138.js b/test/mjsunit/regress/regress-1166138.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..b1a5d6b7bb8651cce349fd1685ff76d6379e10e3
---- /dev/null
-+++ b/test/mjsunit/regress/regress-1166138.js
-@@ -0,0 +1,7 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+let badregexp =  "(?:" +  " ".repeat(32768*2)+  ")*";
-+reg = RegExp(badregexp);
-+reg.test()
diff --git a/patches/chromium/cherry-pick-93ce5606cd9a.patch b/patches/chromium/cherry-pick-93ce5606cd9a.patch
index 035f85512..8a441d0f5 100644
--- a/patches/chromium/cherry-pick-93ce5606cd9a.patch
+++ b/patches/chromium/cherry-pick-93ce5606cd9a.patch
@@ -129,11 +129,3 @@ index a74382f01612d53d39b8972bd21a49e26bac980a..732ea48c6d7b62d2fcc715a33dec009e
      // Check that the current RenderFrameHost has stopped loading.
      EXPECT_FALSE(root->child_at(0)->current_frame_host()->is_loading());
  
-diff --git a/third_party/blink/web_tests/http/tests/security/XFrameOptions/x-frame-options-deny-delete-frame-in-load-event-expected.txt b/third_party/blink/web_tests/http/tests/security/XFrameOptions/x-frame-options-deny-delete-frame-in-load-event-expected.txt
-index f2e5b68c997ca33da841aa7ba5795ef3b96fa02f..f7eea4a189ae8913921444428e26389dfd4de4da 100644
---- a/third_party/blink/web_tests/http/tests/security/XFrameOptions/x-frame-options-deny-delete-frame-in-load-event-expected.txt
-+++ b/third_party/blink/web_tests/http/tests/security/XFrameOptions/x-frame-options-deny-delete-frame-in-load-event-expected.txt
-@@ -1,2 +1,2 @@
--CONSOLE ERROR: Refused to display 'http://127.0.0.1:8000/security/XFrameOptions/resources/x-frame-options-deny.cgi' in a frame because it set 'X-Frame-Options' to 'deny'.
-+CONSOLE ERROR: Refused to display 'http://127.0.0.1:8000/' in a frame because it set 'X-Frame-Options' to 'deny'.
- Test that if an iframe is denied, we don't crash if the load event detaches the frame.
diff --git a/patches/chromium/cherry-pick-e1505713dc31.patch b/patches/chromium/cherry-pick-e1505713dc31.patch
index 5c6ade8ba..ef3e4d6e2 100644
--- a/patches/chromium/cherry-pick-e1505713dc31.patch
+++ b/patches/chromium/cherry-pick-e1505713dc31.patch
@@ -323,125 +323,3 @@ index 727caa18bacb3b35a8b97e418bb173ae7ac4fd03..351917da34031171175c0e961b79d2a6
          ResourceFetchRestriction::kOnlyDataUrls);
      auto* style_sheet_contents =
          MakeGarbageCollected<StyleSheetContents>(parser_context);
-diff --git a/third_party/blink/web_tests/TestExpectations b/third_party/blink/web_tests/TestExpectations
-index d2e5595ab8e78ff08c18adeb13911877482cde7b..d7b198add4ffb021613109a0f42afa50a7916b3a 100644
---- a/third_party/blink/web_tests/TestExpectations
-+++ b/third_party/blink/web_tests/TestExpectations
-@@ -2978,6 +2978,7 @@ crbug.com/1131471 external/wpt/web-locks/clientids.tentative.https.html [ Failur
- # See also crbug.com/920100 (sheriff 2019-01-09).
- crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/external-stylesheet.html [ Timeout Failure ]
- crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/inline-style.html [ Timeout Failure ]
-+crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/inline-style-with-differentorigin-base-tag.tentative.html [ Timeout Failure ]
- crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/internal-stylesheet.html [ Timeout Failure ]
- crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/presentation-attribute.html [ Timeout Failure ]
- crbug.com/626703 external/wpt/referrer-policy/css-integration/svg/processing-instruction.html [ Timeout Failure ]
-diff --git a/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/image/inline-style-with-differentorigin-base-tag.tentative.html b/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/image/inline-style-with-differentorigin-base-tag.tentative.html
-new file mode 100644
-index 0000000000000000000000000000000000000000..091afd832ab35a76136b4242df1c1ec73aee109d
---- /dev/null
-+++ b/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/image/inline-style-with-differentorigin-base-tag.tentative.html
-@@ -0,0 +1,45 @@
-+<!DOCTYPE html>
-+<title>CSS integration - image from inline style from document with base tag</title>
-+<link rel="help" href="https://crbug.com/1158645" />
-+
-+<head>
-+  <meta name="referrer" content="origin">
-+</head>
-+
-+<script src="/resources/testharness.js"></script>
-+<script src="/resources/testharnessreport.js"></script>
-+<script src="/common/utils.js"></script>
-+<!-- Common global functions for referrer-policy tests. -->
-+<script src="/common/security-features/resources/common.sub.js"></script>
-+
-+<!-- This has to follow the <script> tags, or it will make the js files fail to load. -->
-+<base href="http://other-site.example" />
-+
-+<p>Check that resources from inline styles are loaded with
-+  the referrer and referrer policy from the document and, in
-+  particular, not with the different base URL set in the base tag.</p>
-+
-+<div class="styled"></div>
-+
-+<script>
-+  'use strict';
-+  promise_test(function(css_test) {
-+    var id = token();
-+    var css_url = location.protocol + "//www1." + location.hostname + ":" + location.port + "/common/security-features/subresource/image.py" + "?id=" + id;
-+    var img_url = css_url + "&report-headers";
-+
-+    var div = document.querySelector("div.styled");
-+    div.style = "content:url(" + css_url + ")";
-+    return timeoutPromise(css_test, 1000)
-+      .then(() => requestViaXhr(img_url))
-+      .then(function(message) {
-+        assert_own_property(message, "headers");
-+        assert_own_property(message, "referrer");
-+        assert_equals(message.referrer, location.origin + "/");
-+      });
-+  }, "Image from inline styles.");
-+</script>
-+
-+<div id="log"></div>
-+
-+</html>
-diff --git a/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/svg/inline-style-with-differentorigin-base-tag.tentative.html b/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/svg/inline-style-with-differentorigin-base-tag.tentative.html
-new file mode 100644
-index 0000000000000000000000000000000000000000..9a8bc6da418bc7302138daba8cf06cb449bd2dfe
---- /dev/null
-+++ b/third_party/blink/web_tests/external/wpt/referrer-policy/css-integration/svg/inline-style-with-differentorigin-base-tag.tentative.html
-@@ -0,0 +1,40 @@
-+<!DOCTYPE html>
-+<html>
-+
-+<head>
-+  <title>CSS integration - styling SVG from inline style on page with different-origin base tag</title>
-+  <script src="/resources/testharness.js"></script>
-+  <script src="/resources/testharnessreport.js"></script>
-+  <script src="/common/utils.js"></script>
-+  <!-- Common global functions for referrer-policy tests. -->
-+  <script src="/common/security-features/resources/common.sub.js"></script>
-+  <!-- Helper functions for referrer-policy css tests. -->
-+  <script src="/referrer-policy/css-integration/css-test-helper.js"></script>
-+  <meta name="referrer" content="origin">
-+</head>
-+
-+<base href="http://other-page.example/" />
-+
-+<body>
-+  <p>Check that resources from inline styles are loaded with
-+    the referrer and referrer policy from the document and, in
-+    particular, not from the document's overridden base URL.</p>
-+  <script>
-+    function setInlineStyle(test) {
-+      test.expected = location.origin + "/";
-+      let svg = createSvg();
-+      document.body.appendChild(svg);
-+      let element = svg.getElementsByTagName('path')[0];
-+      element.style = test.property + ": url(" + url_prefix + "svg.py?id=" +
-+        test.id + "#invalidFragment);";
-+    }
-+
-+    runSvgTests(svg_test_properties,
-+      "Styling SVG from inline styles",
-+      setInlineStyle);
-+  </script>
-+
-+  <div id="log"></div>
-+</body>
-+
-+</html>
-diff --git a/third_party/blink/web_tests/http/tests/css/resources/referrer-check.php b/third_party/blink/web_tests/http/tests/css/resources/referrer-check.php
-index 69483e01544c842f56a51d00d1b2ee5dc24b4162..7a517de692f418c3c8b365d0f7aefb9e585c9da0 100644
---- a/third_party/blink/web_tests/http/tests/css/resources/referrer-check.php
-+++ b/third_party/blink/web_tests/http/tests/css/resources/referrer-check.php
-@@ -31,7 +31,7 @@ $expectedReferrerPaths = array(
-     "document" => "/css/css-resources-referrer.html",
-     "sheet" => "/css/resources/css-resources-referrer.css",
-     "importedSheet" => "/css/resources/css-resources-referrer-import.css",
--    "iframe" => "/from/iframe.html"
-+    "iframe" => "/css/css-resources-referrer-srcdoc.html"
- );
- 
- $from = $_GET["from"];
diff --git a/patches/v8/merged_squashed_multiple_commits.patch b/patches/v8/merged_squashed_multiple_commits.patch
index fcc9652e4..dcf8ba3c2 100644
--- a/patches/v8/merged_squashed_multiple_commits.patch
+++ b/patches/v8/merged_squashed_multiple_commits.patch
@@ -80,123 +80,3 @@ index b4b158749381efcf780d5c8ba07c286be6ba6b30..047750ebbd454a5f3f1fce7bc06ac042
    // If property kind is not reconfigured merge the result with
    // representation/field type from the old descriptor.
    if (old_details.kind() == new_kind_) {
-diff --git a/test/cctest/test-field-type-tracking.cc b/test/cctest/test-field-type-tracking.cc
-index 2f59d7bff83a2c0aab8ae815ed0ac5e3825f4262..6b2b6dadf14ae836e11d7ff78108c99a10d38765 100644
---- a/test/cctest/test-field-type-tracking.cc
-+++ b/test/cctest/test-field-type-tracking.cc
-@@ -1081,20 +1081,31 @@ void TestReconfigureDataFieldAttribute_GeneralizeField(
-   Handle<Code> code_field_type = CreateDummyOptimizedCode(isolate);
-   Handle<Code> code_field_repr = CreateDummyOptimizedCode(isolate);
-   Handle<Code> code_field_const = CreateDummyOptimizedCode(isolate);
--  Handle<Map> field_owner(
--      map->FindFieldOwner(isolate, InternalIndex(kSplitProp)), isolate);
--  DependentCode::InstallDependency(isolate,
--                                   MaybeObjectHandle::Weak(code_field_type),
--                                   field_owner, DependentCode::kFieldTypeGroup);
--  DependentCode::InstallDependency(
--      isolate, MaybeObjectHandle::Weak(code_field_repr), field_owner,
--      DependentCode::kFieldRepresentationGroup);
--  DependentCode::InstallDependency(
--      isolate, MaybeObjectHandle::Weak(code_field_const), field_owner,
--      DependentCode::kFieldConstGroup);
-+  Handle<Code> code_src_field_const = CreateDummyOptimizedCode(isolate);
-+  {
-+    Handle<Map> field_owner(
-+        map->FindFieldOwner(isolate, InternalIndex(kSplitProp)), isolate);
-+    DependentCode::InstallDependency(
-+        isolate, MaybeObjectHandle::Weak(code_field_type), field_owner,
-+        DependentCode::kFieldTypeGroup);
-+    DependentCode::InstallDependency(
-+        isolate, MaybeObjectHandle::Weak(code_field_repr), field_owner,
-+        DependentCode::kFieldRepresentationGroup);
-+    DependentCode::InstallDependency(
-+        isolate, MaybeObjectHandle::Weak(code_field_const), field_owner,
-+        DependentCode::kFieldConstGroup);
-+  }
-+  {
-+    Handle<Map> field_owner(
-+        map2->FindFieldOwner(isolate, InternalIndex(kSplitProp)), isolate);
-+    DependentCode::InstallDependency(
-+        isolate, MaybeObjectHandle::Weak(code_src_field_const), field_owner,
-+        DependentCode::kFieldConstGroup);
-+  }
-   CHECK(!code_field_type->marked_for_deoptimization());
-   CHECK(!code_field_repr->marked_for_deoptimization());
-   CHECK(!code_field_const->marked_for_deoptimization());
-+  CHECK(!code_src_field_const->marked_for_deoptimization());
- 
-   // Reconfigure attributes of property |kSplitProp| of |map2| to NONE, which
-   // should generalize representations in |map1|.
-@@ -1102,10 +1113,21 @@ void TestReconfigureDataFieldAttribute_GeneralizeField(
-       Map::ReconfigureExistingProperty(isolate, map2, InternalIndex(kSplitProp),
-                                        kData, NONE, PropertyConstness::kConst);
- 
--  // |map2| should be left unchanged but marked unstable.
-+  // |map2| should be mosly left unchanged but marked unstable and if the
-+  // source property was constant it should also be transitioned to kMutable.
-   CHECK(!map2->is_stable());
-   CHECK(!map2->is_deprecated());
-   CHECK_NE(*map2, *new_map);
-+  // If the "source" property was const then update constness expectations for
-+  // "source" map and ensure the deoptimization dependency was triggered.
-+  if (to.constness == PropertyConstness::kConst) {
-+    expectations2.SetDataField(kSplitProp, READ_ONLY,
-+                               PropertyConstness::kMutable, to.representation,
-+                               to.type);
-+    CHECK(code_src_field_const->marked_for_deoptimization());
-+  } else {
-+    CHECK(!code_src_field_const->marked_for_deoptimization());
-+  }
-   CHECK(expectations2.Check(*map2));
- 
-   for (int i = kSplitProp; i < kPropCount; i++) {
-diff --git a/test/mjsunit/regress/regress-crbug-1161847-1.js b/test/mjsunit/regress/regress-crbug-1161847-1.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..282d9b878718105db40fee0283d15227fb724a3a
---- /dev/null
-+++ b/test/mjsunit/regress/regress-crbug-1161847-1.js
-@@ -0,0 +1,19 @@
-+// Copyright 2021 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+function foo(first_run) {
-+  let o = { x: 0 };
-+  if (first_run) assertTrue(%HasOwnConstDataProperty(o, 'x'));
-+  Object.defineProperty(o, 'x', { writable: false });
-+  delete o.x;
-+  o.x = 23;
-+  if (first_run) assertFalse(%HasOwnConstDataProperty(o, 'x'));
-+}
-+%PrepareFunctionForOptimization(foo);
-+foo(true);
-+foo(false);
-+%OptimizeFunctionOnNextCall(foo);
-+foo(false);
-diff --git a/test/mjsunit/regress/regress-crbug-1161847-2.js b/test/mjsunit/regress/regress-crbug-1161847-2.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..ec61fee068acea0ea259164816142a01851f3669
---- /dev/null
-+++ b/test/mjsunit/regress/regress-crbug-1161847-2.js
-@@ -0,0 +1,19 @@
-+// Copyright 2021 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+function foo(first_run) {
-+  let o = { x: 0 };
-+  if (first_run) assertTrue(%HasOwnConstDataProperty(o, 'x'));
-+  Object.defineProperty(o, 'x', { get() { return 1; }, configurable: true, enumerable: true });
-+  delete o.x;
-+  o.x = 23;
-+  if (first_run) assertFalse(%HasOwnConstDataProperty(o, 'x'));
-+}
-+%PrepareFunctionForOptimization(foo);
-+foo(true);
-+foo(false);
-+%OptimizeFunctionOnNextCall(foo);
-+foo(false);
diff --git a/patches/v8/m86-lts_squashed_multiple_commits.patch b/patches/v8/m86-lts_squashed_multiple_commits.patch
index 8f9a3f1c3..425747776 100644
--- a/patches/v8/m86-lts_squashed_multiple_commits.patch
+++ b/patches/v8/m86-lts_squashed_multiple_commits.patch
@@ -103,197 +103,3 @@ index 51b9caef8b3531804f8aa615a4c612c1c2bdf34d..37ac3dd1063a0a750bed4340c360ff7e
    return AddDataProperty(&own_lookup, value, NONE, should_throw, store_origin);
  }
  
-diff --git a/test/cctest/test-api-interceptors.cc b/test/cctest/test-api-interceptors.cc
-index 812768b461a471075becd83c7c9481d12191ff51..05edb1fdd4c4a3aa21e618269a1a8ad0822788e6 100644
---- a/test/cctest/test-api-interceptors.cc
-+++ b/test/cctest/test-api-interceptors.cc
-@@ -877,9 +877,11 @@ THREADED_TEST(InterceptorHasOwnPropertyCausingGC) {
-   CHECK(!value->BooleanValue(isolate));
- }
- 
--static void CheckInterceptorIC(v8::GenericNamedPropertyGetterCallback getter,
--                               v8::GenericNamedPropertyQueryCallback query,
--                               const char* source, int expected) {
-+namespace {
-+
-+void CheckInterceptorIC(v8::GenericNamedPropertyGetterCallback getter,
-+                        v8::GenericNamedPropertyQueryCallback query,
-+                        const char* source, int expected) {
-   v8::Isolate* isolate = CcTest::isolate();
-   v8::HandleScope scope(isolate);
-   v8::Local<v8::ObjectTemplate> templ = ObjectTemplate::New(isolate);
-@@ -894,14 +896,13 @@ static void CheckInterceptorIC(v8::GenericNamedPropertyGetterCallback getter,
-   CHECK_EQ(expected, value->Int32Value(context.local()).FromJust());
- }
- 
--static void CheckInterceptorLoadIC(
--    v8::GenericNamedPropertyGetterCallback getter, const char* source,
--    int expected) {
-+void CheckInterceptorLoadIC(v8::GenericNamedPropertyGetterCallback getter,
-+                            const char* source, int expected) {
-   CheckInterceptorIC(getter, nullptr, source, expected);
- }
- 
--static void InterceptorLoadICGetter(
--    Local<Name> name, const v8::PropertyCallbackInfo<v8::Value>& info) {
-+void InterceptorLoadICGetter(Local<Name> name,
-+                             const v8::PropertyCallbackInfo<v8::Value>& info) {
-   ApiTestFuzzer::Fuzz();
-   v8::Isolate* isolate = CcTest::isolate();
-   CHECK_EQ(isolate, info.GetIsolate());
-@@ -911,6 +912,7 @@ static void InterceptorLoadICGetter(
-   info.GetReturnValue().Set(v8::Integer::New(isolate, 42));
- }
- 
-+}  // namespace
- 
- // This test should hit the load IC for the interceptor case.
- THREADED_TEST(InterceptorLoadIC) {
-@@ -927,9 +929,23 @@ THREADED_TEST(InterceptorLoadIC) {
- // configurations of interceptor and explicit fields works fine
- // (those cases are special cased to get better performance).
- 
--static void InterceptorLoadXICGetter(
-+namespace {
-+
-+void InterceptorLoadXICGetter(Local<Name> name,
-+                              const v8::PropertyCallbackInfo<v8::Value>& info) {
-+  ApiTestFuzzer::Fuzz();
-+  info.GetReturnValue().Set(
-+      v8_str("x")
-+              ->Equals(info.GetIsolate()->GetCurrentContext(), name)
-+              .FromJust()
-+          ? v8::Local<v8::Value>(v8::Integer::New(info.GetIsolate(), 42))
-+          : v8::Local<v8::Value>());
-+}
-+
-+void InterceptorLoadXICGetterWithSideEffects(
-     Local<Name> name, const v8::PropertyCallbackInfo<v8::Value>& info) {
-   ApiTestFuzzer::Fuzz();
-+  CompileRun("interceptor_getter_side_effect()");
-   info.GetReturnValue().Set(
-       v8_str("x")
-               ->Equals(info.GetIsolate()->GetCurrentContext(), name)
-@@ -938,6 +954,7 @@ static void InterceptorLoadXICGetter(
-           : v8::Local<v8::Value>());
- }
- 
-+}  // namespace
- 
- THREADED_TEST(InterceptorLoadICWithFieldOnHolder) {
-   CheckInterceptorLoadIC(InterceptorLoadXICGetter,
-@@ -1461,6 +1478,18 @@ void HasICQueryToggle(TKey name,
-       isolate, toggle ? v8::internal::ABSENT : v8::internal::NONE));
- }
- 
-+template <typename TKey, v8::internal::PropertyAttributes attribute>
-+void HasICQuerySideEffect(TKey name,
-+                          const v8::PropertyCallbackInfo<v8::Integer>& info) {
-+  ApiTestFuzzer::Fuzz();
-+  v8::Isolate* isolate = CcTest::isolate();
-+  CHECK_EQ(isolate, info.GetIsolate());
-+  CompileRun("interceptor_query_side_effect()");
-+  if (attribute != v8::internal::ABSENT) {
-+    info.GetReturnValue().Set(v8::Integer::New(isolate, attribute));
-+  }
-+}
-+
- int named_query_counter = 0;
- void NamedQueryCallback(Local<Name> name,
-                         const v8::PropertyCallbackInfo<v8::Integer>& info) {
-@@ -1526,6 +1555,42 @@ THREADED_TEST(InterceptorHasICQueryToggle) {
-                      500);
- }
- 
-+THREADED_TEST(InterceptorStoreICWithSideEffectfulCallbacks) {
-+  CheckInterceptorIC(EmptyInterceptorGetter,
-+                     HasICQuerySideEffect<Local<Name>, v8::internal::ABSENT>,
-+                     "let r;"
-+                     "let inside_side_effect = false;"
-+                     "let interceptor_query_side_effect = function() {"
-+                     "  if (!inside_side_effect) {"
-+                     "    inside_side_effect = true;"
-+                     "    r.x = 153;"
-+                     "    inside_side_effect = false;"
-+                     "  }"
-+                     "};"
-+                     "for (var i = 0; i < 20; i++) {"
-+                     "  r = { __proto__: o };"
-+                     "  r.x = i;"
-+                     "}",
-+                     19);
-+
-+  CheckInterceptorIC(InterceptorLoadXICGetterWithSideEffects,
-+                     nullptr,  // query callback is not provided
-+                     "let r;"
-+                     "let inside_side_effect = false;"
-+                     "let interceptor_getter_side_effect = function() {"
-+                     "  if (!inside_side_effect) {"
-+                     "    inside_side_effect = true;"
-+                     "    r.y = 153;"
-+                     "    inside_side_effect = false;"
-+                     "  }"
-+                     "};"
-+                     "for (var i = 0; i < 20; i++) {"
-+                     "  r = { __proto__: o };"
-+                     "  r.y = i;"
-+                     "}",
-+                     19);
-+}
-+
- static void InterceptorStoreICSetter(
-     Local<Name> key, Local<Value> value,
-     const v8::PropertyCallbackInfo<v8::Value>& info) {
-@@ -1575,6 +1640,52 @@ THREADED_TEST(InterceptorStoreICWithNoSetter) {
-   CHECK_EQ(239 + 42, value->Int32Value(context.local()).FromJust());
- }
- 
-+THREADED_TEST(EmptyInterceptorDoesNotShadowReadOnlyProperty) {
-+  // Interceptor should not shadow readonly property 'x' on the prototype, and
-+  // attempt to store to 'x' must throw.
-+  CheckInterceptorIC(EmptyInterceptorGetter,
-+                     HasICQuery<Local<Name>, v8::internal::ABSENT>,
-+                     "'use strict';"
-+                     "let p = {};"
-+                     "Object.defineProperty(p, 'x', "
-+                     "                      {value: 153, writable: false});"
-+                     "o.__proto__ = p;"
-+                     "let result = 0;"
-+                     "let r;"
-+                     "for (var i = 0; i < 20; i++) {"
-+                     "  r = { __proto__: o };"
-+                     "  try {"
-+                     "    r.x = i;"
-+                     "  } catch (e) {"
-+                     "    result++;"
-+                     "  }"
-+                     "}"
-+                     "result",
-+                     20);
-+}
-+
-+THREADED_TEST(InterceptorShadowsReadOnlyProperty) {
-+  // Interceptor claims that it has a writable property 'x', so the existence
-+  // of the readonly property 'x' on the prototype should not cause exceptions.
-+  CheckInterceptorIC(InterceptorLoadXICGetter,
-+                     nullptr,  // query callback
-+                     "'use strict';"
-+                     "let p = {};"
-+                     "Object.defineProperty(p, 'x', "
-+                     "                      {value: 153, writable: false});"
-+                     "o.__proto__ = p;"
-+                     "let result = 0;"
-+                     "let r;"
-+                     "for (var i = 0; i < 20; i++) {"
-+                     "  r = { __proto__: o };"
-+                     "  try {"
-+                     "    r.x = i;"
-+                     "    result++;"
-+                     "  } catch (e) {}"
-+                     "}"
-+                     "result",
-+                     20);
-+}
- 
- THREADED_TEST(EmptyInterceptorDoesNotShadowAccessors) {
-   v8::HandleScope scope(CcTest::isolate());
diff --git a/patches/v8/cherry-pick-fd9ce58ecd13.patch b/patches/v8/cherry-pick-fd9ce58ecd13.patch
index 22eae1f236..7e2cf6f4be 100644
--- a/patches/v8/cherry-pick-fd9ce58ecd13.patch
+++ b/patches/v8/cherry-pick-fd9ce58ecd13.patch
@@ -58,50 +58,3 @@ index 399fa4c4093450db89309d5aff680a2613614192..bd948cd8ac1c1492df191b63b83298fb
    InjectedScript::ObjectScope scope(m_session, functionObjectId);
    Response response = scope.initialize();
    if (!response.IsSuccess()) return response;
-diff --git a/test/inspector/debugger/set-breakpoint-before-enabling-expected.txt b/test/inspector/debugger/set-breakpoint-before-enabling-expected.txt
-index 02bfe0d80cdecd96d37988d9d6850b49c5d7e39d..a85aab6fe0c71f3346fe79694d1a334e2cb12fb2 100644
---- a/test/inspector/debugger/set-breakpoint-before-enabling-expected.txt
-+++ b/test/inspector/debugger/set-breakpoint-before-enabling-expected.txt
-@@ -1,7 +1,13 @@
- Tests that setting breakpoint before enabling debugger produces an error
--setBreakpointByUrl error: undefined
-+setBreakpointByUrl error: {
-+  "code": -32000,
-+  "message": "Debugger agent is not enabled"
-+}
- setBreakpoint error: {
--  "code": -32602,
--  "message": "Invalid parameters",
--  "data": "Failed to deserialize params.location - BINDINGS: mandatory field missing at <some position>"
-+  "code": -32000,
-+  "message": "Debugger agent is not enabled"
-+}
-+setBreakpointOnFunctionCall error: {
-+  "code": -32000,
-+  "message": "Debugger agent is not enabled"
- }
-diff --git a/test/inspector/debugger/set-breakpoint-before-enabling.js b/test/inspector/debugger/set-breakpoint-before-enabling.js
-index 5af1085c8747089dea15550949130b8ea243b524..4401466a921692bbe94b52e60083d92769407ee3 100644
---- a/test/inspector/debugger/set-breakpoint-before-enabling.js
-+++ b/test/inspector/debugger/set-breakpoint-before-enabling.js
-@@ -10,12 +10,19 @@ function didSetBreakpointByUrlBeforeEnable(message)
- {
-   InspectorTest.log("setBreakpointByUrl error: " + JSON.stringify(
-       InspectorTest.trimErrorMessage(message).error, null, 2));
--  Protocol.Debugger.setBreakpoint().then(didSetBreakpointBeforeEnable);
-+  Protocol.Debugger.setBreakpoint({location: { scriptId: "4", lineNumber: 0, columnNumber: 0 }}).then(didSetBreakpointBeforeEnable);
- }
- 
- function didSetBreakpointBeforeEnable(message)
- {
-   InspectorTest.log("setBreakpoint error: " + JSON.stringify(
-       InspectorTest.trimErrorMessage(message).error, null, 2));
-+  Protocol.Debugger.setBreakpointOnFunctionCall({objectId: "4"}).then(didSetBreakpointOnFunctionCallBeforeEnable);
-+}
-+
-+function didSetBreakpointOnFunctionCallBeforeEnable(message)
-+{
-+  InspectorTest.log("setBreakpointOnFunctionCall error: " + JSON.stringify(
-+    InspectorTest.trimErrorMessage(message).error, null, 2));
-   InspectorTest.completeTest();
- }
