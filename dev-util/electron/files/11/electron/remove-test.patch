diff --git a/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch b/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
index ef21a6277..a36fd1e2d 100644
--- a/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
+++ b/patches/chromium/add_restrictions_to_allowed_extensions_for_file_system_access_api.patch
@@ -217,53 +217,3 @@ index 0622d1d59317754fb0696ab4918740a434e6eaa6..10f759dca7775c189bf692f1743b196a
    extensions.push_back(extension.Substring(1));
    return true;
  }
-diff --git a/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js b/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-index e8f0d3f540485120cd15d642b1b0d33110797098..d1dabf37da8305094bf7e0bd0fea4e0200d8dd2e 100644
---- a/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-+++ b/third_party/blink/web_tests/external/wpt/native-file-system/showPicker-errors.https.window.js
-@@ -80,9 +80,39 @@ function define_file_picker_error_tests(showPickerMethod) {
-       showPickerMethod +
-           ': MIME type can\'t have invalid characters in subtype.');
- 
--  promise_test(async t => {
--    await promise_rejects_js(t, TypeError, self[showPickerMethod]({
--                               types: [{accept: {'text/plain': ['.txt', 'txt']}}]
--                             }));
--  }, showPickerMethod + ': extension has to start with ".".');
-+  const invalid_extensions = {
-+    '.extensiontoolong': 'extension length more than 16.',
-+    '.txt.': 'extenstion ends with "."',
-+    'txt': 'extenstion does not start with "."',
-+    '.$txt' : 'illegal character "$"',
-+    '.t<xt': 'illegal character "<"',
-+    '.t/xt': 'illegal character "\"',
-+    '.\txt': 'illegal character "/"',
-+    '.txt\\': 'illegal characters "\\"',
-+    '.txt?': 'illegal character "?"',
-+    '.txt*': 'illegal character "*"',
-+    '.{txt': 'illegal character "{"',
-+    '.}txt': 'illegal character "}"',
-+    ' .txt': 'illegal whitespace at front of extension',
-+    '. txt': 'illegal whitespace in extension',
-+    '.txt ': 'illegal whitespace at end of extension',
-+    '.\u202etxt\u202e' : 'illegal RTL character',
-+    '.t\u00E6xt': 'non-ASCII character "æ"',
-+    '.קום': 'non-ASCII character "קום"',
-+    '.txt🙂': 'non-ASCII character "🙂"',
-+    '.{txt}': 'illegal characters "{" and "}"',
-+  }
-+
-+  for (const [extension, description] of Object.entries(invalid_extensions)) {
-+    define_file_picker_extension_error_test(showPickerMethod, extension, description)
-+  }
- }
-+
-+function define_file_picker_extension_error_test(showPickerMethod, extension, description) {
-+  promise_test(async t => {
-+    await promise_rejects_js(
-+      t, TypeError,
-+      self[showPickerMethod](
-+        { types: [{ accept: { 'text/plain': ['.txt', extension] } }] }));
-+  }, showPickerMethod + ': invalid extension "' + extension + '". ' + description + ".");
-+}
-\ No newline at end of file
diff --git a/patches/v8/cherry-pick-36abafa0a316.patch b/patches/v8/cherry-pick-36abafa0a316.patch
index cf9b3e982..28507d066 100644
--- a/patches/v8/cherry-pick-36abafa0a316.patch
+++ b/patches/v8/cherry-pick-36abafa0a316.patch
@@ -51,21 +51,3 @@ index b34076025f07ff5b4fadb8800c44acefa5480d19..d9abe45124f176d9ea7ab931a8247fbb
  
    uint32_t* transfer_entry = array_buffer_transfer_map_.Find(array_buffer);
    if (transfer_entry) {
-diff --git a/test/mjsunit/wasm/worker-memory.js b/test/mjsunit/wasm/worker-memory.js
-index c5b99ede7e28364bbbe31165dfd8b8449a718137..bf5430f7139815c229e641eb6d40725b066035c5 100644
---- a/test/mjsunit/wasm/worker-memory.js
-+++ b/test/mjsunit/wasm/worker-memory.js
-@@ -11,6 +11,13 @@
-   assertThrows(() => worker.postMessage(memory), Error);
- })();
- 
-+(function TestPostMessageUnsharedMemoryBuffer() {
-+  let worker = new Worker('', {type: 'string'});
-+  let memory = new WebAssembly.Memory({initial: 1, maximum: 2});
-+
-+  assertThrows(() => worker.postMessage(memory.buffer), Error);
-+})();
-+
- // Can't use assert in a worker.
- let workerHelpers =
-   `function assertTrue(value, msg) {
diff --git a/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch b/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
index 49ce81c6b..db5a37dfe 100644
--- a/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
+++ b/patches/v8/merged_deoptimizer_stricter_checks_during_deoptimization.patch
@@ -31,39 +31,3 @@ index c2b4d402eedc417f49137a1a670e08042f643d4e..a225bac2b73f3fe61e611aaca19c1293
            // Replace the current pc on the stack with the trampoline.
            // TODO(v8:10026): avoid replacing a signed pointer.
            Address* pc_addr = it.frame()->pc_address();
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index b95bc697604b983a4d48a0899776290bbe3720bf..277b48fc66c4024d9bea8c8dc1e6c2e36669f55c 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -81,6 +81,10 @@
-   # https://crbug.com/1129854
-   'tools/log': ['arch == arm or arch == arm64', SKIP],
- 
-+  # crbug.com/1161357
-+  # TODO(solanes): Remove this entry once the underlying issue is fixed.
-+  'regress/regress-1161357': [PASS, FAIL],
-+
-   ##############################################################################
-   # Tests where variants make no sense.
-   'd8/enable-tracing': [PASS, NO_VARIANTS],
-diff --git a/test/mjsunit/regress/regress-1161357.js b/test/mjsunit/regress/regress-1161357.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..b6f03b92ac970f1f24c8e6aa03b27e849d2ae7bc
---- /dev/null
-+++ b/test/mjsunit/regress/regress-1161357.js
-@@ -0,0 +1,15 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+for (let i = 0; i < 3; i++) {
-+  for (let j = 0; j < 32767; j++) {
-+    Number;
-+  }
-+  for (let j = 0; j < 2335; j++) {
-+    Number;
-+  }
-+  var arr = [, ...(new Int16Array(0xffff)), 4294967296];
-+  arr.concat(Number, arr)
-+}
-+eval(``);
diff --git a/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch b/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
index f1004a7a0..732e33cb6 100644
--- a/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
+++ b/patches/v8/merged_interpreter_store_accumulator_to_callee_after_optional.patch
@@ -34,43 +34,3 @@ index 6b29add333e31e51eb8c63e41baf9f88300b9548..406a3966fe776731c6499ab55ee5883d
        break;
      }
      case Call::SUPER_CALL:
-diff --git a/test/mjsunit/regress/regress-crbug-1038178.js b/test/mjsunit/regress/regress-crbug-1038178.js
-index 0362f69bcda3ad1807d70de04b31deb8eea13af6..3a84066b837d514bffa5e96c6aca060f85232e02 100644
---- a/test/mjsunit/regress/regress-crbug-1038178.js
-+++ b/test/mjsunit/regress/regress-crbug-1038178.js
-@@ -15,7 +15,7 @@ function opt(){
-     (((function(){})())?.v)()
- }
- %PrepareFunctionForOptimization(opt)
--assertThrows(opt());
--assertThrows(opt());
-+assertThrows(() => opt());
-+assertThrows(() => opt());
- %OptimizeFunctionOnNextCall(opt)
--assertThrows(opt());
-+assertThrows(() => opt());
-diff --git a/test/mjsunit/regress/regress-crbug-1171954.js b/test/mjsunit/regress/regress-crbug-1171954.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..94fbb329bc47b4885d87d3e570a05e02909321c7
---- /dev/null
-+++ b/test/mjsunit/regress/regress-crbug-1171954.js
-@@ -0,0 +1,19 @@
-+// Copyright 2021 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --always-opt
-+
-+// This causes the register used by the call in the later try-catch block to be
-+// used by the ToName conversion for null which causes a DCHECK fail when
-+// compiling. If register allocation changes, this test may no longer reproduce
-+// the crash but it is not easy write a proper test because it is linked to
-+// register allocation. This test should always work, so shouldn't cause any
-+// flakes.
-+try {
-+  var { [null]: __v_12, } = {};
-+} catch (e) {}
-+
-+try {
-+  assertEquals((__v_40?.o?.m)().p);
-+} catch (e) {}
