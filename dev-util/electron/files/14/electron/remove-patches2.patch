diff --git a/patches/v8/regexp_allow_reentrant_irregexp_execution.patch b/patches/v8/regexp_allow_reentrant_irregexp_execution.patch
index ad22469938..7778e78212 100644
--- a/patches/v8/regexp_allow_reentrant_irregexp_execution.patch
+++ b/patches/v8/regexp_allow_reentrant_irregexp_execution.patch
@@ -1720,17 +1720,3 @@ index c3a3cb90f2a9d865057af80801e2a95bbb873140..74a3c95b06c771078ab03e6787e59123
  
    // Labels used internally.
    Label entry_label_;
-diff --git a/test/cctest/cctest.status b/test/cctest/cctest.status
-index f9e2c5cd399b1787c6554d362699e8bf27c7e125..aa43443a13cb881d272caf53b72ff51e54e96cf8 100644
---- a/test/cctest/cctest.status
-+++ b/test/cctest/cctest.status
-@@ -139,9 +139,6 @@
-   'test-strings/Traverse': [PASS, HEAVY],
-   'test-swiss-name-dictionary-csa/DeleteAtBoundaries': [PASS, HEAVY],
-   'test-swiss-name-dictionary-csa/SameH2': [PASS, HEAVY],
--
--  # TODO(v8:11382): Reenable once irregexp is reentrant.
--  'test-regexp/RegExpInterruptReentrantExecution': [FAIL],
- }],  # ALWAYS
- 
- ##############################################################################
diff --git a/patches/chromium/cherry-pick-8af66de55aad.patch b/patches/chromium/cherry-pick-8af66de55aad.patch
index 67694bff4f..ca25c44209 100644
--- a/patches/chromium/cherry-pick-8af66de55aad.patch
+++ b/patches/chromium/cherry-pick-8af66de55aad.patch
@@ -110,17 +110,3 @@ index c60e3281ea96ef39e16034c88abf4c6c2a9bd2eb..f9434ae7a2c1066dd2c97f552ee572ca
        required_csp_ = value;
        DidChangeAttributes();
        UseCounter::Count(GetDocument(), WebFeature::kIFrameCSPAttribute);
-diff --git a/third_party/blink/web_tests/external/wpt/content-security-policy/embedded-enforcement/required_csp-header.html b/third_party/blink/web_tests/external/wpt/content-security-policy/embedded-enforcement/required_csp-header.html
-index a9ad787408786e594ccb554d2bd9186a9e8e7c1e..e0a31db8e28fb1a9d2884c7677597072d4badba2 100644
---- a/third_party/blink/web_tests/external/wpt/content-security-policy/embedded-enforcement/required_csp-header.html
-+++ b/third_party/blink/web_tests/external/wpt/content-security-policy/embedded-enforcement/required_csp-header.html
-@@ -59,6 +59,9 @@
-       { "name": "Wrong and dangerous value of `csp` should not trigger sending Sec-Required-CSP Header - report-to present",
-         "csp": "script-src 'unsafe-inline'; report-to resources/dummy-report.php",
-         "expected": null },
-+      { "name": "Sec-Required-CSP is not sent if `csp` attribute is longer than 4096 bytes",
-+        "csp": "style-src " + Array.from(Array(2044).keys()).map(i => 'a').join(' '),
-+        "expected":  null },
-     ];
- 
-     tests.forEach(test => {
diff --git a/patches/v8/merge_inspector_use_ephemeron_table_for_exception_metadata.patch b/patches/v8/merge_inspector_use_ephemeron_table_for_exception_metadata.patch
index 28d8e27858..6da4ed533a 100644
--- a/patches/v8/merge_inspector_use_ephemeron_table_for_exception_metadata.patch
+++ b/patches/v8/merge_inspector_use_ephemeron_table_for_exception_metadata.patch
@@ -306,74 +306,3 @@ index e1607f88c0e6591d748d0c82634e327d2bbebad7..e6e4cde61c5845cac95d058b36126063
    int m_capturingStackTracesCount;
    unsigned m_lastExceptionId;
    int m_lastContextId;
-diff --git a/test/cctest/test-debug.cc b/test/cctest/test-debug.cc
-index 2effdabc1dbd0e993971fe175b2483a9e555d0dd..30c6b2674901a0004b773ae0f0204d83b1964697 100644
---- a/test/cctest/test-debug.cc
-+++ b/test/cctest/test-debug.cc
-@@ -594,10 +594,11 @@ TEST(BreakPointApiIntrinsics) {
-     CHECK_EQ(2, break_point_hit_count);
- 
-     break_point_hit_count = 0;
--    v8::Local<v8::debug::WeakMap> weakmap =
--        v8::debug::WeakMap::New(env->GetIsolate());
--    CHECK(!weakmap->Set(env.local(), weakmap, v8_num(1)).IsEmpty());
--    CHECK(!weakmap->Get(env.local(), weakmap).IsEmpty());
-+    v8::Local<v8::debug::EphemeronTable> weakmap =
-+        v8::debug::EphemeronTable::New(env->GetIsolate());
-+    v8::Local<v8::Object> key = v8::Object::New(env->GetIsolate());
-+    CHECK(!weakmap->Set(env->GetIsolate(), key, v8_num(1)).IsEmpty());
-+    CHECK(!weakmap->Get(env->GetIsolate(), key).IsEmpty());
-     CHECK_EQ(0, break_point_hit_count);
-   }
- 
-diff --git a/test/cctest/test-inspector.cc b/test/cctest/test-inspector.cc
-index e36ce19eca04831f8a80c459590506e497836716..7fb3bef3bb9e7ef88cd441ce4023b780fff5d982 100644
---- a/test/cctest/test-inspector.cc
-+++ b/test/cctest/test-inspector.cc
-@@ -8,6 +8,7 @@
- #include "include/v8.h"
- #include "src/inspector/protocol/Runtime.h"
- #include "src/inspector/string-util.h"
-+#include "src/inspector/v8-inspector-impl.h"
- #include "test/cctest/cctest.h"
- 
- using v8_inspector::StringBuffer;
-@@ -168,3 +169,38 @@ TEST(BinaryBase64RoundTrip) {
-     CHECK_EQ(values[i], roundtrip_binary.data()[i]);
-   }
- }
-+
-+TEST(NoInterruptOnGetAssociatedData) {
-+  LocalContext env;
-+  v8::Isolate* isolate = env->GetIsolate();
-+  v8::HandleScope handle_scope(isolate);
-+
-+  v8_inspector::V8InspectorClient default_client;
-+  std::unique_ptr<v8_inspector::V8InspectorImpl> inspector(
-+      new v8_inspector::V8InspectorImpl(isolate, &default_client));
-+
-+  v8::Local<v8::Context> context = env->GetIsolate()->GetCurrentContext();
-+  v8::Local<v8::Value> error = v8::Exception::Error(v8_str("custom error"));
-+  v8::Local<v8::Name> key = v8_str("key");
-+  v8::Local<v8::Value> value = v8_str("value");
-+  inspector->associateExceptionData(context, error, key, value);
-+
-+  struct InterruptRecorder {
-+    static void handler(v8::Isolate* isolate, void* data) {
-+      reinterpret_cast<InterruptRecorder*>(data)->WasInvoked = true;
-+    }
-+
-+    bool WasInvoked = false;
-+  } recorder;
-+
-+  isolate->RequestInterrupt(&InterruptRecorder::handler, &recorder);
-+
-+  v8::Local<v8::Object> data =
-+      inspector->getAssociatedExceptionData(error).ToLocalChecked();
-+  CHECK(!recorder.WasInvoked);
-+
-+  CHECK_EQ(data->Get(context, key).ToLocalChecked(), value);
-+
-+  CompileRun("0");
-+  CHECK(recorder.WasInvoked);
-+}
diff --git a/patches/v8/merged_cppgc_fix_marking_of_ephemerons_with_keys_in_construction.patch b/patches/v8/merged_cppgc_fix_marking_of_ephemerons_with_keys_in_construction.patch
index 1d7cc2957c..b41eaf8163 100644
--- a/patches/v8/merged_cppgc_fix_marking_of_ephemerons_with_keys_in_construction.patch
+++ b/patches/v8/merged_cppgc_fix_marking_of_ephemerons_with_keys_in_construction.patch
@@ -86,58 +86,3 @@ index b014bd6134391e469dac2ceda98e52d301abb3f3..4c0d78a30bd3610df6d713d27e4e07a3
      if (value_desc.base_object_payload) {
        MarkAndPush(value_desc.base_object_payload, value_desc);
      } else {
-diff --git a/test/unittests/heap/cppgc/ephemeron-pair-unittest.cc b/test/unittests/heap/cppgc/ephemeron-pair-unittest.cc
-index c759308723d7f0635d329f5b571859700871fa35..1ff52904dd387c9772de810951619191dc79aea7 100644
---- a/test/unittests/heap/cppgc/ephemeron-pair-unittest.cc
-+++ b/test/unittests/heap/cppgc/ephemeron-pair-unittest.cc
-@@ -239,5 +239,50 @@ TEST_F(EphemeronPairTest, EphemeronPairWithEmptyMixinValue) {
-   FinishMarking();
- }
- 
-+namespace {
-+
-+class KeyWithCallback final : public GarbageCollected<KeyWithCallback> {
-+ public:
-+  template <typename Callback>
-+  explicit KeyWithCallback(Callback callback) {
-+    callback(this);
-+  }
-+  void Trace(Visitor*) const {}
-+};
-+
-+class EphemeronHolderForKeyWithCallback final
-+    : public GarbageCollected<EphemeronHolderForKeyWithCallback> {
-+ public:
-+  EphemeronHolderForKeyWithCallback(KeyWithCallback* key, GCed* value)
-+      : ephemeron_pair_(key, value) {}
-+  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(ephemeron_pair_); }
-+
-+ private:
-+  const EphemeronPair<KeyWithCallback, GCed> ephemeron_pair_;
-+};
-+
-+}  // namespace
-+
-+TEST_F(EphemeronPairTest, EphemeronPairWithKeyInConstruction) {
-+  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
-+  Persistent<EphemeronHolderForKeyWithCallback> holder;
-+  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
-+  FinishSteps();
-+  MakeGarbageCollected<KeyWithCallback>(
-+      GetAllocationHandle(), [this, &holder, value](KeyWithCallback* thiz) {
-+        // The test doesn't use conservative stack scanning to retain key to
-+        // avoid retaining value as a side effect.
-+        EXPECT_TRUE(HeapObjectHeader::FromObject(thiz).TryMarkAtomic());
-+        holder = MakeGarbageCollected<EphemeronHolderForKeyWithCallback>(
-+            GetAllocationHandle(), thiz, value);
-+        // Finishing marking at this point will leave an ephemeron pair
-+        // reachable where the key is still in construction. The GC needs to
-+        // mark the value for such pairs as live in the atomic pause as they key
-+        // is considered live.
-+        FinishMarking();
-+      });
-+  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
-+}
-+
- }  // namespace internal
- }  // namespace cppgc
diff --git a/patches/chromium/cachestorage_store_partial_opaque_responses.patch b/patches/chromium/cachestorage_store_partial_opaque_responses.patch
index 92fc15f706..dca92b37fd 100644
--- a/patches/chromium/cachestorage_store_partial_opaque_responses.patch
+++ b/patches/chromium/cachestorage_store_partial_opaque_responses.patch
@@ -72,23 +72,3 @@ index e16030caf58ca90273a11863eebd58e131f71a09..8a940b10692131fd4f0f61c444eac80e
      exception_state.ThrowTypeError(
          "Partial response (status code 206) is unsupported");
      return;
-diff --git a/third_party/blink/web_tests/external/wpt/service-workers/cache-storage/script-tests/cache-put.js b/third_party/blink/web_tests/external/wpt/service-workers/cache-storage/script-tests/cache-put.js
-index b45910a3b8ba089e1724efa8b9e8a8d679c59320..f60c4b905ebcb61854b83177d59861ef92095624 100644
---- a/third_party/blink/web_tests/external/wpt/service-workers/cache-storage/script-tests/cache-put.js
-+++ b/third_party/blink/web_tests/external/wpt/service-workers/cache-storage/script-tests/cache-put.js
-@@ -144,7 +144,14 @@ cache_test(function(cache, test) {
-               'Test framework error: The status code should be 0 for an ' +
-               ' opaque-filtered response. This is actually HTTP 206.');
-           response = fetch_result.clone();
--          return promise_rejects_js(test, TypeError, cache.put(request, fetch_result));
-+          return cache.put(request, fetch_result);
-+        })
-+      .then(function() {
-+          return cache.match(test_url);
-+        })
-+      .then(function(result) {
-+          assert_not_equals(result, undefined,
-+              'Cache.put should store an entry for the opaque response');
-         });
-   }, 'Cache.put with opaque-filtered HTTP 206 response');
- 
diff --git a/patches/chromium/cherry-pick-dbde8795233a.patch b/patches/chromium/cherry-pick-dbde8795233a.patch
index 369751e1dc..1ab86d6de7 100644
--- a/patches/chromium/cherry-pick-dbde8795233a.patch
+++ b/patches/chromium/cherry-pick-dbde8795233a.patch
@@ -52,257 +52,3 @@ index 8fc72ba0b932bd20b96630373e3bc4ee7765c8a1..d27c52259038fe5daf23f9ad0acbf7cb
    if (type == kDidFinishLoading) {
      resource->Finish(response_end, freezable_task_runner_.get());
  
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/range/resources/partial-text.py b/third_party/blink/web_tests/external/wpt/fetch/range/resources/partial-text.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..a0058551d52d45b3c16882014be740d75e51ddd1
---- /dev/null
-+++ b/third_party/blink/web_tests/external/wpt/fetch/range/resources/partial-text.py
-@@ -0,0 +1,47 @@
-+"""
-+This generates a partial response for a 100-byte text file.
-+"""
-+import re
-+
-+from wptserve.utils import isomorphic_decode
-+
-+def main(request, response):
-+    total_length = int(request.GET.first(b'length', b'100'))
-+    partial_code = int(request.GET.first(b'partial', b'206'))
-+    range_header = request.headers.get(b'Range', b'')
-+
-+    # Send a 200 if there is no range request
-+    if not range_header:
-+        to_send = ''.zfill(total_length)
-+        response.headers.set(b"Content-Type", b"text/plain")
-+        response.headers.set(b"Cache-Control", b"no-cache")
-+        response.headers.set(b"Content-Length", total_length)
-+        response.content = to_send
-+        return
-+
-+    # Simple range parsing, requires specifically "bytes=xxx-xxxx"
-+    range_header_match = re.search(r'^bytes=(\d*)-(\d*)$', isomorphic_decode(range_header))
-+    start, end = range_header_match.groups()
-+    start = int(start)
-+    end = int(end) if end else total_length
-+    length = end - start
-+
-+    # Error the request if the range goes beyond the length
-+    if length <= 0 or end > total_length:
-+        response.set_error(416, u"Range Not Satisfiable")
-+        response.write()
-+        return
-+
-+    # Generate a partial response of the requested length
-+    to_send = ''.zfill(length)
-+    response.headers.set(b"Content-Type", b"text/plain")
-+    response.headers.set(b"Accept-Ranges", b"bytes")
-+    response.headers.set(b"Cache-Control", b"no-cache")
-+    response.status = partial_code
-+
-+    content_range = b"bytes %d-%d/%d" % (start, end, total_length)
-+
-+    response.headers.set(b"Content-Range", content_range)
-+    response.headers.set(b"Content-Length", length)
-+
-+    response.content = to_send
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/range/resources/range-sw.js b/third_party/blink/web_tests/external/wpt/fetch/range/resources/range-sw.js
-index 3680c0c471d3d5f36c4aba4cc58dcd52c38a08df..b47823f03b4ef3749e622fbf7dd3b515a216b5be 100644
---- a/third_party/blink/web_tests/external/wpt/fetch/range/resources/range-sw.js
-+++ b/third_party/blink/web_tests/external/wpt/fetch/range/resources/range-sw.js
-@@ -12,7 +12,7 @@ async function broadcast(msg) {
-   }
- }
- 
--addEventListener('fetch', event => {
-+addEventListener('fetch', async event => {
-   /** @type Request */
-   const request = event.request;
-   const url = new URL(request.url);
-@@ -34,6 +34,11 @@ addEventListener('fetch', event => {
-     case 'broadcast-accept-encoding':
-       broadcastAcceptEncoding(event);
-       return;
-+    case 'record-media-range-request':
-+      return recordMediaRangeRequest(event);
-+    case 'use-media-range-request':
-+      useMediaRangeRequest(event);
-+      return;
-   }
- });
- 
-@@ -157,3 +162,57 @@ function broadcastAcceptEncoding(event) {
-   // Just send back any response, it isn't important for the test.
-   event.respondWith(new Response(''));
- }
-+
-+let rangeResponse = {};
-+
-+async function recordMediaRangeRequest(event) {
-+  /** @type Request */
-+  const request = event.request;
-+  const url = new URL(request.url);
-+  const urlParams = new URLSearchParams(url.search);
-+  const size = urlParams.get("size");
-+  const id = urlParams.get('id');
-+  const key = 'size' + size;
-+
-+  if (key in rangeResponse) {
-+    // Don't re-fetch ranges we already have.
-+    const clonedResponse = rangeResponse[key].clone();
-+    event.respondWith(clonedResponse);
-+  } else if (event.request.headers.get("range") === "bytes=0-") {
-+    // Generate a bogus 206 response to trigger subsequent range requests
-+    // of the desired size.
-+    const length = urlParams.get("length") + 100;
-+    const body = "A".repeat(Number(size));
-+    event.respondWith(new Response(body, {status: 206, headers: {
-+      "Content-Type": "audio/mp4",
-+      "Content-Range": `bytes 0-1/${length}`
-+    }}));
-+  } else if (event.request.headers.get("range") === `bytes=${Number(size)}-`) {
-+    // Pass through actual range requests which will attempt to fetch up to the
-+    // length in the original response which is bigger than the actual resource
-+    // to make sure 206 and 416 responses are treated the same.
-+    rangeResponse[key] = await fetch(event.request);
-+
-+    // Let the client know we have the range response for the given ID
-+    broadcast({id});
-+  } else {
-+    event.respondWith(Promise.reject(Error("Invalid Request")));
-+  }
-+}
-+
-+function useMediaRangeRequest(event) {
-+  /** @type Request */
-+  const request = event.request;
-+  const url = new URL(request.url);
-+  const urlParams = new URLSearchParams(url.search);
-+  const size = urlParams.get("size");
-+  const key = 'size' + size;
-+
-+  // Send a clone of the range response to preload.
-+  if (key in rangeResponse) {
-+    const clonedResponse = rangeResponse[key].clone();
-+    event.respondWith(clonedResponse);
-+  } else {
-+    event.respondWith(Promise.reject(Error("Invalid Request")));
-+  }
-+}
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/range/resources/utils.js b/third_party/blink/web_tests/external/wpt/fetch/range/resources/utils.js
-index 16ed737f63e8eee26a306c70acb0589e424db35d..ad2853b33dc7474293df1423dd8af459571736b9 100644
---- a/third_party/blink/web_tests/external/wpt/fetch/range/resources/utils.js
-+++ b/third_party/blink/web_tests/external/wpt/fetch/range/resources/utils.js
-@@ -8,6 +8,18 @@ function loadScript(url, { doc = document }={}) {
-   })
- }
- 
-+function preloadImage(url, { doc = document }={}) {
-+  return new Promise((resolve, reject) => {
-+    const preload = doc.createElement('link');
-+    preload.rel = 'preload';
-+    preload.as = 'image';
-+    preload.onload = () => resolve();
-+    preload.onerror = () => resolve();
-+    preload.href = url;
-+    doc.body.appendChild(preload);
-+  })
-+}
-+
- /**
-  *
-  * @param {Document} document
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window-expected.txt b/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window-expected.txt
-index 134b0a7abd817599921d4fb430e8247a2cb40f82..a9577f01727678cd7a76bcc65e132fd6fcb230ac 100644
---- a/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window-expected.txt
-+++ b/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window-expected.txt
-@@ -4,6 +4,7 @@ PASS Defer range header passthrough tests to service worker
- PASS Ranged response not allowed following no-cors ranged request
- PASS Non-opaque ranged response executed
- FAIL Accept-Encoding should not appear in a service worker assert_equals: Accept-Encoding should not be set for media expected (object) null but got (string) "identity;q=1, *;q=0"
-+PASS Opaque range preload successes and failures should be indistinguishable
- PASS Range headers correctly preserved
- PASS Range headers correctly removed
- PASS Headers correctly filtered
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window.js b/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window.js
-index 76f80e9416c615417ad2a9fbaa565641ff5b8a12..42e4ac6d75afdcbb2ad1e9d3e4069d9cbfd10dbd 100644
---- a/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window.js
-+++ b/third_party/blink/web_tests/external/wpt/fetch/range/sw.https.window.js
-@@ -149,3 +149,78 @@ promise_test(async t => {
- 
-   assert_equals((await audioBroadcast).acceptEncoding, null, "Accept-Encoding should not be set for media");
- }, `Accept-Encoding should not appear in a service worker`);
-+
-+promise_test(async t => {
-+  const scope = BASE_SCOPE + Math.random();
-+  await setupRegistration(t, scope);
-+  const iframe = await with_iframe(scope);
-+  const w = iframe.contentWindow;
-+  const length = 100;
-+  const count = 3;
-+  const counts = {};
-+
-+  // test a single range request size
-+  async function testSizedRange(size, partialResponseCode) {
-+    const rangeId = Math.random() + '';
-+    const rangeBroadcast = awaitMessage(w.navigator.serviceWorker, rangeId);
-+
-+    // Create a bogus audo element to trick the browser into sending
-+    // cross-origin range requests that can be manipulated by the service worker.
-+    const sound_url = new URL('partial-text.py', w.location);
-+    sound_url.hostname = REMOTE_HOST;
-+    sound_url.searchParams.set('action', 'record-media-range-request');
-+    sound_url.searchParams.set('length', length);
-+    sound_url.searchParams.set('size', size);
-+    sound_url.searchParams.set('partial', partialResponseCode);
-+    sound_url.searchParams.set('id', rangeId);
-+    appendAudio(w.document, sound_url);
-+
-+    // wait for the range requests to happen
-+    await rangeBroadcast;
-+
-+    // Create multiple preload requests and count the number of resource timing
-+    // entries that get created to make sure 206 and 416 range responses are treated
-+    // the same.
-+    const url = new URL('partial-text.py', w.location);
-+    url.searchParams.set('action', 'use-media-range-request');
-+    url.searchParams.set('size', size);
-+    counts['size' + size] = 0;
-+    for (let i = 0; i < count; i++) {
-+      await preloadImage(url, { doc: w.document });
-+    }
-+  }
-+
-+  // Test range requests from 1 smaller than the correct size to 1 larger than
-+  // the correct size to exercise the various permutations using the default 206
-+  // response code for successful range requests.
-+  for (let size = length - 1; size <= length + 1; size++) {
-+    await testSizedRange(size, '206');
-+  }
-+
-+  // Test a successful range request using a 200 response.
-+  await testSizedRange(length - 2, '200');
-+
-+  // Check the resource timing entries and count the reported number of fetches of each type
-+  const resources = w.performance.getEntriesByType("resource");
-+  for (const entry of resources) {
-+    const url = new URL(entry.name);
-+    if (url.searchParams.has('action') &&
-+        url.searchParams.get('action') == 'use-media-range-request' &&
-+        url.searchParams.has('size')) {
-+      counts['size' + url.searchParams.get('size')]++;
-+    }
-+  }
-+
-+  // Make sure there are a non-zero number of preload requests and they are all the same
-+  let counts_valid = true;
-+  const first = 'size' + (length - 2);
-+  for (let size = length - 2; size <= length + 1; size++) {
-+    let key = 'size' + size;
-+    if (!(key in counts) || counts[key] <= 0 || counts[key] != counts[first]) {
-+      counts_valid = false;
-+      break;
-+    }
-+  }
-+
-+  assert_true(counts_valid, `Opaque range request preloads were different for error and success`);
-+}, `Opaque range preload successes and failures should be indistinguishable`);
diff --git a/patches/chromium/cherry-pick-27eb11a28555.patch b/patches/chromium/cherry-pick-27eb11a28555.patch
index cb11ae99ed..2d48870e97 100644
--- a/patches/chromium/cherry-pick-27eb11a28555.patch
+++ b/patches/chromium/cherry-pick-27eb11a28555.patch
@@ -44,28 +44,3 @@ index 6e4e8acf811f29712e87994e3fa125a811da978a..72aac202ca076fe7ea81f833549773f5
    timing_allow_failed_flag_ = !PassesTimingAllowOriginCheck(*response_head);
  
    // Because we initiate a new request on redirect in some cases, we cannot
-diff --git a/third_party/blink/web_tests/external/wpt/fetch/api/redirect/redirect-mode.any.js b/third_party/blink/web_tests/external/wpt/fetch/api/redirect/redirect-mode.any.js
-index eed44e0414cb8947c9b7c21df6ef288f733f8994..9f1ff98c65af97bcf185867ac6c6e128dbd77715 100644
---- a/third_party/blink/web_tests/external/wpt/fetch/api/redirect/redirect-mode.any.js
-+++ b/third_party/blink/web_tests/external/wpt/fetch/api/redirect/redirect-mode.any.js
-@@ -1,6 +1,7 @@
- // META: script=/common/get-host-info.sub.js
- 
- var redirectLocation = "cors-top.txt";
-+const { ORIGIN, REMOTE_ORIGIN } = get_host_info();
- 
- function testRedirect(origin, redirectStatus, redirectMode, corsMode) {
-   var url = new URL("../resources/redirect.py", self.location);
-@@ -47,4 +48,12 @@ for (var origin of ["same-origin", "cross-origin"]) {
-   }
- }
- 
-+promise_test(async (t) => {
-+  const destination = `${ORIGIN}/common/blank.html`;
-+  // We use /common/redirect.py intentionally, as we want a CORS error.
-+  const url =
-+    `${REMOTE_ORIGIN}/common/redirect.py?location=${destination}`;
-+  await promise_rejects_js(t, TypeError,  fetch(url, { redirect: "manual" }));
-+}, "manual redirect with a CORS error should be rejected");
-+
- done();
diff --git a/patches/v8/cherry-pick-27bc67f761e6.patch b/patches/v8/cherry-pick-27bc67f761e6.patch
index 56bd5ac7b6..ed1cacf553 100644
--- a/patches/v8/cherry-pick-27bc67f761e6.patch
+++ b/patches/v8/cherry-pick-27bc67f761e6.patch
@@ -226,28 +226,3 @@ index fb5949e2c90966a240ccfb1b61a01017a816f313..6c1df05ca95feb3f40db70f652a55b59
  
    return ReadOnlyRoots(isolate).undefined_value();
  }
-diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
-index 5a12729d929a36fbcc89d0d2586c0cbfee72309c..f6373286cf99176b440db6965e657580321a6380 100644
---- a/test/cctest/test-api.cc
-+++ b/test/cctest/test-api.cc
-@@ -62,6 +62,7 @@
- #include "src/objects/js-array-inl.h"
- #include "src/objects/js-promise-inl.h"
- #include "src/objects/lookup.h"
-+#include "src/objects/map-updater.h"
- #include "src/objects/module-inl.h"
- #include "src/objects/objects-inl.h"
- #include "src/objects/string-inl.h"
-@@ -2972,9 +2973,9 @@ TEST(InternalFieldsSubclassing) {
-         CHECK_LE(i_value->map().GetInObjectProperties(), kMaxNofProperties);
-       }
- 
--      // Make Sure we get the precise property count.
--      i_value->map().FindRootMap(i_isolate).CompleteInobjectSlackTracking(
--          i_isolate);
-+      // Make sure we get the precise property count.
-+      i::MapUpdater::CompleteInobjectSlackTracking(
-+          i_isolate, i_value->map().FindRootMap(i_isolate));
-       // TODO(cbruni): fix accounting to make this condition true.
-       // CHECK_EQ(0, i_value->map()->UnusedPropertyFields());
-       if (in_object_only) {
diff --git a/patches/v8/cherry-pick-26b7ad6967b1.patch b/patches/v8/cherry-pick-26b7ad6967b1.patch
index eaf0fec7b9..6b217f7c75 100644
--- a/patches/v8/cherry-pick-26b7ad6967b1.patch
+++ b/patches/v8/cherry-pick-26b7ad6967b1.patch
@@ -48,37 +48,3 @@ index d86438dde0fe659fb79f03c04a1d4ab4e45014e3..38c96cf78b04a56f65e745b18c563023
        }
  
        case LookupIterator::ACCESSOR: {
-diff --git a/test/cctest/test-api-interceptors.cc b/test/cctest/test-api-interceptors.cc
-index 815c538d227ae048d382798c9f99bebe054fb6d7..475003f73c49b8e462ef1896f3fad97857e24574 100644
---- a/test/cctest/test-api-interceptors.cc
-+++ b/test/cctest/test-api-interceptors.cc
-@@ -5636,10 +5636,10 @@ void DatabaseGetter(Local<Name> name,
-                     const v8::PropertyCallbackInfo<Value>& info) {
-   ApiTestFuzzer::Fuzz();
-   auto context = info.GetIsolate()->GetCurrentContext();
--  Local<v8::Object> db = info.Holder()
--                             ->GetRealNamedProperty(context, v8_str("db"))
--                             .ToLocalChecked()
--                             .As<v8::Object>();
-+  v8::MaybeLocal<Value> maybe_db =
-+      info.Holder()->GetRealNamedProperty(context, v8_str("db"));
-+  if (maybe_db.IsEmpty()) return;
-+  Local<v8::Object> db = maybe_db.ToLocalChecked().As<v8::Object>();
-   if (!db->Has(context, name).FromJust()) return;
-   info.GetReturnValue().Set(db->Get(context, name).ToLocalChecked());
- }
-diff --git a/test/unittests/api/interceptor-unittest.cc b/test/unittests/api/interceptor-unittest.cc
-index 8a1db3f823e5d957907e193971d220853c2b2e91..bc00462a29d707ec296f72b82ee2992ea8c9031f 100644
---- a/test/unittests/api/interceptor-unittest.cc
-+++ b/test/unittests/api/interceptor-unittest.cc
-@@ -170,8 +170,8 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
-   EXPECT_EQ(Run("obj.foo"), "named getter");
-   EXPECT_EQ(Run("obj[42]"), "indexed getter");
- 
--  EXPECT_EQ(Run("obj.foo = null"), "named setter");
--  EXPECT_EQ(Run("obj[42] = null"), "indexed setter");
-+  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
-+  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
- 
-   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
-             "named descriptor");
