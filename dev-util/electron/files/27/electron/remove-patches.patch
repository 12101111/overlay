diff --git a/patches/chromium/cherry-pick-5b2fddadaa12.patch b/patches/chromium/cherry-pick-5b2fddadaa12.patch
index 3974cd3916..acddb07fb9 100644
--- a/patches/chromium/cherry-pick-5b2fddadaa12.patch
+++ b/patches/chromium/cherry-pick-5b2fddadaa12.patch
@@ -49,13 +49,3 @@ index 8c7b9d07bb68ec51d21ea2132cc5ecbc39e5cd95..95a40d39c9214fd6555523bd7e7bd91e
  }
  
  float AudioParam::defaultValue() const {
-diff --git a/third_party/blink/web_tests/webaudio/AudioParam/worklet-warnings-expected.txt b/third_party/blink/web_tests/webaudio/AudioParam/worklet-warnings-expected.txt
-index 7bb2d0aec7feaed69424f209a2e3e031c7a9e512..ebe05a2c239d35be4729cc187aa77de6a44f5a41 100644
---- a/third_party/blink/web_tests/webaudio/AudioParam/worklet-warnings-expected.txt
-+++ b/third_party/blink/web_tests/webaudio/AudioParam/worklet-warnings-expected.txt
-@@ -1,5 +1,4 @@
- CONSOLE WARNING: AudioWorkletNode("noise-generator").amplitude.value 99 outside nominal range [0, 1]; value will be clamped.
--CONSOLE WARNING: AudioWorkletNode("noise-generator").amplitude.setValueAtTime value 99 outside nominal range [0, 1]; value will be clamped.
- CONSOLE WARNING: AudioWorkletNode("noise-generator").amplitude.setValueAtTime value -1 outside nominal range [0, 1]; value will be clamped.
- CONSOLE WARNING: AudioWorkletNode("noise-generator").amplitude.linearRampToValueAtTime value 5 outside nominal range [0, 1]; value will be clamped.
- This is a testharness.js-based test.
diff --git a/patches/v8/cherry-pick-389ea9be7d68.patch b/patches/v8/cherry-pick-389ea9be7d68.patch
index 386ebfff02..f01d5687aa 100644
--- a/patches/v8/cherry-pick-389ea9be7d68.patch
+++ b/patches/v8/cherry-pick-389ea9be7d68.patch
@@ -204,130 +204,3 @@ index 770f8efa8f9c0f477cfe9d067f270ed6d7f12d74..4cecde3525115bebf7a271b17229d7f0
    bool success = false;
    PropertyKey lookup_key(isolate, key, &success);
    if (!success) return Nothing<bool>();
-diff --git a/test/cctest/test-field-type-tracking.cc b/test/cctest/test-field-type-tracking.cc
-index 0554b5f00cbab830d1b9b8df98af1f0c4e448231..90022d811c34a83088c3943cb57a03b58b9b3366 100644
---- a/test/cctest/test-field-type-tracking.cc
-+++ b/test/cctest/test-field-type-tracking.cc
-@@ -3030,122 +3030,6 @@ TEST(RepresentationPredicatesAreInSync) {
-   }
- }
- 
--TEST(DeletePropertyGeneralizesConstness) {
--  CcTest::InitializeVM();
--  v8::HandleScope scope(CcTest::isolate());
--  Isolate* isolate = CcTest::i_isolate();
--  Handle<FieldType> any_type = FieldType::Any(isolate);
--
--  // Create a map with some properties.
--  Handle<Map> initial_map = Map::Create(isolate, kPropCount + 3);
--  Handle<Map> map = initial_map;
--  for (int i = 0; i < kPropCount; i++) {
--    Handle<String> name = CcTest::MakeName("prop", i);
--    map = Map::CopyWithField(isolate, map, name, any_type, NONE,
--                             PropertyConstness::kConst, Representation::Smi(),
--                             INSERT_TRANSITION)
--              .ToHandleChecked();
--  }
--  Handle<Map> parent_map = map;
--  CHECK(!map->is_deprecated());
--
--  Handle<String> name_x = CcTest::MakeString("x");
--  Handle<String> name_y = CcTest::MakeString("y");
--
--  map = Map::CopyWithField(isolate, parent_map, name_x, any_type, NONE,
--                           PropertyConstness::kConst, Representation::Smi(),
--                           INSERT_TRANSITION)
--            .ToHandleChecked();
--
--  // Create an object, initialize its properties and add a couple of clones.
--  Handle<JSObject> object1 = isolate->factory()->NewJSObjectFromMap(map);
--  for (int i = 0; i < kPropCount; i++) {
--    FieldIndex index = FieldIndex::ForDescriptor(*map, InternalIndex(i));
--    object1->FastPropertyAtPut(index, Smi::FromInt(i));
--  }
--  Handle<JSObject> object2 = isolate->factory()->CopyJSObject(object1);
--
--  CHECK(!map->is_deprecated());
--  CHECK(!parent_map->is_deprecated());
--
--  // Transition to Double must deprecate m1.
--  CHECK(!Representation::Smi().CanBeInPlaceChangedTo(Representation::Double()));
--
--  // Reconfigure one of the first properties to make the whole transition tree
--  // deprecated (including |parent_map| and |map|).
--  Handle<Map> new_map =
--      ReconfigureProperty(isolate, map, InternalIndex(0), PropertyKind::kData,
--                          NONE, Representation::Double(), any_type);
--  CHECK(map->is_deprecated());
--  CHECK(parent_map->is_deprecated());
--  CHECK(!new_map->is_deprecated());
--  // The "x" property is still kConst.
--  CHECK_EQ(new_map->GetLastDescriptorDetails(isolate).constness(),
--           PropertyConstness::kConst);
--
--  Handle<Map> new_parent_map = Map::Update(isolate, parent_map);
--  CHECK(!new_parent_map->is_deprecated());
--
--  // |new_parent_map| must have exactly one outgoing transition to |new_map|.
--  {
--    TransitionsAccessor ta(isolate, *new_parent_map);
--    CHECK_EQ(ta.NumberOfTransitions(), 1);
--    CHECK_EQ(ta.GetTarget(0), *new_map);
--  }
--
--  // Deletion of the property from |object1| must migrate it to |new_parent_map|
--  // which is an up-to-date version of the |parent_map|. The |new_map|'s "x"
--  // property should be marked as mutable.
--  CHECK_EQ(object1->map(isolate), *map);
--  CHECK(Runtime::DeleteObjectProperty(isolate, object1, name_x,
--                                      LanguageMode::kSloppy)
--            .ToChecked());
--  CHECK_EQ(object1->map(isolate), *new_parent_map);
--  CHECK_EQ(new_map->GetLastDescriptorDetails(isolate).constness(),
--           PropertyConstness::kMutable);
--
--  // Now add transitions to "x" and "y" properties from |new_parent_map|.
--  std::vector<Handle<Map>> transitions;
--  Handle<Object> value = handle(Smi::FromInt(0), isolate);
--  for (int i = 0; i < kPropertyAttributesCombinationsCount; i++) {
--    auto attributes = PropertyAttributesFromInt(i);
--
--    Handle<Map> tmp;
--    // Add some transitions to "x" and "y".
--    tmp = Map::TransitionToDataProperty(isolate, new_parent_map, name_x, value,
--                                        attributes, PropertyConstness::kConst,
--                                        StoreOrigin::kNamed);
--    CHECK(!tmp->map(isolate)->is_dictionary_map());
--    transitions.push_back(tmp);
--
--    tmp = Map::TransitionToDataProperty(isolate, new_parent_map, name_y, value,
--                                        attributes, PropertyConstness::kConst,
--                                        StoreOrigin::kNamed);
--    CHECK(!tmp->map(isolate)->is_dictionary_map());
--    transitions.push_back(tmp);
--  }
--
--  // Deletion of the property from |object2| must migrate it to |new_parent_map|
--  // which is an up-to-date version of the |parent_map|.
--  // All outgoing transitions from |new_map| that add "x" must be marked as
--  // mutable, transitions to other properties must remain const.
--  CHECK_EQ(object2->map(isolate), *map);
--  CHECK(Runtime::DeleteObjectProperty(isolate, object2, name_x,
--                                      LanguageMode::kSloppy)
--            .ToChecked());
--  CHECK_EQ(object2->map(isolate), *new_parent_map);
--  for (Handle<Map> m : transitions) {
--    if (m->GetLastDescriptorName(isolate) == *name_x) {
--      CHECK_EQ(m->GetLastDescriptorDetails(isolate).constness(),
--               PropertyConstness::kMutable);
--
--    } else {
--      CHECK_EQ(m->GetLastDescriptorDetails(isolate).constness(),
--               PropertyConstness::kConst);
--    }
--  }
--}
--
- #define CHECK_SAME(object, rep, expected)                    \
-   CHECK_EQ(Object::FitsRepresentation(*object, rep, true),   \
-            Object::FitsRepresentation(*object, rep, false)); \
