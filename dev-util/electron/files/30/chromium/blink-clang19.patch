From b0088fa60970412160535c367e2ff53b25b8538e Mon Sep 17 00:00:00 2001
From: Amy Huang <akhuang@google.com>
Date: Thu, 6 Jun 2024 20:55:01 +0000
Subject: [PATCH] Fix instances of
 -Wmissing-template-arg-list-after-template-kw.

Clang has a new warning that requires a template argument list after using
the template keyword. Remove uses of the template keyword when we're not
specifying types.

See https://github.com/llvm/llvm-project/issues/94194 for the upstream
clang change.

Bug: 344680447
Change-Id: I0856116433039c3fa767f552a15b8754fcedc31b
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5604664
Reviewed-by: Kentaro Hara <haraken@chromium.org>
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Commit-Queue: Amy Huang <akhuang@google.com>
Cr-Commit-Position: refs/heads/main@{#1311538}
---
 third_party/blink/renderer/platform/wtf/hash_table.h | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/third_party/blink/renderer/platform/wtf/hash_table.h b/third_party/blink/renderer/platform/wtf/hash_table.h
index c5c18b3fab0804..75e9b6694797b9 100644
--- a/third_party/blink/renderer/platform/wtf/hash_table.h
+++ b/third_party/blink/renderer/platform/wtf/hash_table.h
@@ -1647,7 +1647,7 @@ HashTable<Key, Value, Extractor, Traits, KeyTraits, Allocator>::ExpandBuffer(
     }
   }
   table_ = temporary_table;
-  Allocator::template BackingWriteBarrier(&table_);
+  Allocator::BackingWriteBarrier(&table_);
 
   HashTableBucketInitializer<Traits, Allocator, Value>::InitializeTable(
       original_table, new_table_size);
@@ -1701,7 +1701,7 @@ Value* HashTable<Key, Value, Extractor, Traits, KeyTraits, Allocator>::RehashTo(
   // This swaps the newly allocated buffer with the current one. The store to
   // the current table has to be atomic to prevent races with concurrent marker.
   AsAtomicPtr(&table_)->store(new_hash_table.table_, std::memory_order_relaxed);
-  Allocator::template BackingWriteBarrier(&table_);
+  Allocator::BackingWriteBarrier(&table_);
   table_size_ = new_table_size;
 
   new_hash_table.table_ = old_table;
@@ -1865,8 +1865,8 @@ void HashTable<Key, Value, Extractor, Traits, KeyTraits, Allocator>::swap(
   // on the mutator thread, which is also the only one that writes to them, so
   // there is *no* risk of data races when reading.
   AtomicWriteSwap(table_, other.table_);
-  Allocator::template BackingWriteBarrier(&table_);
-  Allocator::template BackingWriteBarrier(&other.table_);
+  Allocator::BackingWriteBarrier(&table_);
+  Allocator::BackingWriteBarrier(&other.table_);
   if (IsWeak<ValueType>::value) {
     // Weak processing is omitted when no backing store is present. In case such
     // an empty table is later on used it needs to be strongified.
