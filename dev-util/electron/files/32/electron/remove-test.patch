diff --git a/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch b/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
index 22056ec0ec..c882af7929 100644
--- a/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
+++ b/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
@@ -49,79 +49,3 @@ index be25d7e5fa3d9c5654566d75510515996f600ad9..7868ccefe96aa2601058e5319802aef6
        return false;
      }
    }
-diff --git a/test/cctest/test-js-to-wasm.cc b/test/cctest/test-js-to-wasm.cc
-index f7be048dbf5740c9306481dbf3bf1ea4b688b490..901fcbb214860370cc8f0dbf8f0d7a6af22704ae 100644
---- a/test/cctest/test-js-to-wasm.cc
-+++ b/test/cctest/test-js-to-wasm.cc
-@@ -93,13 +93,6 @@ DECLARE_EXPORTED_FUNCTION(i64_square, sigs.l_l(),
- DECLARE_EXPORTED_FUNCTION(externref_null_id, sigs.a_a(),
-                           WASM_CODE({WASM_LOCAL_GET(0)}))
- 
--static constexpr ValueType extern_extern_types[] = {kWasmExternRef.AsNonNull(),
--                                                    kWasmExternRef.AsNonNull()};
--static constexpr FunctionSig sig_extern_extern(1, 1, extern_extern_types);
--
--DECLARE_EXPORTED_FUNCTION(externref_id, &sig_extern_extern,
--                          WASM_CODE({WASM_LOCAL_GET(0)}))
--
- DECLARE_EXPORTED_FUNCTION(f32_square, sigs.f_f(),
-                           WASM_CODE({WASM_LOCAL_GET(0), WASM_LOCAL_GET(0),
-                                      kExprF32Mul}))
-@@ -862,19 +855,6 @@ TEST(TestFastJSWasmCall_ExternrefNullArg) {
-   tester.CallAndCheckWasmFunction("externref_null_id", args4, str);
- }
- 
--TEST(TestFastJSWasmCall_ExternrefArg) {
--  v8::HandleScope scope(CcTest::isolate());
--  FastJSWasmCallTester tester;
--  tester.AddExportedFunction(k_externref_id);
--  auto args1 = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
--  tester.CallAndCheckWasmFunction("externref_id", args1, 42);
--  auto args2 = v8::to_array<v8::Local<v8::Value>>({v8_bigint(42)});
--  tester.CallAndCheckWasmFunctionBigInt("externref_id", args2, v8_bigint(42));
--  auto str = v8_str("test");
--  auto args3 = v8::to_array<v8::Local<v8::Value>>({str});
--  tester.CallAndCheckWasmFunction("externref_id", args3, str);
--}
--
- TEST(TestFastJSWasmCall_MultipleArgs) {
-   v8::HandleScope scope(CcTest::isolate());
-   FastJSWasmCallTester tester;
-diff --git a/test/mjsunit/regress/wasm/regress-366635354.js b/test/mjsunit/regress/wasm/regress-366635354.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..18dcc41b0e79df5b715eca6c657d1490e60ed8a0
---- /dev/null
-+++ b/test/mjsunit/regress/wasm/regress-366635354.js
-@@ -0,0 +1,32 @@
-+// Copyright 2024 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --always-turbofan --allow-natives-syntax
-+
-+d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
-+
-+let builder = new WasmModuleBuilder();
-+builder.addFunction('foo', makeSig([wasmRefType(kWasmExternRef)], []))
-+    .addBody([kExprUnreachable])
-+    .exportFunc();
-+let instance = builder.instantiate();
-+const wasm_caller = () => instance.exports.foo(null);
-+
-+%PrepareFunctionForOptimization(wasm_caller);
-+testCallStack();
-+%OptimizeFunctionOnNextCall(wasm_caller);
-+testCallStack();
-+
-+function testCallStack() {
-+  try {
-+    wasm_caller();
-+    assertUnreachable();
-+  } catch (e) {
-+    assertMatches(
-+`TypeError: type incompatibility when transforming from/to JS
-+    at wasm_caller .*\\.js:14:44\\)
-+    at testCallStack .*\\.js:23:5\\).*`,
-+      e.stack,);
-+  }
-+}
diff --git a/patches/v8/cherry-pick-153d4e84e5d1.patch b/patches/v8/cherry-pick-153d4e84e5d1.patch
index 06453563e0..d5c4d40d5c 100644
--- a/patches/v8/cherry-pick-153d4e84e5d1.patch
+++ b/patches/v8/cherry-pick-153d4e84e5d1.patch
@@ -55,16 +55,3 @@ index 71e7f3504afdef8fb8a909980709af37e42c7286..b127275bd7502e4fa718296b2e87f623
      origin = direct_handle(tuple->value2(), isolate);
    }
    const wasm::WasmModule* module = trusted_data->module();
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index 1fb2786de576bdcb0f4b6e4145203764dd06b5f0..2fa90fc9399f18411eef2a8a5eb9b40357492c8c 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -41,8 +41,6 @@
-   'compiler/fast-api-helpers': [SKIP],
-   'typedarray-helpers': [SKIP],
- 
--  # TODO(ahaas): Fix generic wasm-to-js wrapper tierup test.
--  'wasm/wasm-to-js-tierup': [SKIP],
-   # All tests in the bug directory are expected to fail.
-   'bugs/*': [FAIL],
- 
diff --git a/patches/chromium/editcontext_use_empty_control_and_selection_bounds_as_fallbacks.patch b/patches/chromium/editcontext_use_empty_control_and_selection_bounds_as_fallbacks.patch
index b8a69f11c7..21cdba5f8d 100644
--- a/patches/chromium/editcontext_use_empty_control_and_selection_bounds_as_fallbacks.patch
+++ b/patches/chromium/editcontext_use_empty_control_and_selection_bounds_as_fallbacks.patch
@@ -44,40 +44,3 @@ index 71efa75c49ccee79895e5eedf60ccc5d576ac2a3..6c7462ef353f23c8fdfdd9b874f08e50
      rect_in_viewport = control_bounds_;
      return true;
    }
-diff --git a/third_party/blink/web_tests/editing/input/edit-context.html b/third_party/blink/web_tests/editing/input/edit-context.html
-index 11ef18391ce50f4872e7ae378c3002914354959d..7cd502c38f8b404c18266732baad20ff22634871 100644
---- a/third_party/blink/web_tests/editing/input/edit-context.html
-+++ b/third_party/blink/web_tests/editing/input/edit-context.html
-@@ -681,6 +681,32 @@ test(function() {
- 
-   test.remove();
- }, 'Testing firstRectForCharacterRange');
-+
-+test(function() {
-+  const editContext = new EditContext();
-+  const test = document.createElement("div");
-+  document.body.appendChild(test);
-+  test.editContext = editContext;
-+  test.focus();
-+  textInputController.insertText("abc");
-+  textInputController.setComposition("def");
-+
-+  assert_array_equals(textInputController.firstRectForCharacterRange(3, 1), [], "No rects are provided if no bounds have been set");
-+
-+  const rect1 = new DOMRect(0, 2, 0, 0);
-+  editContext.updateControlBounds(rect1);
-+  assert_array_equals(textInputController.firstRectForCharacterRange(3, 1), [0, 2, 0, 0], "If there are no composition bounds and no selection bounds, fall back to control bounds");
-+
-+  const rect2 = new DOMRect(4, 2, 0, 0);
-+  editContext.updateSelectionBounds(rect2);
-+  assert_array_equals(textInputController.firstRectForCharacterRange(3, 1), [4, 2, 0, 0], "If there are no composition bounds, fall back to selection bounds");
-+
-+  const rect3 = new DOMRect(8, 2, 0, 0);
-+  editContext.updateCharacterBounds(3, [rect3, rect3, rect3]);
-+  assert_array_equals(textInputController.firstRectForCharacterRange(3, 1), [8, 2, 0, 0], "Character bounds should be used even if control and selection bounds are set");
-+
-+  test.remove();
-+}, 'firstRectForCharacterRange empty control bounds and empty selection bounds fallbacks');
- </script>
- </body>
- </html>
diff --git a/patches/v8/merged_reland_lower_the_maximum_js_parameter_count.patch b/patches/v8/merged_reland_lower_the_maximum_js_parameter_count.patch
index 2ee0078a87..b486d28a82 100644
--- a/patches/v8/merged_reland_lower_the_maximum_js_parameter_count.patch
+++ b/patches/v8/merged_reland_lower_the_maximum_js_parameter_count.patch
@@ -53,55 +53,3 @@ index 122d0bba58b56343dca45cdcb0cbda13e6aba34e..ae443b70cc1537ad5dbdb319bc55b841
  
   private:
    inline void set_instruction_start(IsolateForSandbox isolate, Address value);
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index 2fa90fc9399f18411eef2a8a5eb9b40357492c8c..c16f009eeefd74644e212ee17ef051686139a1e5 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -228,6 +228,10 @@
- 
-   # TODO(v8:12783): Turboshaft instruction selection not ported to these platforms yet.
-   'wasm/turboshaft/instruction-selection': [PASS, ['arch in [riscv32]', SKIP]],
-+
-+  # TODO(thibaudm): Register allocation struggles with the function in this
-+  # test, which has the maximum allowed number of parameters.
-+  'regress/regress-crbug-724153': [SLOW],
- }],  # ALWAYS
- 
- ################################################################################
-diff --git a/test/mjsunit/regress/regress-11491.js b/test/mjsunit/regress/regress-11491.js
-index 795480a15db69b3ca30e97fc49d283546be3319e..4e188d44226341f5bba843dd10a46ff1fbaa4897 100644
---- a/test/mjsunit/regress/regress-11491.js
-+++ b/test/mjsunit/regress/regress-11491.js
-@@ -4,7 +4,7 @@
- 
- function test() {
-   // Create a generator constructor with the maximum number of allowed parameters.
--  const args = new Array(65535);
-+  const args = new Array(65526);
-   function* gen() {}
-   const c = gen.constructor.apply(null, args);
- 
-diff --git a/test/mjsunit/regress/regress-crbug-724153.js b/test/mjsunit/regress/regress-crbug-724153.js
-index a571f8e0bf5e85accc53a926358e61aea6c3d981..282532e5026270334b2d2c40f77578e2596ab67c 100644
---- a/test/mjsunit/regress/regress-crbug-724153.js
-+++ b/test/mjsunit/regress/regress-crbug-724153.js
-@@ -6,7 +6,7 @@
- 
- (function TestParameterLimit() {
-   var src = '(function f(a,';
--  for (var i = 0; i < 65534 - 2; i++) {
-+  for (var i = 0; i < 65525 - 2; i++) {
-     src += 'b' + i + ',';
-   }
-   src += 'c) { return a + c })';
-diff --git a/test/mjsunit/regress/regress-v8-6716.js b/test/mjsunit/regress/regress-v8-6716.js
-index 87b72e148820e416ae698b9b414f3d5ce2b1bcb1..df8c06887720dd6694576e13d8423c8304da93f2 100644
---- a/test/mjsunit/regress/regress-v8-6716.js
-+++ b/test/mjsunit/regress/regress-v8-6716.js
-@@ -3,5 +3,5 @@
- // found in the LICENSE file.
- 
- function f() {}
--var a = Array(2 ** 16 - 2);  // Elements in large-object-space.
-+var a = Array(2 ** 16 - 10);  // Elements in large-object-space.
- f.bind(...a);
