diff --git a/base/allocator/partition_alloc_support.cc b/base/allocator/partition_alloc_support.cc
index d2d56a9..2492be6 100644
--- a/base/allocator/partition_alloc_support.cc
+++ b/base/allocator/partition_alloc_support.cc
@@ -854,13 +854,13 @@ void PartitionAllocSupport::ReconfigureForTests() {
 
 // static
 PartitionAllocSupport::BrpConfiguration
-PartitionAllocSupport::GetBrpConfiguration(const std::string& process_type) {
+PartitionAllocSupport::GetBrpConfiguration(const std::string& process_type, bool use_configured_pool) {
   // TODO(bartekn): Switch to DCHECK once confirmed there are no issues.
   CHECK(base::FeatureList::GetInstance());
 
   bool enable_brp = false;
   bool enable_brp_zapping = false;
-  bool split_main_partition = false;
+  bool split_main_partition = use_configured_pool;
   bool use_dedicated_aligned_partition = false;
   bool add_dummy_ref_count = false;
   bool process_affected_by_brp_flag = false;
@@ -1023,7 +1023,8 @@ void PartitionAllocSupport::ReconfigureAfterZygoteFork(
 
 void PartitionAllocSupport::ReconfigureAfterFeatureListInit(
     const std::string& process_type,
-    bool configure_dangling_pointer_detector) {
+    bool configure_dangling_pointer_detector,
+    bool use_configured_pool) {
   if (configure_dangling_pointer_detector) {
     base::allocator::InstallDanglingRawPtrChecks();
   }
@@ -1058,7 +1059,7 @@ void PartitionAllocSupport::ReconfigureAfterFeatureListInit(
 
   DCHECK_NE(process_type, switches::kZygoteProcess);
   [[maybe_unused]] BrpConfiguration brp_config =
-      GetBrpConfiguration(process_type);
+      GetBrpConfiguration(process_type, use_configured_pool);
 
 #if BUILDFLAG(USE_ASAN_BACKUP_REF_PTR)
   if (brp_config.process_affected_by_brp_flag) {
@@ -1094,7 +1095,8 @@ void PartitionAllocSupport::ReconfigureAfterFeatureListInit(
       allocator_shim::UseDedicatedAlignedPartition(
           brp_config.use_dedicated_aligned_partition),
       allocator_shim::AddDummyRefCount(brp_config.add_dummy_ref_count),
-      allocator_shim::AlternateBucketDistribution(bucket_distribution));
+      allocator_shim::AlternateBucketDistribution(bucket_distribution),
+      allocator_shim::UseConfigurablePool(use_configured_pool));
 #endif  // BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC)
 
   // If BRP is not enabled, check if any of PCScan flags is enabled.
diff --git a/base/allocator/partition_alloc_support.h b/base/allocator/partition_alloc_support.h
index f9095a3..a5ca1f7 100644
--- a/base/allocator/partition_alloc_support.h
+++ b/base/allocator/partition_alloc_support.h
@@ -80,7 +80,8 @@ class BASE_EXPORT PartitionAllocSupport {
   void ReconfigureAfterZygoteFork(const std::string& process_type);
   void ReconfigureAfterFeatureListInit(
       const std::string& process_type,
-      bool configure_dangling_pointer_detector = true);
+      bool configure_dangling_pointer_detector = true,
+      bool use_configured_pool = false);
   void ReconfigureAfterTaskRunnerInit(const std::string& process_type);
 
   // |has_main_frame| tells us if the renderer contains a main frame.
@@ -94,7 +95,9 @@ class BASE_EXPORT PartitionAllocSupport {
 
   static PartitionAllocSupport* Get();
 
-  static BrpConfiguration GetBrpConfiguration(const std::string& process_type);
+  static BrpConfiguration GetBrpConfiguration(
+      const std::string& process_type,
+      bool use_configured_pool = false);
 
  private:
   PartitionAllocSupport();
diff --git a/base/allocator/partition_allocator/shim/allocator_shim.h b/base/allocator/partition_allocator/shim/allocator_shim.h
index 6d946c7..3532523 100644
--- a/base/allocator/partition_allocator/shim/allocator_shim.h
+++ b/base/allocator/partition_allocator/shim/allocator_shim.h
@@ -189,6 +189,8 @@ using UseDedicatedAlignedPartition =
 using AddDummyRefCount = base::StrongAlias<class AddDummyRefCountTag, bool>;
 using AlternateBucketDistribution =
     base::features::AlternateBucketDistributionMode;
+using UseConfigurablePool =
+    base::StrongAlias<class UseConfigurablePoolTag, bool>;
 
 // If |thread_cache_on_non_quarantinable_partition| is specified, the
 // thread-cache will be enabled on the non-quarantinable partition. The
@@ -200,7 +202,8 @@ BASE_EXPORT void ConfigurePartitions(
     SplitMainPartition split_main_partition,
     UseDedicatedAlignedPartition use_dedicated_aligned_partition,
     AddDummyRefCount add_dummy_ref_count,
-    AlternateBucketDistribution use_alternate_bucket_distribution);
+    AlternateBucketDistribution use_alternate_bucket_distribution,
+    UseConfigurablePool use_configured_pool);
 
 #if BUILDFLAG(USE_STARSCAN)
 BASE_EXPORT void EnablePCScan(partition_alloc::internal::PCScan::InitConfig);
diff --git a/base/allocator/partition_allocator/shim/allocator_shim_default_dispatch_to_partition_alloc.cc b/base/allocator/partition_allocator/shim/allocator_shim_default_dispatch_to_partition_alloc.cc
index 2f1dd81..9ec5313 100644
--- a/base/allocator/partition_allocator/shim/allocator_shim_default_dispatch_to_partition_alloc.cc
+++ b/base/allocator/partition_allocator/shim/allocator_shim_default_dispatch_to_partition_alloc.cc
@@ -544,7 +544,8 @@ void ConfigurePartitions(
     SplitMainPartition split_main_partition,
     UseDedicatedAlignedPartition use_dedicated_aligned_partition,
     AddDummyRefCount add_dummy_ref_count,
-    AlternateBucketDistribution use_alternate_bucket_distribution) {
+    AlternateBucketDistribution use_alternate_bucket_distribution,
+    UseConfigurablePool use_configured_pool) {
   // BRP cannot be enabled without splitting the main partition. Furthermore, in
   // the "before allocation" mode, it can't be enabled without further splitting
   // out the aligned partition.
@@ -603,7 +604,9 @@ void ConfigurePartitions(
               ? partition_alloc::PartitionOptions::BackupRefPtrZapping::kEnabled
               : partition_alloc::PartitionOptions::BackupRefPtrZapping::
                     kDisabled,
-          partition_alloc::PartitionOptions::UseConfigurablePool::kNo,
+          use_configured_pool
+              ? partition_alloc::PartitionOptions::UseConfigurablePool::kIfAvailable
+              : partition_alloc::PartitionOptions::UseConfigurablePool::kNo,
           add_dummy_ref_count
               ? partition_alloc::PartitionOptions::AddDummyRefCount::kEnabled
               : partition_alloc::PartitionOptions::AddDummyRefCount::
diff --git a/content/app/content_main_runner_impl.cc b/content/app/content_main_runner_impl.cc
index 287abd4..9b6416d 100644
--- a/content/app/content_main_runner_impl.cc
+++ b/content/app/content_main_runner_impl.cc
@@ -671,8 +671,12 @@ int NO_STACK_PROTECTOR RunZygote(ContentMainDelegate* delegate) {
   delegate->PostEarlyInitialization(
       ContentMainDelegate::InvokedInChildProcess());
 
-  base::allocator::PartitionAllocSupport::Get()
-      ->ReconfigureAfterFeatureListInit(process_type);
+  std::string process_sub_type =
+      command_line->GetSwitchValueASCII(switches::kUtilitySubType);
+  if (process_sub_type != "node.mojom.NodeService") {
+    base::allocator::PartitionAllocSupport::Get()
+        ->ReconfigureAfterFeatureListInit(process_type);
+  }
 
   for (size_t i = 0; i < std::size(kMainFunctions); ++i) {
     if (process_type == kMainFunctions[i].name)
@@ -1090,8 +1094,12 @@ int NO_STACK_PROTECTOR ContentMainRunnerImpl::Run() {
       delegate_->PostEarlyInitialization(
           ContentMainDelegate::InvokedInChildProcess());
 
-      base::allocator::PartitionAllocSupport::Get()
-          ->ReconfigureAfterFeatureListInit(process_type);
+      std::string process_sub_type =
+          command_line->GetSwitchValueASCII(switches::kUtilitySubType);
+      if (process_sub_type != "node.mojom.NodeService") {
+        base::allocator::PartitionAllocSupport::Get()
+            ->ReconfigureAfterFeatureListInit(process_type);
+      }
     }
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
diff --git a/content/utility/utility_main.cc b/content/utility/utility_main.cc
index c88b40a..2ce89f5 100644
--- a/content/utility/utility_main.cc
+++ b/content/utility/utility_main.cc
@@ -346,8 +346,10 @@ int UtilityMain(MainFunctionParams parameters) {
   }
 #endif
 
-  base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterTaskRunnerInit(
-      switches::kUtilityProcess);
+  if (utility_sub_type != "node.mojom.NodeService") {
+    base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterTaskRunnerInit(
+        switches::kUtilityProcess);
+  }
 
   run_loop.Run();
 
