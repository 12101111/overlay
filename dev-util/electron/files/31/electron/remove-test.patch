diff --git a/patches/v8/revert_heap_add_checks_position_info.patch b/patches/v8/revert_heap_add_checks_position_info.patch
index 8dd51ddea8..74c98ff447 100644
--- a/patches/v8/revert_heap_add_checks_position_info.patch
+++ b/patches/v8/revert_heap_add_checks_position_info.patch
@@ -378,61 +378,3 @@ index 1b7170bd84c29d9e6228e92a8e3ad46d50967a15..417a487bd6767b15bb177394f4273af2
      buffer[buffer_pos++] = '\n';
      buffer[buffer_pos++] = '\0';
      writer_->AddString(buffer.begin());
-diff --git a/test/cctest/test-heap-profiler.cc b/test/cctest/test-heap-profiler.cc
-index 4885cab74f95378a9ff884d58a8c089624985a8f..f1e869f28e00c0449e85b00f3f4626e0941e4c43 100644
---- a/test/cctest/test-heap-profiler.cc
-+++ b/test/cctest/test-heap-profiler.cc
-@@ -2841,6 +2841,8 @@ TEST(ArrayGrowLeftTrim) {
-   AllocationTracker* tracker =
-       reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-   CHECK(tracker);
-+  // Resolve all function locations.
-+  tracker->PrepareForSerialization();
-   // Print for better diagnostics in case of failure.
-   tracker->trace_tree()->Print(tracker);
- 
-@@ -2863,6 +2865,8 @@ TEST(TrackHeapAllocationsWithInlining) {
-   AllocationTracker* tracker =
-       reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-   CHECK(tracker);
-+  // Resolve all function locations.
-+  tracker->PrepareForSerialization();
-   // Print for better diagnostics in case of failure.
-   tracker->trace_tree()->Print(tracker);
- 
-@@ -2895,6 +2899,8 @@ TEST(TrackHeapAllocationsWithoutInlining) {
-   AllocationTracker* tracker =
-       reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-   CHECK(tracker);
-+  // Resolve all function locations.
-+  tracker->PrepareForSerialization();
-   // Print for better diagnostics in case of failure.
-   tracker->trace_tree()->Print(tracker);
- 
-@@ -2943,6 +2949,8 @@ TEST(TrackBumpPointerAllocations) {
-     AllocationTracker* tracker =
-         reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-     CHECK(tracker);
-+    // Resolve all function locations.
-+    tracker->PrepareForSerialization();
-     // Print for better diagnostics in case of failure.
-     tracker->trace_tree()->Print(tracker);
- 
-@@ -2967,6 +2975,8 @@ TEST(TrackBumpPointerAllocations) {
-     AllocationTracker* tracker =
-         reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-     CHECK(tracker);
-+    // Resolve all function locations.
-+    tracker->PrepareForSerialization();
-     // Print for better diagnostics in case of failure.
-     tracker->trace_tree()->Print(tracker);
- 
-@@ -2994,6 +3004,8 @@ TEST(TrackV8ApiAllocation) {
-   AllocationTracker* tracker =
-       reinterpret_cast<i::HeapProfiler*>(heap_profiler)->allocation_tracker();
-   CHECK(tracker);
-+  // Resolve all function locations.
-+  tracker->PrepareForSerialization();
-   // Print for better diagnostics in case of failure.
-   tracker->trace_tree()->Print(tracker);
- 
diff --git a/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch b/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
index e4262eea7a..b613a911a3 100644
--- a/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
+++ b/patches/v8/merged_wasm_do_not_inline_wrappers_with_ref_extern_parameter.patch
@@ -49,79 +49,3 @@ index 798e7db458f38bd31aacb69c6fb0945fcd263992..b9619969ab1396bb04b8c5c1142b1b3e
        return false;
      }
    }
-diff --git a/test/cctest/test-js-to-wasm.cc b/test/cctest/test-js-to-wasm.cc
-index f7be048dbf5740c9306481dbf3bf1ea4b688b490..901fcbb214860370cc8f0dbf8f0d7a6af22704ae 100644
---- a/test/cctest/test-js-to-wasm.cc
-+++ b/test/cctest/test-js-to-wasm.cc
-@@ -93,13 +93,6 @@ DECLARE_EXPORTED_FUNCTION(i64_square, sigs.l_l(),
- DECLARE_EXPORTED_FUNCTION(externref_null_id, sigs.a_a(),
-                           WASM_CODE({WASM_LOCAL_GET(0)}))
- 
--static constexpr ValueType extern_extern_types[] = {kWasmExternRef.AsNonNull(),
--                                                    kWasmExternRef.AsNonNull()};
--static constexpr FunctionSig sig_extern_extern(1, 1, extern_extern_types);
--
--DECLARE_EXPORTED_FUNCTION(externref_id, &sig_extern_extern,
--                          WASM_CODE({WASM_LOCAL_GET(0)}))
--
- DECLARE_EXPORTED_FUNCTION(f32_square, sigs.f_f(),
-                           WASM_CODE({WASM_LOCAL_GET(0), WASM_LOCAL_GET(0),
-                                      kExprF32Mul}))
-@@ -862,19 +855,6 @@ TEST(TestFastJSWasmCall_ExternrefNullArg) {
-   tester.CallAndCheckWasmFunction("externref_null_id", args4, str);
- }
- 
--TEST(TestFastJSWasmCall_ExternrefArg) {
--  v8::HandleScope scope(CcTest::isolate());
--  FastJSWasmCallTester tester;
--  tester.AddExportedFunction(k_externref_id);
--  auto args1 = v8::to_array<v8::Local<v8::Value>>({v8_num(42)});
--  tester.CallAndCheckWasmFunction("externref_id", args1, 42);
--  auto args2 = v8::to_array<v8::Local<v8::Value>>({v8_bigint(42)});
--  tester.CallAndCheckWasmFunctionBigInt("externref_id", args2, v8_bigint(42));
--  auto str = v8_str("test");
--  auto args3 = v8::to_array<v8::Local<v8::Value>>({str});
--  tester.CallAndCheckWasmFunction("externref_id", args3, str);
--}
--
- TEST(TestFastJSWasmCall_MultipleArgs) {
-   v8::HandleScope scope(CcTest::isolate());
-   FastJSWasmCallTester tester;
-diff --git a/test/mjsunit/regress/wasm/regress-366635354.js b/test/mjsunit/regress/wasm/regress-366635354.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..18dcc41b0e79df5b715eca6c657d1490e60ed8a0
---- /dev/null
-+++ b/test/mjsunit/regress/wasm/regress-366635354.js
-@@ -0,0 +1,32 @@
-+// Copyright 2024 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --always-turbofan --allow-natives-syntax
-+
-+d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
-+
-+let builder = new WasmModuleBuilder();
-+builder.addFunction('foo', makeSig([wasmRefType(kWasmExternRef)], []))
-+    .addBody([kExprUnreachable])
-+    .exportFunc();
-+let instance = builder.instantiate();
-+const wasm_caller = () => instance.exports.foo(null);
-+
-+%PrepareFunctionForOptimization(wasm_caller);
-+testCallStack();
-+%OptimizeFunctionOnNextCall(wasm_caller);
-+testCallStack();
-+
-+function testCallStack() {
-+  try {
-+    wasm_caller();
-+    assertUnreachable();
-+  } catch (e) {
-+    assertMatches(
-+`TypeError: type incompatibility when transforming from/to JS
-+    at wasm_caller .*\\.js:14:44\\)
-+    at testCallStack .*\\.js:23:5\\).*`,
-+      e.stack,);
-+  }
-+}
