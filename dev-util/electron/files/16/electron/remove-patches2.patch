diff --git a/patches/chromium/fire_iframe_onload_for_cross-origin-initiated_same-document.patch b/patches/chromium/fire_iframe_onload_for_cross-origin-initiated_same-document.patch
index ab3699b08b..23ff901e16 100644
--- a/patches/chromium/fire_iframe_onload_for_cross-origin-initiated_same-document.patch
+++ b/patches/chromium/fire_iframe_onload_for_cross-origin-initiated_same-document.patch
@@ -46,146 +46,3 @@ index aa1b3ca0c8a877f4de5b819bdc52d335e6bc21c0..da83bd3077306c13e9536a61812434a1
  
    // If the item sequence number didn't change, there's no need to trigger
    // popstate, restore scroll positions, or scroll to fragments for this
-diff --git a/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async-expected.txt b/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async-expected.txt
-index 850c54970953c62eae282e177949f9082f22a03c..09122d9c3f39f042116d197276420cc1841c5ea8 100644
---- a/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async-expected.txt
-+++ b/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async-expected.txt
-@@ -1,4 +1,6 @@
-+ALERT: iframe onload fired
- ALERT: PASS: url fragment is changing asynchronously
- ALERT: PASS: scheduled postMessage() before hashchange triggered.
-+ALERT: iframe onload fired
- ALERT: PASS: hashchange triggered after postMessage().
--This tests that cross-origin fragment navigations are asynchronous. It does so by scheduling a postMessage before scheduling the navigation. If the navigation is synchronous, the internals API will be able to report the presence of an url fragment immediately.
-+This tests that cross-origin-initiated fragment navigations are asynchronous and always fire the load event at their embedding iframe element if it's cross-origin. It does so by scheduling a postMessage before scheduling the navigation. If the navigation is synchronous, the internals API will be able to report the presence of an url fragment immediately.
-diff --git a/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async.html b/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async.html
-index 3d74de086c1a7f8a5fedff72d7c6bb970fca57ed..a1fc3bc87ccd2319f2dff3c5d8729a1a62875ec8 100644
---- a/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async.html
-+++ b/third_party/blink/web_tests/http/tests/navigation/cross-origin-fragment-navigation-is-async.html
-@@ -1,48 +1,51 @@
- <!DOCTYPE html>
- <html>
--<head>
--    <script>
--        if (window.testRunner) {
--            testRunner.dumpAsText();
--            testRunner.waitUntilDone();
--        }
-+<body>
-+<script>
-+if (window.testRunner) {
-+    testRunner.dumpAsText();
-+    testRunner.waitUntilDone();
-+}
- 
--        function testFragmentNavigation() {
--            window.postMessage("postmessage", "*");
--            document.querySelector('iframe').src = "http://localhost:8000/navigation/resources/postmessage-on-hashchange.html#anchor1";
--            if (window.internals) {
--                if (internals.doesWindowHaveUrlFragment(document.querySelector('iframe').contentWindow))
--                    alert("FAIL: url fragment should change asynchronously");
--                else
--                    alert("PASS: url fragment is changing asynchronously");
--            }
--        }
-+window.onload = function() {
-+    window.postMessage("postmessage", "*");
-+    document.querySelector('iframe').src = "http://localhost:8000/navigation/resources/postmessage-on-hashchange.html#anchor1";
-+    if (window.internals) {
-+        if (internals.doesWindowHaveUrlFragment(document.querySelector('iframe').contentWindow))
-+            alert("FAIL: url fragment should change asynchronously");
-+        else
-+            alert("PASS: url fragment is changing asynchronously");
-+    }
-+}
- 
--        var receivedScheduledPostMessage = false;
--        var receivedHashchangeMessage = false;
--        window.addEventListener('message', function (e) {
--            if (e.data === 'postmessage') {
--                receivedScheduledPostMessage = true;
--                if (receivedHashchangeMessage)
--                    alert('FAIL: hashchange already triggered!');
--                else
--                    alert('PASS: scheduled postMessage() before hashchange triggered.');
--            } else {
--                receivedHashchangeMessage = true;
--                if (receivedScheduledPostMessage)
--                    alert('PASS: hashchange triggered after postMessage().');
--                else
--                    alert('FAIL: hashchange triggered before postMessage().');
--                testRunner.notifyDone();
--            }
--        });
--    </script>
--</head>
--<body>
--    <p>This tests that cross-origin fragment navigations are asynchronous. It does
--    so by scheduling a postMessage before scheduling the navigation. If the
--    navigation is synchronous, the internals API will be able to report the presence
--    of an url fragment immediately.</p>
--    <iframe src="http://localhost:8000/navigation/resources/postmessage-on-hashchange.html" onload='testFragmentNavigation()'></iframe>
-+var receivedScheduledPostMessage = false;
-+var receivedHashchangeMessage = false;
-+window.addEventListener('message', function (e) {
-+    if (e.data === 'postmessage') {
-+        receivedScheduledPostMessage = true;
-+        if (receivedHashchangeMessage)
-+            alert('FAIL: hashchange already triggered!');
-+        else
-+            alert('PASS: scheduled postMessage() before hashchange triggered.');
-+    } else {
-+        receivedHashchangeMessage = true;
-+        if (receivedScheduledPostMessage)
-+            alert('PASS: hashchange triggered after postMessage().');
-+        else
-+            alert('FAIL: hashchange triggered before postMessage().');
-+        testRunner.notifyDone();
-+    }
-+});
-+
-+function onloadFired() {
-+    alert("iframe onload fired");
-+}
-+</script>
-+<p>This tests that cross-origin-initiated fragment navigations are asynchronous
-+and always fire the load event at their embedding iframe element if it's cross-origin. It does
-+so by scheduling a postMessage before scheduling the navigation. If the
-+navigation is synchronous, the internals API will be able to report the presence
-+of an url fragment immediately.</p>
-+<iframe src="http://localhost:8000/navigation/resources/postmessage-on-hashchange.html" onload="onloadFired()"></iframe>
- </body>
- </html>
-diff --git a/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync-expected.txt b/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync-expected.txt
-index c1c1143026cad5cfe51829a8c34d61c01a63ffbf..5a6ccc855e14417df8039f18dba7aa0474ff552d 100644
---- a/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync-expected.txt
-+++ b/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync-expected.txt
-@@ -1,3 +1,4 @@
-+ALERT: iframe onload fired
- ALERT: PASS: url fragment has changed synchronously
- ALERT: PASS: scheduled postMessage() before hashchange triggered.
- ALERT: PASS: hashchange triggered after postMessage().
-diff --git a/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync.html b/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync.html
-index 0ffe3cc8759e8e0ff4df7cad66c93cd5e2cbbe69..2cb9143bfce9a28d8803b49cf6afa7403554cdf4 100644
---- a/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync.html
-+++ b/third_party/blink/web_tests/http/tests/navigation/same-origin-fragment-navigation-is-sync.html
-@@ -36,6 +36,11 @@
-                 testRunner.notifyDone();
-             }
-         });
-+
-+    function onloadFired() {
-+        alert("iframe onload fired");
-+        testFragmentNavigation();
-+    }
-     </script>
- </head>
- <body>
-@@ -43,6 +48,6 @@
-     so by scheduling a postMessage before scheduling the navigation. If the
-     navigation is synchronous, the internals API will be able to report the presence
-     of an url fragment immediately.</p>
--    <iframe src="http://127.0.0.1:8000/navigation/resources/postmessage-on-hashchange.html" onload='testFragmentNavigation()'></iframe>
-+    <iframe src="http://127.0.0.1:8000/navigation/resources/postmessage-on-hashchange.html" onload='onloadFired()'></iframe>
- </body>
- </html>
diff --git a/patches/v8/cherry-pick-27bc67f761e6.patch b/patches/v8/cherry-pick-27bc67f761e6.patch
index 320b6ac210..3354c749e6 100644
--- a/patches/v8/cherry-pick-27bc67f761e6.patch
+++ b/patches/v8/cherry-pick-27bc67f761e6.patch
@@ -226,28 +226,3 @@ index 5e5d997d6903dd5b0dd55b2fadef8b4dee9581be..aec12d3aefd8e6821a3c50633ae7dad6
  
    return ReadOnlyRoots(isolate).undefined_value();
  }
-diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
-index 61398f2c5ea6cd4bbc57403eb0ddf97d2fb5f575..4b64d307887d28c844b08e9e0524e03fc2dd4183 100644
---- a/test/cctest/test-api.cc
-+++ b/test/cctest/test-api.cc
-@@ -70,6 +70,7 @@
- #include "src/objects/js-array-inl.h"
- #include "src/objects/js-promise-inl.h"
- #include "src/objects/lookup.h"
-+#include "src/objects/map-updater.h"
- #include "src/objects/module-inl.h"
- #include "src/objects/objects-inl.h"
- #include "src/objects/string-inl.h"
-@@ -2981,9 +2982,9 @@ TEST(InternalFieldsSubclassing) {
-         CHECK_LE(i_value->map().GetInObjectProperties(), kMaxNofProperties);
-       }
- 
--      // Make Sure we get the precise property count.
--      i_value->map().FindRootMap(i_isolate).CompleteInobjectSlackTracking(
--          i_isolate);
-+      // Make sure we get the precise property count.
-+      i::MapUpdater::CompleteInobjectSlackTracking(
-+          i_isolate, i_value->map().FindRootMap(i_isolate));
-       // TODO(cbruni): fix accounting to make this condition true.
-       // CHECK_EQ(0, i_value->map()->UnusedPropertyFields());
-       if (in_object_only) {
diff --git a/patches/chromium/merge_m-97_serial_check_for_detached_buffers_when_writing.patch b/patches/chromium/merge_m-97_serial_check_for_detached_buffers_when_writing.patch
index 52581f51bd..cd6b1827c9 100644
--- a/patches/chromium/merge_m-97_serial_check_for_detached_buffers_when_writing.patch
+++ b/patches/chromium/merge_m-97_serial_check_for_detached_buffers_when_writing.patch
@@ -53,70 +53,3 @@ index 08ab2c7e05668710b77712f3ffc0d5aeef4dd213..7876baf19a1f547c71e2a115db8a2cc4
    const uint8_t* data = array_piece.Bytes();
    const uint32_t length = static_cast<uint32_t>(array_piece.ByteLength());
  
-diff --git a/third_party/blink/web_tests/external/wpt/serial/serialPort_writable.https.any.js b/third_party/blink/web_tests/external/wpt/serial/serialPort_writable.https.any.js
-index 9728af7de5051dce874e10082e1443a3ca9fa7dc..5e3b8548a91ddc2a0afa9793dea167f8e89defe3 100644
---- a/third_party/blink/web_tests/external/wpt/serial/serialPort_writable.https.any.js
-+++ b/third_party/blink/web_tests/external/wpt/serial/serialPort_writable.https.any.js
-@@ -70,7 +70,7 @@ serial_test(async (t, fake) => {
-   compareArrays(data, value);
- 
-   await port.close();
--}, 'Can read a large amount of data');
-+}, 'Can write a large amount of data');
- 
- serial_test(async (t, fake) => {
-   const {port, fakePort} = await getFakeSerialPort(fake);
-diff --git a/third_party/blink/web_tests/external/wpt/serial/serialPort_writable_detachBuffer.https.any.js b/third_party/blink/web_tests/external/wpt/serial/serialPort_writable_detachBuffer.https.any.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..828e877726b1c63dba14efc36324d9a16aa4e62f
---- /dev/null
-+++ b/third_party/blink/web_tests/external/wpt/serial/serialPort_writable_detachBuffer.https.any.js
-@@ -0,0 +1,48 @@
-+// META: script=/resources/test-only-api.js
-+// META: script=/serial/resources/common.js
-+// META: script=resources/automation.js
-+
-+function detachBuffer(buffer) {
-+  const channel = new MessageChannel();
-+  channel.port1.postMessage('', [buffer]);
-+}
-+
-+serial_test(async (t, fake) => {
-+  const {port, fakePort} = await getFakeSerialPort(fake);
-+  await port.open({baudRate: 9600, bufferSize: 64});
-+
-+  const writer = port.writable.getWriter();
-+  const data = new Uint8Array(64);
-+  detachBuffer(data.buffer);
-+
-+  // Writing a detached buffer is equivalent to writing an empty buffer so this
-+  // should trivially succeed.
-+  await writer.write(data);
-+  writer.releaseLock();
-+
-+  await port.close();
-+}, 'Writing a detached buffer is safe');
-+
-+serial_test(async (t, fake) => {
-+  const {port, fakePort} = await getFakeSerialPort(fake);
-+  // Select a buffer size smaller than the amount of data transferred.
-+  await port.open({baudRate: 9600, bufferSize: 64});
-+
-+  // Start writing a buffer much larger than bufferSize above so that it can't
-+  // all be transfered in a single operation.
-+  const writer = port.writable.getWriter();
-+  const data = new Uint8Array(1024);
-+  const promise = writer.write(data);
-+  writer.releaseLock();
-+
-+  // Read half of the written data and then detach the buffer.
-+  await fakePort.readable();
-+  await fakePort.readWithLength(data.byteLength / 2);
-+  detachBuffer(data.buffer);
-+
-+  // When the buffer is detached its length becomes zero and so the write should
-+  // succeed but it is undefined how much data was written before that happened.
-+  await promise;
-+
-+  await port.close();
-+}, 'Detaching a buffer while writing is safe');
diff --git a/patches/chromium/enable_forcesynchronoushtmlparsing_by_default.patch b/patches/chromium/enable_forcesynchronoushtmlparsing_by_default.patch
index a068d1fad0..afa3cc6dbb 100644
--- a/patches/chromium/enable_forcesynchronoushtmlparsing_by_default.patch
+++ b/patches/chromium/enable_forcesynchronoushtmlparsing_by_default.patch
@@ -143,22 +143,3 @@ index 88e4a9fdd359dfe63f2b932a7ddd401fc330d6fc..0e59a70e458ebf1a6a8e8c68e3086dde
  
    consumer->Add(Command(Command::kData, std::string(kMax - 1, 'a').data()));
    consumer->Add(Command(Command::kData, std::string(2, 'b').data()));
-diff --git a/third_party/blink/web_tests/platform/fuchsia/external/wpt/html/semantics/interactive-elements/the-details-element/toggleEvent-expected.txt b/third_party/blink/web_tests/platform/fuchsia/external/wpt/html/semantics/interactive-elements/the-details-element/toggleEvent-expected.txt
-deleted file mode 100644
-index 5c808aa0a050a4ad866e65445b3fbd7c6807903d..0000000000000000000000000000000000000000
---- a/third_party/blink/web_tests/platform/fuchsia/external/wpt/html/semantics/interactive-elements/the-details-element/toggleEvent-expected.txt
-+++ /dev/null
-@@ -1,13 +0,0 @@
--This is a testharness.js-based test.
--PASS Adding open to 'details' should fire a toggle event at the 'details' element
--PASS Removing open from 'details' should fire a toggle event at the 'details' element
--PASS Adding open to 'details' (display:none) should fire a toggle event at the 'details' element
--PASS Adding open from 'details' (no children) should fire a toggle event at the 'details' element
--PASS Calling open twice on 'details' fires only one toggle event
--PASS Calling setAttribute('open', '') to 'details' should fire a toggle event at the 'details' element
--PASS Calling removeAttribute('open') to 'details' should fire a toggle event at the 'details' element
--FAIL Setting open=true to opened 'details' element should not fire a toggle event at the 'details' element assert_true: expected true got false
--PASS Setting open=false to closed 'details' element should not fire a toggle event at the 'details' element
--PASS Adding open to 'details' (not in the document) should fire a toggle event at the 'details' element
--Harness: the test ran to completion.
--
diff --git a/patches/v8/cherry-pick-26b7ad6967b1.patch b/patches/v8/cherry-pick-26b7ad6967b1.patch
index 42cf8b83bf..d569719204 100644
--- a/patches/v8/cherry-pick-26b7ad6967b1.patch
+++ b/patches/v8/cherry-pick-26b7ad6967b1.patch
@@ -48,37 +48,3 @@ index db5a905f9c763c732770813a283ea02b0d121a2e..8a865151aeb5778a0fc4a0f16ac27070
        }
  
        case LookupIterator::ACCESSOR: {
-diff --git a/test/cctest/test-api-interceptors.cc b/test/cctest/test-api-interceptors.cc
-index 25a5bdd4f5831942819aedbaa2d56f0e6cdb6ea6..3ba70e41b1c48354ca038bc57452d4e50050a24e 100644
---- a/test/cctest/test-api-interceptors.cc
-+++ b/test/cctest/test-api-interceptors.cc
-@@ -5636,10 +5636,10 @@ void DatabaseGetter(Local<Name> name,
-                     const v8::PropertyCallbackInfo<Value>& info) {
-   ApiTestFuzzer::Fuzz();
-   auto context = info.GetIsolate()->GetCurrentContext();
--  Local<v8::Object> db = info.Holder()
--                             ->GetRealNamedProperty(context, v8_str("db"))
--                             .ToLocalChecked()
--                             .As<v8::Object>();
-+  v8::MaybeLocal<Value> maybe_db =
-+      info.Holder()->GetRealNamedProperty(context, v8_str("db"));
-+  if (maybe_db.IsEmpty()) return;
-+  Local<v8::Object> db = maybe_db.ToLocalChecked().As<v8::Object>();
-   if (!db->Has(context, name).FromJust()) return;
-   info.GetReturnValue().Set(db->Get(context, name).ToLocalChecked());
- }
-diff --git a/test/unittests/api/interceptor-unittest.cc b/test/unittests/api/interceptor-unittest.cc
-index a1f6cbdc369e1d7b0eb38e96ce43e1dce9025b1e..635bf6a0b72f8d49591be333b1314846c9c47269 100644
---- a/test/unittests/api/interceptor-unittest.cc
-+++ b/test/unittests/api/interceptor-unittest.cc
-@@ -174,8 +174,8 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
-   EXPECT_EQ(Run("obj.foo"), "named getter");
-   EXPECT_EQ(Run("obj[42]"), "indexed getter");
- 
--  EXPECT_EQ(Run("obj.foo = null"), "named setter");
--  EXPECT_EQ(Run("obj[42] = null"), "indexed setter");
-+  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
-+  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
- 
-   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
-             "named descriptor");
