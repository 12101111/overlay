diff --git a/goldendict.pro b/goldendict.pro
index 4a4a3094..b4985daa 100644
--- a/goldendict.pro
+++ b/goldendict.pro
@@ -165,6 +165,7 @@ unix:!mac {
     } else {
         LIBS += -lX11 -lXtst
     }
+    LIBS += -lexecinfo
 
     # Install prefix: first try to use qmake's PREFIX variable,
     # then $PREFIX from system environment, and if both fails,
diff --git a/main.cc b/main.cc
index f6a85c07..ae9759a5 100644
--- a/main.cc
+++ b/main.cc
@@ -210,6 +210,8 @@ public:
   ~LogFilePtrGuard() { logFilePtr = 0; }
 };
 
+#include <locale.h>
+
 int main( int argc, char ** argv )
 {
 #ifdef Q_OS_UNIX
diff --git a/mdictparser.cc b/mdictparser.cc
index 5139ad7c..4d26b1d8 100644
--- a/mdictparser.cc
+++ b/mdictparser.cc
@@ -22,7 +22,6 @@
 
 #include <errno.h>
 #include <zlib.h>
-#include <iconv.h>
 #include <lzo/lzo1x.h>
 
 #include <QtEndian>
@@ -37,6 +36,8 @@
 #include <QDomDocument>
 #include <QTextDocumentFragment>
 #include <QDataStream>
+#include <QTextCodec>
+#include <QByteArray>
 
 #include "decompress.hh"
 #include "gddebug.hh"
@@ -184,38 +185,10 @@ QString MdictParser::toUtf16( const char * fromCode, const char * from, size_t f
   if ( !fromCode || !from )
     return QString();
 
-  iconv_t conv = iconv_open( "UTF-16//IGNORE", fromCode );
-  if ( conv == ( iconv_t ) - 1 )
-    return QString();
-
-  vector<char> result;
-  const static int CHUNK_SIZE = 512;
-  char buf[CHUNK_SIZE];
-  char ** inBuf = ( char ** )&from;
-
-  while ( fromSize )
-  {
-    char * outBuf = buf;
-    size_t outBytesLeft = CHUNK_SIZE;
-    size_t ret = iconv( conv, inBuf, &fromSize, &outBuf, &outBytesLeft );
-
-    if ( ret == ( size_t ) - 1 )
-    {
-      if ( errno != E2BIG )
-      {
-        // Real problem
-        result.clear();
-        break;
-      }
-    }
-
-    result.insert( result.end(), buf, buf + CHUNK_SIZE - outBytesLeft );
-  }
-
-  iconv_close( conv );
-  if ( result.size() <= 2 )
-    return QString();
-  return QString::fromUtf16( ( const ushort * )&result.front() );
+  QByteArray encodedString = QByteArray(from);
+  QTextCodec *codec = QTextCodec::codecForName(fromCode);
+  QString result = codec->toUnicode(encodedString);
+  return result;
 }
 
 bool MdictParser::decryptHeadWordIndex(char * buffer, qint64 len)
