From f85199c17cca5747ef51d51c53a3c9f800e90be0 Mon Sep 17 00:00:00 2001
From: David Parks <daparks@mozilla.com>
Date: Mon, 5 Apr 2021 23:48:36 +0000
Subject: [PATCH] Bug 1682030 - Remove NPAPI support from ClearDataService. 
 r=baku

Removes NPAPI plugin support from the ClearDataService as part of removing all of NPAPI.

Differential Revision: https://phabricator.services.mozilla.com/D107146
---
 browser/modules/Sanitizer.jsm                 |   8 +-
 browser/modules/SiteDataManager.jsm           |   4 +-
 .../geckoview/GeckoViewStorageController.jsm  |   1 -
 .../antitracking/PurgeTrackerService.jsm      |   1 -
 .../components/cleardata/ClearDataService.jsm | 109 ------------------
 .../cleardata/nsIClearDataService.idl         |   7 +-
 6 files changed, 4 insertions(+), 126 deletions(-)

diff --git a/browser/modules/Sanitizer.jsm b/browser/modules/Sanitizer.jsm
index a4458e1a29135..c643a3c2a0924 100644
--- a/browser/modules/Sanitizer.jsm
+++ b/browser/modules/Sanitizer.jsm
@@ -359,7 +359,6 @@ var Sanitizer = {
         await clearData(
           range,
           Ci.nsIClearDataService.CLEAR_COOKIES |
-            Ci.nsIClearDataService.CLEAR_PLUGIN_DATA |
             Ci.nsIClearDataService.CLEAR_MEDIA_DEVICES
         );
         TelemetryStopwatch.finish("FX_SANITIZE_COOKIES_2", refObj);
@@ -656,9 +655,7 @@ var Sanitizer = {
     },
 
     pluginData: {
-      async clear(range) {
-        await clearData(range, Ci.nsIClearDataService.CLEAR_PLUGIN_DATA);
-      },
+      async clear(range) {},
     },
   },
 };
@@ -978,8 +975,7 @@ async function sanitizeSessionPrincipal(progress, principal) {
         Ci.nsIClearDataService.CLEAR_COOKIES |
         Ci.nsIClearDataService.CLEAR_DOM_STORAGES |
         Ci.nsIClearDataService.CLEAR_SECURITY_SETTINGS |
-        Ci.nsIClearDataService.CLEAR_EME |
-        Ci.nsIClearDataService.CLEAR_PLUGIN_DATA,
+        Ci.nsIClearDataService.CLEAR_EME,
       resolve
     );
   });
diff --git a/browser/modules/SiteDataManager.jsm b/browser/modules/SiteDataManager.jsm
index f2bc55184a7cc..1eb88ced15f22 100644
--- a/browser/modules/SiteDataManager.jsm
+++ b/browser/modules/SiteDataManager.jsm
@@ -488,7 +488,6 @@ var SiteDataManager = {
         Ci.nsIClearDataService.CLEAR_COOKIES |
         Ci.nsIClearDataService.CLEAR_DOM_STORAGES |
         Ci.nsIClearDataService.CLEAR_SECURITY_SETTINGS |
-        Ci.nsIClearDataService.CLEAR_PLUGIN_DATA |
         Ci.nsIClearDataService.CLEAR_EME |
         Ci.nsIClearDataService.CLEAR_ALL_CACHES;
       promises.push(
@@ -608,8 +607,7 @@ var SiteDataManager = {
         Ci.nsIClearDataService.CLEAR_COOKIES |
           Ci.nsIClearDataService.CLEAR_DOM_STORAGES |
           Ci.nsIClearDataService.CLEAR_SECURITY_SETTINGS |
-          Ci.nsIClearDataService.CLEAR_EME |
-          Ci.nsIClearDataService.CLEAR_PLUGIN_DATA,
+          Ci.nsIClearDataService.CLEAR_EME,
         resolve
       );
     });
diff --git a/mobile/android/modules/geckoview/GeckoViewStorageController.jsm b/mobile/android/modules/geckoview/GeckoViewStorageController.jsm
index 86eb5662c4f9d..294102318ed2d 100644
--- a/mobile/android/modules/geckoview/GeckoViewStorageController.jsm
+++ b/mobile/android/modules/geckoview/GeckoViewStorageController.jsm
@@ -27,7 +27,6 @@ const ClearFlags = [
     // COOKIES
     1 << 0,
     Ci.nsIClearDataService.CLEAR_COOKIES |
-      Ci.nsIClearDataService.CLEAR_PLUGIN_DATA |
       Ci.nsIClearDataService.CLEAR_MEDIA_DEVICES,
   ],
   [
diff --git a/toolkit/components/antitracking/PurgeTrackerService.jsm b/toolkit/components/antitracking/PurgeTrackerService.jsm
index 81150aa79f91b..5aeebb10c49cc 100644
--- a/toolkit/components/antitracking/PurgeTrackerService.jsm
+++ b/toolkit/components/antitracking/PurgeTrackerService.jsm
@@ -207,7 +207,6 @@ PurgeTrackerService.prototype = {
           Ci.nsIClearDataService.CLEAR_DOM_STORAGES |
           Ci.nsIClearDataService.CLEAR_SECURITY_SETTINGS |
           Ci.nsIClearDataService.CLEAR_EME |
-          Ci.nsIClearDataService.CLEAR_PLUGIN_DATA |
           Ci.nsIClearDataService.CLEAR_MEDIA_DEVICES |
           Ci.nsIClearDataService.CLEAR_STORAGE_ACCESS |
           Ci.nsIClearDataService.CLEAR_AUTH_TOKENS |
diff --git a/toolkit/components/cleardata/ClearDataService.jsm b/toolkit/components/cleardata/ClearDataService.jsm
index 12da4e7b83fbf..c59b1205b9687 100644
--- a/toolkit/components/cleardata/ClearDataService.jsm
+++ b/toolkit/components/cleardata/ClearDataService.jsm
@@ -14,7 +14,6 @@ const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetters(this, {
   AppConstants: "resource://gre/modules/AppConstants.jsm",
-  setTimeout: "resource://gre/modules/Timer.jsm",
   Downloads: "resource://gre/modules/Downloads.jsm",
   OfflineAppCacheHelper: "resource://gre/modules/offlineAppCache.jsm",
   ServiceWorkerCleanUp: "resource://gre/modules/ServiceWorkerCleanUp.jsm",
@@ -248,109 +247,6 @@ const ImageCacheCleaner = {
   },
 };
 
-const PluginDataCleaner = {
-  deleteByHost(aHost, aOriginAttributes) {
-    return this._deleteInternal((aPh, aTag) => {
-      return new Promise(aResolve => {
-        try {
-          aPh.clearSiteData(
-            aTag,
-            aHost,
-            Ci.nsIPluginHost.FLAG_CLEAR_ALL,
-            -1,
-            aResolve
-          );
-        } catch (e) {
-          // Ignore errors from the plugin, but resolve the promise
-          // We cannot check if something is a bailout or an error
-          aResolve();
-        }
-      });
-    });
-  },
-
-  deleteByRange(aFrom, aTo) {
-    let age = Date.now() / 1000 - aFrom / 1000000;
-
-    return this._deleteInternal((aPh, aTag) => {
-      return new Promise(aResolve => {
-        try {
-          aPh.clearSiteData(
-            aTag,
-            null,
-            Ci.nsIPluginHost.FLAG_CLEAR_ALL,
-            age,
-            aResolve
-          );
-        } catch (e) {
-          aResolve(Cr.NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED);
-        }
-      }).then(aRv => {
-        // If the plugin doesn't support clearing by age, clear everything.
-        if (aRv == Cr.NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED) {
-          return new Promise(aResolve => {
-            try {
-              aPh.clearSiteData(
-                aTag,
-                null,
-                Ci.nsIPluginHost.FLAG_CLEAR_ALL,
-                -1,
-                aResolve
-              );
-            } catch (e) {
-              aResolve();
-            }
-          });
-        }
-
-        return true;
-      });
-    });
-  },
-
-  deleteAll() {
-    return this._deleteInternal((aPh, aTag) => {
-      return new Promise(aResolve => {
-        try {
-          aPh.clearSiteData(
-            aTag,
-            null,
-            Ci.nsIPluginHost.FLAG_CLEAR_ALL,
-            -1,
-            aResolve
-          );
-        } catch (e) {
-          aResolve();
-        }
-      });
-    });
-  },
-
-  _deleteInternal(aCb) {
-    let ph = Cc["@mozilla.org/plugin/host;1"].getService(Ci.nsIPluginHost);
-
-    let promises = [];
-    let tags = ph.getPluginTags();
-    for (let tag of tags) {
-      if (tag.loaded) {
-        promises.push(aCb(ph, tag));
-      }
-    }
-
-    // As evidenced in bug 1253204, clearing plugin data can sometimes be
-    // very, very long, for mysterious reasons. Unfortunately, this is not
-    // something actionable by Mozilla, so crashing here serves no purpose.
-    //
-    // For this reason, instead of waiting for sanitization to always
-    // complete, we introduce a soft timeout. Once this timeout has
-    // elapsed, we proceed with the shutdown of Firefox.
-    return Promise.race([
-      Promise.all(promises),
-      new Promise(aResolve => setTimeout(aResolve, 10000 /* 10 seconds */)),
-    ]);
-  },
-};
-
 const DownloadsCleaner = {
   deleteByHost(aHost, aOriginAttributes) {
     return Downloads.getList(Downloads.ALL).then(aList => {
@@ -1124,11 +1020,6 @@ const FLAGS_MAP = [
     cleaners: [CSSCacheCleaner],
   },
 
-  {
-    flag: Ci.nsIClearDataService.CLEAR_PLUGIN_DATA,
-    cleaners: [PluginDataCleaner],
-  },
-
   {
     flag: Ci.nsIClearDataService.CLEAR_DOWNLOADS,
     cleaners: [DownloadsCleaner, AboutHomeStartupCacheCleaner],
diff --git a/toolkit/components/cleardata/nsIClearDataService.idl b/toolkit/components/cleardata/nsIClearDataService.idl
index 4db1dc5ad4192..511cb56e3905d 100644
--- a/toolkit/components/cleardata/nsIClearDataService.idl
+++ b/toolkit/components/cleardata/nsIClearDataService.idl
@@ -142,11 +142,6 @@ interface nsIClearDataService : nsISupports
    */
   const uint32_t CLEAR_IMAGE_CACHE = 1 << 2;
 
-  /**
-   * Data stored by external plugins.
-   */
-  const uint32_t CLEAR_PLUGIN_DATA = 1 << 3;
-
   /**
    * Completed downloads.
    */
@@ -273,7 +268,7 @@ interface nsIClearDataService : nsISupports
    */
   const uint32_t CLEAR_FORGET_ABOUT_SITE =
     CLEAR_HISTORY | CLEAR_SESSION_HISTORY | CLEAR_ALL_CACHES |
-    CLEAR_COOKIES | CLEAR_EME | CLEAR_PLUGIN_DATA | CLEAR_DOWNLOADS | CLEAR_PASSWORDS |
+    CLEAR_COOKIES | CLEAR_EME | CLEAR_DOWNLOADS | CLEAR_PASSWORDS |
     CLEAR_PERMISSIONS | CLEAR_DOM_STORAGES | CLEAR_CONTENT_PREFERENCES |
     CLEAR_PREDICTOR_NETWORK_DATA | CLEAR_DOM_PUSH_NOTIFICATIONS |
     CLEAR_SECURITY_SETTINGS | CLEAR_REPORTS | CLEAR_CERT_EXCEPTIONS;
