From c98afdb2a8444cf5fa5b5ebad0e842ccb1ddfd74 Mon Sep 17 00:00:00 2001
From: David Parks <daparks@mozilla.com>
Date: Mon, 5 Apr 2021 23:48:40 +0000
Subject: [PATCH] Bug 1682030 - Remove CTP option from about:addons 
 r=mixedpuppy

As part of removing all NPAPI plugin support, CTP is no longer relevant (it does not apply to GMP plugins) so we remove the option from about:addons.

Differential Revision: https://phabricator.services.mozilla.com/D107154
---
 .../en-US/toolkit/about/aboutAddons.ftl       |  1 -
 toolkit/mozapps/extensions/AddonManager.jsm   | 36 +------------------
 .../extensions/content/aboutaddons.html       |  1 -
 .../mozapps/extensions/content/aboutaddons.js |  7 ----
 .../extensions/internal/GMPProvider.jsm       |  3 +-
 .../extensions/internal/XPIProvider.jsm       | 11 ++----
 6 files changed, 5 insertions(+), 54 deletions(-)

diff --git a/toolkit/locales/en-US/toolkit/about/aboutAddons.ftl b/toolkit/locales/en-US/toolkit/about/aboutAddons.ftl
index 0418acb3a10c2..e8d9924e9da7f 100644
--- a/toolkit/locales/en-US/toolkit/about/aboutAddons.ftl
+++ b/toolkit/locales/en-US/toolkit/about/aboutAddons.ftl
@@ -398,7 +398,6 @@ dictionary-disabled-heading = Disabled
 locale-enabled-heading = Enabled
 locale-disabled-heading = Disabled
 
-ask-to-activate-button = Ask to Activate
 always-activate-button = Always Activate
 never-activate-button = Never Activate
 
diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
index 2779edc288989..072ec04741664 100644
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -489,18 +489,8 @@ AddonScreenshot.prototype = {
  * @param  aUIPriority
  *         The priority is used by the UI to list the types in order. Lower
  *         values push the type higher in the list.
- * @param  aFlags
- *         An option set of flags that customize the display of the add-on in
- *         the UI.
  */
-function AddonType(
-  aID,
-  aLocaleURI,
-  aLocaleKey,
-  aViewType,
-  aUIPriority,
-  aFlags
-) {
+function AddonType(aID, aLocaleURI, aLocaleKey, aViewType, aUIPriority) {
   if (!aID) {
     throw Components.Exception(
       "An AddonType must have an ID",
@@ -525,7 +515,6 @@ function AddonType(
   this.id = aID;
   this.uiPriority = aUIPriority;
   this.viewType = aViewType;
-  this.flags = aFlags;
 
   if (aLocaleURI) {
     XPCOMUtils.defineLazyGetter(this, "name", () => {
@@ -3885,9 +3874,6 @@ var AddonManager = {
   PERM_CAN_DISABLE: 4,
   // Indicates that the Addon can be upgraded.
   PERM_CAN_UPGRADE: 8,
-  // Indicates that the Addon can be set to be optionally enabled
-  // on a case-by-case basis.
-  PERM_CAN_ASK_TO_ACTIVATE: 16,
   // Indicates that the Addon can be set to be allowed/disallowed
   // in private browsing windows.
   PERM_CAN_CHANGE_PRIVATEBROWSING_ACCESS: 32,
@@ -3912,20 +3898,6 @@ var AddonManager = {
   // Add-on type is expected to be displayed in the UI in a list.
   VIEW_TYPE_LIST: "list",
 
-  // Constants describing how add-on types behave.
-
-  // If no add-ons of a type are installed, then the category for that add-on
-  // type should be hidden in the UI.
-  TYPE_UI_HIDE_EMPTY: 16,
-  // Indicates that this add-on type supports the ask-to-activate state.
-  // That is, add-ons of this type can be set to be optionally enabled
-  // on a case-by-case basis.
-  TYPE_SUPPORTS_ASK_TO_ACTIVATE: 32,
-  // The add-on type natively supports undo for restartless uninstalls.
-  // If this flag is not specified, the UI is expected to handle this via
-  // disabling the add-on, and performing the actual uninstall at a later time.
-  TYPE_SUPPORTS_UNDO_RESTARTLESS_UNINSTALL: 64,
-
   // Constants for Addon.applyBackgroundUpdates.
   // Indicates that the Addon should not update automatically.
   AUTOUPDATE_DISABLE: 0,
@@ -3989,12 +3961,6 @@ var AddonManager = {
   // Add-on is signed with a "Mozilla Extensions" certificate
   SIGNEDSTATE_PRIVILEGED: 4,
 
-  // Constants for the Addon.userDisabled property
-  // Indicates that the userDisabled state of this add-on is currently
-  // ask-to-activate. That is, it can be conditionally enabled on a
-  // case-by-case basis.
-  STATE_ASK_TO_ACTIVATE: "askToActivate",
-
   get __AddonManagerInternal__() {
     return AppConstants.DEBUG ? AddonManagerInternal : undefined;
   },
diff --git a/toolkit/mozapps/extensions/content/aboutaddons.html b/toolkit/mozapps/extensions/content/aboutaddons.html
index 70e608beccf8e..6f04acf2db95f 100644
--- a/toolkit/mozapps/extensions/content/aboutaddons.html
+++ b/toolkit/mozapps/extensions/content/aboutaddons.html
@@ -112,7 +112,6 @@
 
     <template name="plugin-options">
       <panel-list>
-        <panel-item data-l10n-id="ask-to-activate-button" action="ask-to-activate"></panel-item>
         <panel-item data-l10n-id="always-activate-button" action="always-activate"></panel-item>
         <panel-item data-l10n-id="never-activate-button" action="never-activate"></panel-item>
         <panel-item-separator></panel-item-separator>
diff --git a/toolkit/mozapps/extensions/content/aboutaddons.js b/toolkit/mozapps/extensions/content/aboutaddons.js
index 4d7214077a063..cb11f4cd1fb9f 100644
--- a/toolkit/mozapps/extensions/content/aboutaddons.js
+++ b/toolkit/mozapps/extensions/content/aboutaddons.js
@@ -119,7 +119,6 @@ if (
 }
 
 const PERMISSION_MASKS = {
-  "ask-to-activate": AddonManager.PERM_CAN_ASK_TO_ACTIVATE,
   enable: AddonManager.PERM_CAN_ENABLE,
   "always-activate": AddonManager.PERM_CAN_ENABLE,
   disable: AddonManager.PERM_CAN_DISABLE,
@@ -2135,7 +2134,6 @@ class PluginOptions extends AddonOptions {
 
   setElementState(el, card, addon) {
     const userDisabledStates = {
-      "ask-to-activate": AddonManager.STATE_ASK_TO_ACTIVATE,
       "always-activate": false,
       "never-activate": true,
     };
@@ -3009,11 +3007,6 @@ class AddonCard extends HTMLElement {
             await addon.disable();
           }
           break;
-        case "ask-to-activate":
-          if (hasPermission(addon, "ask-to-activate")) {
-            addon.userDisabled = AddonManager.STATE_ASK_TO_ACTIVATE;
-          }
-          break;
         case "always-activate":
           this.recordActionEvent("enable");
           addon.userDisabled = false;
diff --git a/toolkit/mozapps/extensions/internal/GMPProvider.jsm b/toolkit/mozapps/extensions/internal/GMPProvider.jsm
index 5e8b0dd14609b..4c993f82a740d 100644
--- a/toolkit/mozapps/extensions/internal/GMPProvider.jsm
+++ b/toolkit/mozapps/extensions/internal/GMPProvider.jsm
@@ -875,8 +875,7 @@ var GMPProvider = {
           URI_EXTENSION_STRINGS,
           "type.plugin.name",
           AddonManager.VIEW_TYPE_LIST,
-          6000,
-          AddonManager.TYPE_SUPPORTS_ASK_TO_ACTIVATE
+          6000
         ),
       ]);
       Services.obs.removeObserver(this, FIRST_CONTENT_PROCESS_TOPIC);
diff --git a/toolkit/mozapps/extensions/internal/XPIProvider.jsm b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
index 06773a773c93b..869816ce20794 100644
--- a/toolkit/mozapps/extensions/internal/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
@@ -3279,8 +3279,7 @@ var addonTypes = [
     URI_EXTENSION_STRINGS,
     "type.extension.name",
     AddonManager.VIEW_TYPE_LIST,
-    4000,
-    AddonManager.TYPE_SUPPORTS_UNDO_RESTARTLESS_UNINSTALL
+    4000
   ),
   new AddonManagerPrivate.AddonType(
     "theme",
@@ -3294,18 +3293,14 @@ var addonTypes = [
     URI_EXTENSION_STRINGS,
     "type.dictionary.name",
     AddonManager.VIEW_TYPE_LIST,
-    7000,
-    AddonManager.TYPE_UI_HIDE_EMPTY |
-      AddonManager.TYPE_SUPPORTS_UNDO_RESTARTLESS_UNINSTALL
+    7000
   ),
   new AddonManagerPrivate.AddonType(
     "locale",
     URI_EXTENSION_STRINGS,
     "type.locale.name",
     AddonManager.VIEW_TYPE_LIST,
-    8000,
-    AddonManager.TYPE_UI_HIDE_EMPTY |
-      AddonManager.TYPE_SUPPORTS_UNDO_RESTARTLESS_UNINSTALL
+    8000
   ),
 ];
 
