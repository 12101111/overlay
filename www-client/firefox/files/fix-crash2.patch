diff --git a/gfx/webrender_bindings/src/bindings.rs b/gfx/webrender_bindings/src/bindings.rs
index 9e8b52a9d2..83e826e418 100644
--- a/gfx/webrender_bindings/src/bindings.rs
+++ b/gfx/webrender_bindings/src/bindings.rs
@@ -223,18 +223,30 @@ impl WrVecU8 {
     }
 
     // Equivalent to `into_vec` but clears self instead of consuming the value.
-    fn flush_into_vec(&mut self) -> Vec<u8> {
+    unsafe fn flush_into_vec(&mut self) -> Vec<u8> {
         self.convert_into_vec::<u8>()
     }
 
     // Like flush_into_vec, but also does an unsafe conversion to the desired type.
-    fn convert_into_vec<T>(&mut self) -> Vec<T> {
-        let vec = unsafe {
+    unsafe fn convert_into_vec<T>(&mut self) -> Vec<T> {
+        let vec = if mem::align_of::<T>() == 1 {
             Vec::from_raw_parts(
                 self.data as *mut T,
                 self.length / mem::size_of::<T>(),
                 self.capacity / mem::size_of::<T>(),
             )
+        } else if self.length != 0 {
+            let length = self.length / mem::size_of::<T>();
+            debug_assert!(length != 0);
+            debug_assert!(self.length % mem::size_of::<T>() == 0);
+            let mut new_vec = Vec::with_capacity(length);
+            let new_ptr = new_vec.as_mut_ptr() as *mut u8;
+            ptr::copy_nonoverlapping(self.data, new_ptr, self.length);
+            new_vec.set_len(length);
+            Vec::from_raw_parts(self.data, self.length, self.capacity);
+            new_vec
+        } else {
+            Vec::new()
         };
         self.data = ptr::null_mut();
         self.length = 0;
@@ -253,13 +265,13 @@ impl WrVecU8 {
     }
 
     fn reserve(&mut self, len: usize) {
-        let mut vec = self.flush_into_vec();
+        let mut vec = unsafe { self.flush_into_vec() };
         vec.reserve(len);
         *self = Self::from_vec(vec);
     }
 
     fn push_bytes(&mut self, bytes: &[u8]) {
-        let mut vec = self.flush_into_vec();
+        let mut vec = unsafe { self.flush_into_vec() };
         vec.extend_from_slice(bytes);
         *self = Self::from_vec(vec);
     }
@@ -1860,10 +1872,12 @@ pub extern "C" fn wr_transaction_set_display_list(
     // but I suppose it is a good default.
     let preserve_frame_state = true;
 
-    let payload = DisplayListPayload {
-        items_data: dl_items_data.flush_into_vec(),
-        cache_data: dl_cache_data.flush_into_vec(),
-        spatial_tree: dl_spatial_tree_data.flush_into_vec(),
+    let payload = unsafe {
+        DisplayListPayload {
+            items_data: dl_items_data.flush_into_vec(),
+            cache_data: dl_cache_data.flush_into_vec(),
+            spatial_tree: dl_spatial_tree_data.flush_into_vec(),
+        }
     };
 
     let dl = BuiltDisplayList::from_data(payload, dl_descriptor);
@@ -1993,7 +2007,7 @@ pub extern "C" fn wr_resource_updates_add_image(
     txn.add_image(
         image_key,
         descriptor.into(),
-        ImageData::new(bytes.flush_into_vec()),
+        unsafe { ImageData::new(bytes.flush_into_vec()) },
         None,
     );
 }
@@ -2010,7 +2024,7 @@ pub extern "C" fn wr_resource_updates_add_blob_image(
     txn.add_blob_image(
         image_key,
         descriptor.into(),
-        Arc::new(bytes.flush_into_vec()),
+        Arc::new(unsafe { bytes.flush_into_vec() }),
         visible_rect,
         if descriptor.format == ImageFormat::BGRA8 {
             Some(tile_size)
@@ -2051,7 +2065,7 @@ pub extern "C" fn wr_resource_updates_update_image(
     txn.update_image(
         key,
         descriptor.into(),
-        ImageData::new(bytes.flush_into_vec()),
+        ImageData::new(unsafe { bytes.flush_into_vec() }),
         &DirtyRect::All,
     );
 }
@@ -2120,7 +2134,7 @@ pub extern "C" fn wr_resource_updates_update_blob_image(
     txn.update_blob_image(
         image_key,
         descriptor.into(),
-        Arc::new(bytes.flush_into_vec()),
+        Arc::new(unsafe{ bytes.flush_into_vec() }),
         visible_rect,
         &DirtyRect::Partial(dirty_rect),
     );
@@ -2179,7 +2193,7 @@ pub extern "C" fn wr_resource_updates_add_raw_font(
     bytes: &mut WrVecU8,
     index: u32,
 ) {
-    txn.add_raw_font(key, bytes.flush_into_vec(), index);
+    txn.add_raw_font(key, unsafe { bytes.flush_into_vec() }, index);
 }
 
 fn generate_capture_path(path: *const c_char) -> Option<PathBuf> {
@@ -2260,7 +2274,7 @@ pub extern "C" fn wr_api_stop_capture_sequence(dh: &mut DocumentHandle) {
 
 #[cfg(target_os = "windows")]
 fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
-    let wchars = bytes.convert_into_vec::<u16>();
+    let wchars = unsafe { bytes.convert_into_vec::<u16>() };
     NativeFontHandle {
         path: PathBuf::from(OsString::from_wide(&wchars)),
         index,
@@ -2269,7 +2283,7 @@ fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
 
 #[cfg(target_os = "macos")]
 fn read_font_descriptor(bytes: &mut WrVecU8, _index: u32) -> NativeFontHandle {
-    let chars = bytes.flush_into_vec();
+    let chars = unsafe{ bytes.flush_into_vec() };
     let name = String::from_utf8(chars).unwrap();
     let font = match CGFont::from_name(&CFString::new(&*name)) {
         Ok(font) => font,
@@ -2288,7 +2302,7 @@ fn read_font_descriptor(bytes: &mut WrVecU8, _index: u32) -> NativeFontHandle {
 
 #[cfg(not(any(target_os = "macos", target_os = "windows")))]
 fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
-    let chars = bytes.flush_into_vec();
+    let chars = unsafe{ bytes.flush_into_vec() };
     NativeFontHandle {
         path: PathBuf::from(OsString::from_vec(chars)),
         index,
@@ -2327,7 +2341,7 @@ pub extern "C" fn wr_resource_updates_add_font_instance(
         glyph_size,
         unsafe { options.as_ref().cloned() },
         unsafe { platform_options.as_ref().cloned() },
-        variations.convert_into_vec::<FontVariation>(),
+        unsafe { variations.convert_into_vec::<FontVariation>() },
     );
 }
 
diff --git a/third_party/rust/neqo-crypto/.cargo-checksum.json b/third_party/rust/neqo-crypto/.cargo-checksum.json
index c1fc76326a..575960aebe 100644
--- a/third_party/rust/neqo-crypto/.cargo-checksum.json
+++ b/third_party/rust/neqo-crypto/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"366920694e669ddce1b78bcc73f64d9081f988f635a250ef6d24eb60bf91721f","TODO":"ac0f1c2ebcca03f5b3c0cc56c5aedbb030a4b511e438bc07a57361c789f91e9f","bindings/bindings.toml":"d136f82a333b0ee1499e7858fdfc3d630f7ff37501a3c51028a4eeb7e2f136b4","bindings/mozpkix.hpp":"77072c8bb0f6eb6bfe8cbadc111dcd92e0c79936d13f2e501aae1e5d289a6675","bindings/nspr_err.h":"2d5205d017b536c2d838bcf9bc4ec79f96dd50e7bb9b73892328781f1ee6629d","bindings/nspr_error.h":"e41c03c77b8c22046f8618832c9569fbcc7b26d8b9bbc35eea7168f35e346889","bindings/nspr_io.h":"085b289849ef0e77f88512a27b4d9bdc28252bd4d39c6a17303204e46ef45f72","bindings/nspr_time.h":"2e637fd338a5cf0fd3fb0070a47f474a34c2a7f4447f31b6875f5a9928d0a261","bindings/nss_ciphers.h":"95ec6344a607558b3c5ba8510f463b6295f3a2fb3f538a01410531045a5f62d1","bindings/nss_init.h":"ef49045063782fb612aff459172cc6a89340f15005808608ade5320ca9974310","bindings/nss_p11.h":"0b81e64fe6db49b2ecff94edd850be111ef99ec11220e88ceb1c67be90143a78","bindings/nss_secerr.h":"713e8368bdae5159af7893cfa517dabfe5103cede051dee9c9557c850a2defc6","bindings/nss_ssl.h":"af222fb957b989e392e762fa2125c82608a0053aff4fb97e556691646c88c335","bindings/nss_sslerr.h":"24b97f092183d8486f774cdaef5030d0249221c78343570d83a4ee5b594210ae","bindings/nss_sslopt.h":"b7807eb7abdad14db6ad7bc51048a46b065a0ea65a4508c95a12ce90e59d1eea","build.rs":"4bc26650fa85150c1a377f030e681576f92005a14f14fd8818e7ceb95c2c2a1a","src/aead.rs":"140f77ffb5016836c970c39c6c3a42db9581a14b797b9cd05386d0dd0831fe63","src/aead_fuzzing.rs":"4e60d5a2ee6dedfd08602fa36318239e731244825df2cb801ca1d88f5f2a41c1","src/agent.rs":"f83ec6be81a39f52383bec7a1fec2069055088788a989ecfd7fd155f0d5cb788","src/agentio.rs":"85a1f5295e98fcec0e884fb11e21cbc4c64de0f2ad5b6d78464ed9ac064fb495","src/auth.rs":"e821dac1511691151a6e64b7c7130a07d941dffad4529b2631f20ddd07d3f20c","src/cert.rs":"94450b248eed218b9227861ed81e557a543c0c88868fe1a434dc9c9f0f9651ae","src/constants.rs":"998e77bee88197a240032c1bfbddcff417a25ba82e576a0d2fe18ee9b63cefc7","src/ech.rs":"1b6ee298855d34310a0d65367b21fdc38678a9c37fc7e1d9579c3c8dfd753377","src/err.rs":"d4dbe63e2faba3a1f08dca015549c32550cb18907592abc3831e05e330f0a93b","src/exp.rs":"61586662407359c1ecb8ed4987bc3c702f26ba2e203a091a51b6d6363cbd510f","src/ext.rs":"361277879194dc32f741b8d1894afe5fd3fcc8eb244f7dd5914eeb959b85717d","src/hkdf.rs":"3ff432cc9d40e1dc56e9f983b54b593647c4063a5ae0f16de0a64d033ac9bd94","src/hp.rs":"46a2023c421d89fda8d09b356b648272857fd20ee5cf5829143ac88402b32e4b","src/lib.rs":"4a4aacab783b2e21d9f2f33891bc75c5a8018894c3cdf828848ccb59bf5b2d41","src/once.rs":"b9850384899a1a016e839743d3489c0d4d916e1973746ef8c89872105d7d9736","src/p11.rs":"ae054861719fdead8227220dd5a28b92882756683a436676470b672ee26b9a4e","src/prio.rs":"4224a65f25d7de9bf7d6cb18b15597a39650b3c4fcf7d184a4e4bd7f65cebccd","src/replay.rs":"c9bc0261fe1ae22e7212774c315a2669784e57762ca975a15250d4a33dbf3ea3","src/result.rs":"cef34dfcb907723e195b56501132e4560e250b327783cb5e41201da5b63e9b5c","src/secrets.rs":"48790a330994d892742048000bd12460b7eee2c3daaa444481b8527406d0a4c7","src/selfencrypt.rs":"4a9af42ccefbc77c65baedf00ef389de4fa7ed855d7ab3b60542b5931050667d","src/ssl.rs":"32e934e6dc5df4e4b4cbe96bae53921cf09a684959cb5ad3469cd65965f3164c","src/time.rs":"ddecb9f6cb6b3367852943d27fc89fd36d3c0ca0c9b5c9797494b74de2d8b5c7","tests/aead.rs":"a0fe826aa3bfcce22dbe1b06b74823cb2334331ffe6ce6152952613e9e1ccae5","tests/agent.rs":"edda258896324f0a950427fd625594bd31d772fe968a29097d6dbd76523c39c4","tests/ext.rs":"eba9f03accdd598e38292ac88263a81b367d60d5a736a43117a3663de105ec48","tests/handshake.rs":"6ea3e5b3bc889d201b55f959b658a848c0ada54c956bda087b2ac8897a24a786","tests/hkdf.rs":"47830c1ea58a02d100522bdde6fabc02bb447ccb85affa0cdc44bc25da1be32a","tests/hp.rs":"92e062538c01fa7a474225714ed238d846ceb8c8feb9d79eb05be6111b00fb1e","tests/init.rs":"fc9e392b1efa0d8efb28952f73ffc05e5348e7b2b69207b60e375c3888a252a2","tests/selfencrypt.rs":"1125c858ec4e0a6994f34d162aa066cb003c61b324f268529ea04bcb641347cb"},"package":null}
\ No newline at end of file
+{"files":{"Cargo.toml":"366920694e669ddce1b78bcc73f64d9081f988f635a250ef6d24eb60bf91721f","TODO":"ac0f1c2ebcca03f5b3c0cc56c5aedbb030a4b511e438bc07a57361c789f91e9f","bindings/bindings.toml":"d136f82a333b0ee1499e7858fdfc3d630f7ff37501a3c51028a4eeb7e2f136b4","bindings/mozpkix.hpp":"77072c8bb0f6eb6bfe8cbadc111dcd92e0c79936d13f2e501aae1e5d289a6675","bindings/nspr_err.h":"2d5205d017b536c2d838bcf9bc4ec79f96dd50e7bb9b73892328781f1ee6629d","bindings/nspr_error.h":"e41c03c77b8c22046f8618832c9569fbcc7b26d8b9bbc35eea7168f35e346889","bindings/nspr_io.h":"085b289849ef0e77f88512a27b4d9bdc28252bd4d39c6a17303204e46ef45f72","bindings/nspr_time.h":"2e637fd338a5cf0fd3fb0070a47f474a34c2a7f4447f31b6875f5a9928d0a261","bindings/nss_ciphers.h":"95ec6344a607558b3c5ba8510f463b6295f3a2fb3f538a01410531045a5f62d1","bindings/nss_init.h":"ef49045063782fb612aff459172cc6a89340f15005808608ade5320ca9974310","bindings/nss_p11.h":"0b81e64fe6db49b2ecff94edd850be111ef99ec11220e88ceb1c67be90143a78","bindings/nss_secerr.h":"713e8368bdae5159af7893cfa517dabfe5103cede051dee9c9557c850a2defc6","bindings/nss_ssl.h":"af222fb957b989e392e762fa2125c82608a0053aff4fb97e556691646c88c335","bindings/nss_sslerr.h":"24b97f092183d8486f774cdaef5030d0249221c78343570d83a4ee5b594210ae","bindings/nss_sslopt.h":"b7807eb7abdad14db6ad7bc51048a46b065a0ea65a4508c95a12ce90e59d1eea","build.rs":"4bc26650fa85150c1a377f030e681576f92005a14f14fd8818e7ceb95c2c2a1a","src/aead.rs":"140f77ffb5016836c970c39c6c3a42db9581a14b797b9cd05386d0dd0831fe63","src/aead_fuzzing.rs":"4e60d5a2ee6dedfd08602fa36318239e731244825df2cb801ca1d88f5f2a41c1","src/agent.rs":"f83ec6be81a39f52383bec7a1fec2069055088788a989ecfd7fd155f0d5cb788","src/agentio.rs":"85a1f5295e98fcec0e884fb11e21cbc4c64de0f2ad5b6d78464ed9ac064fb495","src/auth.rs":"e821dac1511691151a6e64b7c7130a07d941dffad4529b2631f20ddd07d3f20c","src/cert.rs":"502206ca5b67acb48fbd82b6dd45a810ba9ceb0ebdd56d88ee4f6a266820db04","src/constants.rs":"998e77bee88197a240032c1bfbddcff417a25ba82e576a0d2fe18ee9b63cefc7","src/ech.rs":"1b6ee298855d34310a0d65367b21fdc38678a9c37fc7e1d9579c3c8dfd753377","src/err.rs":"d4dbe63e2faba3a1f08dca015549c32550cb18907592abc3831e05e330f0a93b","src/exp.rs":"61586662407359c1ecb8ed4987bc3c702f26ba2e203a091a51b6d6363cbd510f","src/ext.rs":"361277879194dc32f741b8d1894afe5fd3fcc8eb244f7dd5914eeb959b85717d","src/hkdf.rs":"3ff432cc9d40e1dc56e9f983b54b593647c4063a5ae0f16de0a64d033ac9bd94","src/hp.rs":"46a2023c421d89fda8d09b356b648272857fd20ee5cf5829143ac88402b32e4b","src/lib.rs":"4a4aacab783b2e21d9f2f33891bc75c5a8018894c3cdf828848ccb59bf5b2d41","src/once.rs":"b9850384899a1a016e839743d3489c0d4d916e1973746ef8c89872105d7d9736","src/p11.rs":"ae054861719fdead8227220dd5a28b92882756683a436676470b672ee26b9a4e","src/prio.rs":"4224a65f25d7de9bf7d6cb18b15597a39650b3c4fcf7d184a4e4bd7f65cebccd","src/replay.rs":"c9bc0261fe1ae22e7212774c315a2669784e57762ca975a15250d4a33dbf3ea3","src/result.rs":"cef34dfcb907723e195b56501132e4560e250b327783cb5e41201da5b63e9b5c","src/secrets.rs":"48790a330994d892742048000bd12460b7eee2c3daaa444481b8527406d0a4c7","src/selfencrypt.rs":"4a9af42ccefbc77c65baedf00ef389de4fa7ed855d7ab3b60542b5931050667d","src/ssl.rs":"32e934e6dc5df4e4b4cbe96bae53921cf09a684959cb5ad3469cd65965f3164c","src/time.rs":"ddecb9f6cb6b3367852943d27fc89fd36d3c0ca0c9b5c9797494b74de2d8b5c7","tests/aead.rs":"a0fe826aa3bfcce22dbe1b06b74823cb2334331ffe6ce6152952613e9e1ccae5","tests/agent.rs":"edda258896324f0a950427fd625594bd31d772fe968a29097d6dbd76523c39c4","tests/ext.rs":"eba9f03accdd598e38292ac88263a81b367d60d5a736a43117a3663de105ec48","tests/handshake.rs":"6ea3e5b3bc889d201b55f959b658a848c0ada54c956bda087b2ac8897a24a786","tests/hkdf.rs":"47830c1ea58a02d100522bdde6fabc02bb447ccb85affa0cdc44bc25da1be32a","tests/hp.rs":"92e062538c01fa7a474225714ed238d846ceb8c8feb9d79eb05be6111b00fb1e","tests/init.rs":"fc9e392b1efa0d8efb28952f73ffc05e5348e7b2b69207b60e375c3888a252a2","tests/selfencrypt.rs":"1125c858ec4e0a6994f34d162aa066cb003c61b324f268529ea04bcb641347cb"},"package":null}
diff --git a/third_party/rust/neqo-crypto/src/cert.rs b/third_party/rust/neqo-crypto/src/cert.rs
index ef8a6e60e8..2021c9547f 100644
--- a/third_party/rust/neqo-crypto/src/cert.rs
+++ b/third_party/rust/neqo-crypto/src/cert.rs
@@ -65,10 +65,14 @@ fn signed_cert_timestamp(fd: *mut PRFileDesc) -> Option<Vec<u8>> {
     let sct_nss = unsafe { SSL_PeerSignedCertTimestamps(fd) };
     match NonNull::new(sct_nss as *mut SECItem) {
         Some(sct_ptr) => {
-            let sct_slice = unsafe {
-                slice::from_raw_parts(sct_ptr.as_ref().data, sct_ptr.as_ref().len as usize)
-            };
-            Some(sct_slice.to_owned())
+            if unsafe { sct_ptr.as_ref().data.is_null() || sct_ptr.as_ref().len == 0 } {
+                Some(Vec::new())
+            } else {
+                let sct_slice = unsafe {
+                    slice::from_raw_parts(sct_ptr.as_ref().data, sct_ptr.as_ref().len as usize)
+                };
+                Some(sct_slice.to_owned())
+            }
         }
         None => None,
     }
