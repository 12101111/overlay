diff --git a/gfx/webrender_bindings/src/bindings.rs b/gfx/webrender_bindings/src/bindings.rs
index 9e8b52a9d2..83e826e418 100644
--- a/gfx/webrender_bindings/src/bindings.rs
+++ b/gfx/webrender_bindings/src/bindings.rs
@@ -223,18 +223,30 @@ impl WrVecU8 {
     }
 
     // Equivalent to `into_vec` but clears self instead of consuming the value.
-    fn flush_into_vec(&mut self) -> Vec<u8> {
+    unsafe fn flush_into_vec(&mut self) -> Vec<u8> {
         self.convert_into_vec::<u8>()
     }
 
     // Like flush_into_vec, but also does an unsafe conversion to the desired type.
-    fn convert_into_vec<T>(&mut self) -> Vec<T> {
-        let vec = unsafe {
+    unsafe fn convert_into_vec<T>(&mut self) -> Vec<T> {
+        let vec = if mem::align_of::<T>() == 1 {
             Vec::from_raw_parts(
                 self.data as *mut T,
                 self.length / mem::size_of::<T>(),
                 self.capacity / mem::size_of::<T>(),
             )
+        } else if self.length != 0 {
+            let length = self.length / mem::size_of::<T>();
+            debug_assert!(length != 0);
+            debug_assert!(self.length % mem::size_of::<T>() == 0);
+            let mut new_vec = Vec::with_capacity(length);
+            let new_ptr = new_vec.as_mut_ptr() as *mut u8;
+            ptr::copy_nonoverlapping(self.data, new_ptr, self.length);
+            new_vec.set_len(length);
+            Vec::from_raw_parts(self.data, self.length, self.capacity);
+            new_vec
+        } else {
+            Vec::new()
         };
         self.data = ptr::null_mut();
         self.length = 0;
@@ -253,13 +265,13 @@ impl WrVecU8 {
     }
 
     fn reserve(&mut self, len: usize) {
-        let mut vec = self.flush_into_vec();
+        let mut vec = unsafe { self.flush_into_vec() };
         vec.reserve(len);
         *self = Self::from_vec(vec);
     }
 
     fn push_bytes(&mut self, bytes: &[u8]) {
-        let mut vec = self.flush_into_vec();
+        let mut vec = unsafe { self.flush_into_vec() };
         vec.extend_from_slice(bytes);
         *self = Self::from_vec(vec);
     }
@@ -1860,10 +1872,12 @@ pub extern "C" fn wr_transaction_set_display_list(
     // but I suppose it is a good default.
     let preserve_frame_state = true;
 
-    let payload = DisplayListPayload {
-        items_data: dl_items_data.flush_into_vec(),
-        cache_data: dl_cache_data.flush_into_vec(),
-        spatial_tree: dl_spatial_tree_data.flush_into_vec(),
+    let payload = unsafe {
+        DisplayListPayload {
+            items_data: dl_items_data.flush_into_vec(),
+            cache_data: dl_cache_data.flush_into_vec(),
+            spatial_tree: dl_spatial_tree_data.flush_into_vec(),
+        }
     };
 
     let dl = BuiltDisplayList::from_data(payload, dl_descriptor);
@@ -1993,7 +2007,7 @@ pub extern "C" fn wr_resource_updates_add_image(
     txn.add_image(
         image_key,
         descriptor.into(),
-        ImageData::new(bytes.flush_into_vec()),
+        unsafe { ImageData::new(bytes.flush_into_vec()) },
         None,
     );
 }
@@ -2010,7 +2024,7 @@ pub extern "C" fn wr_resource_updates_add_blob_image(
     txn.add_blob_image(
         image_key,
         descriptor.into(),
-        Arc::new(bytes.flush_into_vec()),
+        Arc::new(unsafe { bytes.flush_into_vec() }),
         visible_rect,
         if descriptor.format == ImageFormat::BGRA8 {
             Some(tile_size)
@@ -2051,7 +2065,7 @@ pub extern "C" fn wr_resource_updates_update_image(
     txn.update_image(
         key,
         descriptor.into(),
-        ImageData::new(bytes.flush_into_vec()),
+        ImageData::new(unsafe { bytes.flush_into_vec() }),
         &DirtyRect::All,
     );
 }
@@ -2120,7 +2134,7 @@ pub extern "C" fn wr_resource_updates_update_blob_image(
     txn.update_blob_image(
         image_key,
         descriptor.into(),
-        Arc::new(bytes.flush_into_vec()),
+        Arc::new(unsafe{ bytes.flush_into_vec() }),
         visible_rect,
         &DirtyRect::Partial(dirty_rect),
     );
@@ -2179,7 +2193,7 @@ pub extern "C" fn wr_resource_updates_add_raw_font(
     bytes: &mut WrVecU8,
     index: u32,
 ) {
-    txn.add_raw_font(key, bytes.flush_into_vec(), index);
+    txn.add_raw_font(key, unsafe { bytes.flush_into_vec() }, index);
 }
 
 fn generate_capture_path(path: *const c_char) -> Option<PathBuf> {
@@ -2260,7 +2274,7 @@ pub extern "C" fn wr_api_stop_capture_sequence(dh: &mut DocumentHandle) {
 
 #[cfg(target_os = "windows")]
 fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
-    let wchars = bytes.convert_into_vec::<u16>();
+    let wchars = unsafe { bytes.convert_into_vec::<u16>() };
     NativeFontHandle {
         path: PathBuf::from(OsString::from_wide(&wchars)),
         index,
@@ -2269,7 +2283,7 @@ fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
 
 #[cfg(target_os = "macos")]
 fn read_font_descriptor(bytes: &mut WrVecU8, _index: u32) -> NativeFontHandle {
-    let chars = bytes.flush_into_vec();
+    let chars = unsafe{ bytes.flush_into_vec() };
     let name = String::from_utf8(chars).unwrap();
     let font = match CGFont::from_name(&CFString::new(&*name)) {
         Ok(font) => font,
@@ -2288,7 +2302,7 @@ fn read_font_descriptor(bytes: &mut WrVecU8, _index: u32) -> NativeFontHandle {
 
 #[cfg(not(any(target_os = "macos", target_os = "windows")))]
 fn read_font_descriptor(bytes: &mut WrVecU8, index: u32) -> NativeFontHandle {
-    let chars = bytes.flush_into_vec();
+    let chars = unsafe{ bytes.flush_into_vec() };
     NativeFontHandle {
         path: PathBuf::from(OsString::from_vec(chars)),
         index,
@@ -2327,7 +2341,7 @@ pub extern "C" fn wr_resource_updates_add_font_instance(
         glyph_size,
         unsafe { options.as_ref().cloned() },
         unsafe { platform_options.as_ref().cloned() },
-        variations.convert_into_vec::<FontVariation>(),
+        unsafe { variations.convert_into_vec::<FontVariation>() },
     );
 }
 
