diff --git a/third_party/rust/audioipc/.cargo-checksum.json b/third_party/rust/audioipc/.cargo-checksum.json
index c2ffe32..f52196e 100644
--- a/third_party/rust/audioipc/.cargo-checksum.json
+++ b/third_party/rust/audioipc/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"0b9a3ce0f238c34e8d12eb867010ed5948f138d9a9b8a1be6812ac433335eea5","build.rs":"3f061cf9a989f63a71c693a543d26f7003e8b643c39c23ea555110252a2c39d2","src/async_msg.rs":"27c5c8215bcbe1364947065ac78198bcd4be7fbae0f5e49ea776cb454c5a6d2c","src/cmsg.rs":"97d8fe99ef94f75db9ed26cb4cf6faf9fbbc913cfa4152a8774ff4e76aead620","src/cmsghdr.c":"d7344b3dc15cdce410c68669b848bb81f7fe36362cd3699668cb613fa05180f8","src/codec.rs":"2e0a05968e07617adc6be0cbf04962c952c621e118f0db308eeeed5ccea4dfce","src/core.rs":"721de353d3b0b5126bf5b25cfb1f99244702309ce9f9f24cc2ce3c5858228794","src/errors.rs":"67a4a994d0724397657581cde153bdfc05ce86e7efc467f23fafc8f64df80fa4","src/framing.rs":"45122f0bc44458d8e111466437e784f0d17035309cb5f03d45a5861082168ea1","src/lib.rs":"717151468773630600530a16d6c89ba559e321551e95e0f3d83721474ec82ae6","src/messages.rs":"6d59588add4dc4eb324a630980fa10acd64ad5e1feda74a9ec10b0f7d10798f1","src/messagestream_unix.rs":"786ea7d2d2993c21987d34c0617abd78dbaa57079de68ea3ebbf5611a052f60b","src/messagestream_win.rs":"f5b2a0e22f56a14af24a76a4c13a1d6b066fbea347132a5413bee0bd2b757753","src/msg.rs":"f5353e942f7818742190541e568685d6b4d6200b55bfc60e46ee3db05f802436","src/rpc/client/mod.rs":"04e80b689548e7888b34441a7224dfa8cf557b8b4164754daee95a95b76f9aee","src/rpc/client/proxy.rs":"8d9c9b38ecec4ab5ee3b6e4c2d7aea9dbb4f7cf5c25d39a5db0c76aa41008497","src/rpc/driver.rs":"dea4efc844485e98c21f766772422e3a5c9ac153ade32c0ff51287516a05690b","src/rpc/mod.rs":"3b14af0be2b4c7b30a0dab9cca353e092652a16e29002f5aeba24dca45e33d1e","src/rpc/server.rs":"7caf0b2d659783b4c5c9dd9efe4cb9a2e7d5955c0dfda3d2e79581116bb9334b","src/shm.rs":"94dee9454acfb4541b7757fd6763b8ecfe1961bb0da780caf463dc6509ba1d98","src/tokio_named_pipes.rs":"c0d74ab6330ebdec53db12f0f532b60897c37e70345c368f10165d9b31409643","src/tokio_uds_stream.rs":"3251b91e4129f174a588648ec43575b35e139b67d4b8833fe324e82e67d5c3da"},"package":null}
\ No newline at end of file
+{"files":{"Cargo.toml":"0b9a3ce0f238c34e8d12eb867010ed5948f138d9a9b8a1be6812ac433335eea5","build.rs":"3f061cf9a989f63a71c693a543d26f7003e8b643c39c23ea555110252a2c39d2","src/async_msg.rs":"27c5c8215bcbe1364947065ac78198bcd4be7fbae0f5e49ea776cb454c5a6d2c","src/cmsg.rs":"825a26e152f6cfbc2cf43b171c195da1eaf0646cc822bc227663fa46f8c60ffe","src/cmsghdr.c":"d7344b3dc15cdce410c68669b848bb81f7fe36362cd3699668cb613fa05180f8","src/codec.rs":"2e0a05968e07617adc6be0cbf04962c952c621e118f0db308eeeed5ccea4dfce","src/core.rs":"721de353d3b0b5126bf5b25cfb1f99244702309ce9f9f24cc2ce3c5858228794","src/errors.rs":"67a4a994d0724397657581cde153bdfc05ce86e7efc467f23fafc8f64df80fa4","src/framing.rs":"45122f0bc44458d8e111466437e784f0d17035309cb5f03d45a5861082168ea1","src/lib.rs":"717151468773630600530a16d6c89ba559e321551e95e0f3d83721474ec82ae6","src/messages.rs":"6d59588add4dc4eb324a630980fa10acd64ad5e1feda74a9ec10b0f7d10798f1","src/messagestream_unix.rs":"786ea7d2d2993c21987d34c0617abd78dbaa57079de68ea3ebbf5611a052f60b","src/messagestream_win.rs":"f5b2a0e22f56a14af24a76a4c13a1d6b066fbea347132a5413bee0bd2b757753","src/msg.rs":"f5353e942f7818742190541e568685d6b4d6200b55bfc60e46ee3db05f802436","src/rpc/client/mod.rs":"04e80b689548e7888b34441a7224dfa8cf557b8b4164754daee95a95b76f9aee","src/rpc/client/proxy.rs":"8d9c9b38ecec4ab5ee3b6e4c2d7aea9dbb4f7cf5c25d39a5db0c76aa41008497","src/rpc/driver.rs":"dea4efc844485e98c21f766772422e3a5c9ac153ade32c0ff51287516a05690b","src/rpc/mod.rs":"3b14af0be2b4c7b30a0dab9cca353e092652a16e29002f5aeba24dca45e33d1e","src/rpc/server.rs":"7caf0b2d659783b4c5c9dd9efe4cb9a2e7d5955c0dfda3d2e79581116bb9334b","src/shm.rs":"94dee9454acfb4541b7757fd6763b8ecfe1961bb0da780caf463dc6509ba1d98","src/tokio_named_pipes.rs":"c0d74ab6330ebdec53db12f0f532b60897c37e70345c368f10165d9b31409643","src/tokio_uds_stream.rs":"3251b91e4129f174a588648ec43575b35e139b67d4b8833fe324e82e67d5c3da"},"package":null}
diff --git a/third_party/rust/audioipc/src/cmsg.rs b/third_party/rust/audioipc/src/cmsg.rs
index 70cb579..7a40f3f 100644
--- a/third_party/rust/audioipc/src/cmsg.rs
+++ b/third_party/rust/audioipc/src/cmsg.rs
@@ -7,28 +7,7 @@ use bytes::{BufMut, Bytes, BytesMut};
 use libc::{self, cmsghdr};
 use std::convert::TryInto;
 use std::os::unix::io::RawFd;
-use std::{convert, mem, ops, slice};
-
-#[derive(Clone, Debug)]
-pub struct Fds {
-    fds: Bytes,
-}
-
-impl convert::AsRef<[RawFd]> for Fds {
-    fn as_ref(&self) -> &[RawFd] {
-        let n = self.fds.len() / mem::size_of::<RawFd>();
-        unsafe { slice::from_raw_parts(self.fds.as_ptr() as *const _, n) }
-    }
-}
-
-impl ops::Deref for Fds {
-    type Target = [RawFd];
-
-    #[inline]
-    fn deref(&self) -> &[RawFd] {
-        self.as_ref()
-    }
-}
+use std::{mem, slice};
 
 pub struct ControlMsgIter {
     control: Bytes,
@@ -39,7 +18,7 @@ pub fn iterator(c: Bytes) -> ControlMsgIter {
 }
 
 impl Iterator for ControlMsgIter {
-    type Item = Fds;
+    type Item = Vec<RawFd>;
 
     fn next(&mut self) -> Option<Self::Item> {
         loop {
@@ -69,9 +48,18 @@ impl Iterator for ControlMsgIter {
             match (cmsg.cmsg_level, cmsg.cmsg_type) {
                 (libc::SOL_SOCKET, libc::SCM_RIGHTS) => {
                     trace!("Found SCM_RIGHTS...");
-                    return Some(Fds {
-                        fds: control.slice(cmsghdr_len, cmsg_len as _),
-                    });
+                    let fd_slice = control.slice(cmsghdr_len, cmsg_len as _);
+                    let fds_len = fd_slice.len() / mem::size_of::<RawFd>();
+                    let mut fds = Vec::with_capacity(fds_len);
+                    unsafe {
+                        std::ptr::copy_nonoverlapping(
+                            fd_slice.as_ptr(),
+                            fds.as_mut_ptr() as _,
+                            fd_slice.len(),
+                        );
+                        fds.set_len(fds_len);
+                    }
+                    return Some(fds);
                 }
                 (level, kind) => {
                     trace!("Skipping cmsg level, {}, type={}...", level, kind);
